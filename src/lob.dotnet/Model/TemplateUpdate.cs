/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// TemplateUpdate
    /// </summary>
    [DataContract(Name = "template_update")]
    public partial class TemplateUpdate : IEquatable<TemplateUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateUpdate" /> class.
        /// </summary>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="publishedVersion">Unique identifier prefixed with &#x60;vrsn_&#x60;..</param>

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;vrsn_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;vrsn_&#x60;.</value>
        [DataMember(Name = "published_version", EmitDefaultValue = false)]
        private string publishedVersion;
        public string getPublishedVersion() {
            return publishedVersion;
        }
        public void setPublishedVersion(string value) {
            publishedVersion = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateUpdate {\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  publishedVersion: ").Append(publishedVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplateUpdate);
        }

        /// <summary>
        /// Returns true if TemplateUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplateUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplateUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.publishedVersion == input.getPublishedVersion() ||
                    (this.publishedVersion != null &&
                    this.publishedVersion.Equals(input.getPublishedVersion()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                if (this.publishedVersion != null)
                {
                    hashCode = (hashCode * 59) + this.publishedVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            // publishedVersion (string) pattern
            Regex regexpublishedVersion = new Regex(@"^vrsn_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexpublishedVersion.Match(this.publishedVersion).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for publishedVersion, must match a pattern of " + regexpublishedVersion, new [] { "publishedVersion" });
            }

            yield break;
        }
    }

}
