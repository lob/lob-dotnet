/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Letter
    /// </summary>
    [DataContract(Name = "letter")]
    public partial class Letter : IEquatable<Letter>, IValidatableObject
    {
        /// <summary>
        /// Defines Carrier
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierEnum
        {
            /// <summary>
            /// Enum USPS for value: USPS
            /// </summary>
            [EnumMember(Value = "USPS")]
            USPS = 1
            

        }


        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        private CarrierEnum? carrier;
        public CarrierEnum? getCarrier() {
            return carrier;
        }
        public void setCarrier(CarrierEnum value) {
            carrier = value;
        }
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Letter for value: letter
            /// </summary>
            [EnumMember(Value = "letter")]
            Letter = 1
            

        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        private ObjectEnum _object;
        public ObjectEnum getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Specifies the location of the address information that will show through the double-window envelope. 
        /// </summary>
        /// <value>Specifies the location of the address information that will show through the double-window envelope. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressPlacementEnum
        {
            /// <summary>
            /// Enum TopFirstPage for value: top_first_page
            /// </summary>
            [EnumMember(Value = "top_first_page")]
            TopFirstPage = 1,
            

            /// <summary>
            /// Enum InsertBlankPage for value: insert_blank_page
            /// </summary>
            [EnumMember(Value = "insert_blank_page")]
            InsertBlankPage = 2,
            

            /// <summary>
            /// Enum BottomFirstPageCenter for value: bottom_first_page_center
            /// </summary>
            [EnumMember(Value = "bottom_first_page_center")]
            BottomFirstPageCenter = 3,
            

            /// <summary>
            /// Enum BottomFirstPage for value: bottom_first_page
            /// </summary>
            [EnumMember(Value = "bottom_first_page")]
            BottomFirstPage = 4
            

        }


        /// <summary>
        /// Specifies the location of the address information that will show through the double-window envelope. 
        /// </summary>
        /// <value>Specifies the location of the address information that will show through the double-window envelope. </value>
        [DataMember(Name = "address_placement", EmitDefaultValue = false)]
        private AddressPlacementEnum? addressPlacement;
        public AddressPlacementEnum? getAddressPlacement() {
            return addressPlacement;
        }
        public void setAddressPlacement(AddressPlacementEnum value) {
            addressPlacement = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Letter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Letter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Letter" /> class.
        /// </summary>
        /// <param name="to">to (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="carrier">carrier (default to CarrierEnum.USPS).</param>
        /// <param name="thumbnails">thumbnails.</param>
        /// <param name="expectedDeliveryDate">A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;..</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created. (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified. (required).</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="id">Unique identifier prefixed with &#x60;ltr_&#x60;. (required).</param>
        /// <param name="templateId">Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates)..</param>
        /// <param name="templateVersionId">Unique identifier prefixed with &#x60;vrsn_&#x60;..</param>
        /// <param name="_object">_object (required) (default to ObjectEnum.Letter).</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="mergeVariables">You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string..</param>
        /// <param name="sendDate">A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC..</param>
        /// <param name="extraService">Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred..</param>
        /// <param name="trackingNumber">The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode..</param>
        /// <param name="trackingEvents">Tracking events are not populated for registered or regular (no extra service) letters..</param>
        /// <param name="returnAddress">Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request..</param>
        /// <param name="mailType">mailType.</param>
        /// <param name="color">Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white..</param>
        /// <param name="doubleSided">Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="addressPlacement">Specifies the location of the address information that will show through the double-window envelope.  (default to AddressPlacementEnum.TopFirstPage).</param>
        /// <param name="returnEnvelope">returnEnvelope (required).</param>
        /// <param name="perforatedPage">Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf)..</param>
        /// <param name="customEnvelope">customEnvelope.</param>

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        private Address to;
        public Address getTo() {
            return to;
        }
        public void setTo(Address value) {
            to = value;
        }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        private Address from;
        public Address getFrom() {
            return from;
        }
        public void setFrom(Address value) {
            from = value;
        }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", EmitDefaultValue = false)]
        private List<Thumbnail> thumbnails;
        public List<Thumbnail> getThumbnails() {
            return thumbnails;
        }
        public void setThumbnails(List<Thumbnail> value) {
            thumbnails = value;
        }

        /// <summary>
        /// A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.
        /// </summary>
        /// <value>A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.</value>
        [DataMember(Name = "expected_delivery_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        private DateTime expectedDeliveryDate;
        public DateTime getExpectedDeliveryDate() {
            return expectedDeliveryDate;
        }
        public void setExpectedDeliveryDate(DateTime value) {
            expectedDeliveryDate = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateCreated;
        public DateTime getDateCreated() {
            return dateCreated;
        }
        public void setDateCreated(DateTime value) {
            dateCreated = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateModified;
        public DateTime getDateModified() {
            return dateModified;
        }
        public void setDateModified(DateTime value) {
            dateModified = value;
        }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        private bool deleted;
        public bool getDeleted() {
            return deleted;
        }
        public void setDeleted(bool value) {
            deleted = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;ltr_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;ltr_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates).
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates).</value>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        private string templateId;
        public string getTemplateId() {
            return templateId;
        }
        public void setTemplateId(string value) {
            templateId = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;vrsn_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;vrsn_&#x60;.</value>
        [DataMember(Name = "template_version_id", EmitDefaultValue = false)]
        private string templateVersionId;
        public string getTemplateVersionId() {
            return templateVersionId;
        }
        public void setTemplateVersionId(string value) {
            templateVersionId = value;
        }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        private Dictionary<string, string> metadata;
        public Dictionary<string, string> getMetadata() {
            return metadata;
        }
        public void setMetadata(Dictionary<string, string> value) {
            metadata = value;
        }

        /// <summary>
        /// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
        /// </summary>
        /// <value>You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.</value>
        [DataMember(Name = "merge_variables", EmitDefaultValue = true)]
        private Object mergeVariables;
        public Object getMergeVariables() {
            return mergeVariables;
        }
        public void setMergeVariables(Object value) {
            mergeVariables = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.</value>
        [DataMember(Name = "send_date", EmitDefaultValue = false)]
        private DateTime sendDate;
        public DateTime getSendDate() {
            return sendDate;
        }
        public void setSendDate(DateTime value) {
            sendDate = value;
        }

        /// <summary>
        /// Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
        /// </summary>
        /// <value>Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.</value>
        [DataMember(Name = "extra_service", EmitDefaultValue = false)]
        private string extraService;
        public string getExtraService() {
            return extraService;
        }
        public void setExtraService(string value) {
            extraService = value;
        }

        /// <summary>
        /// The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode.
        /// </summary>
        /// <value>The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode.</value>
        [DataMember(Name = "tracking_number", EmitDefaultValue = true)]
        private string trackingNumber;
        public string getTrackingNumber() {
            return trackingNumber;
        }
        public void setTrackingNumber(string value) {
            trackingNumber = value;
        }

        /// <summary>
        /// Tracking events are not populated for registered or regular (no extra service) letters.
        /// </summary>
        /// <value>Tracking events are not populated for registered or regular (no extra service) letters.</value>
        [DataMember(Name = "tracking_events", EmitDefaultValue = false)]
        private List<TrackingEventNormal> trackingEvents;
        public List<TrackingEventNormal> getTrackingEvents() {
            return trackingEvents;
        }
        public void setTrackingEvents(List<TrackingEventNormal> value) {
            trackingEvents = value;
        }

        /// <summary>
        /// Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request.
        /// </summary>
        /// <value>Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request.</value>
        [DataMember(Name = "return_address", EmitDefaultValue = false)]
        private string returnAddress;
        public string getReturnAddress() {
            return returnAddress;
        }
        public void setReturnAddress(string value) {
            returnAddress = value;
        }
        public void setReturnAddress(AddressEditable value) {
            returnAddress = Newtonsoft.Json.JsonConvert.SerializeObject(value);
        }

        /// <summary>
        /// Gets or Sets MailType
        /// </summary>
        [DataMember(Name = "mail_type", EmitDefaultValue = false)]
        private MailType mailType;
        public MailType getMailType() {
            return mailType;
        }
        public void setMailType(MailType value) {
            mailType = value;
        }

        /// <summary>
        /// Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white.
        /// </summary>
        /// <value>Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white.</value>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        private bool color;
        public bool getColor() {
            return color;
        }
        public void setColor(bool value) {
            color = value;
        }

        /// <summary>
        /// Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "double_sided", EmitDefaultValue = true)]
        private bool doubleSided;
        public bool getDoubleSided() {
            return doubleSided;
        }
        public void setDoubleSided(bool value) {
            doubleSided = value;
        }

        /// <summary>
        /// Gets or Sets ReturnEnvelope
        /// </summary>
        [DataMember(Name = "return_envelope", IsRequired = true, EmitDefaultValue = true)]
        private string returnEnvelope;
        public string getReturnEnvelope() {
            return returnEnvelope;
        }
        public void setReturnEnvelope(bool value) {
            returnEnvelope = value.ToString();
        }
        public void setReturnEnvelope(ReturnEnvelope value) {
            returnEnvelope = Newtonsoft.Json.JsonConvert.SerializeObject(value);
        }

        /// <summary>
        /// Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
        /// </summary>
        /// <value>Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).</value>
        [DataMember(Name = "perforated_page", EmitDefaultValue = true)]
        private int? perforatedPage;
        public int? getPerforatedPage() {
            return perforatedPage;
        }
        public void setPerforatedPage(int? value) {
            perforatedPage = value;
        }

        /// <summary>
        /// Gets or Sets CustomEnvelope
        /// </summary>
        [DataMember(Name = "custom_envelope", EmitDefaultValue = true)]
        private LetterCustomEnvelope customEnvelope;
        public LetterCustomEnvelope getCustomEnvelope() {
            return customEnvelope;
        }
        public void setCustomEnvelope(LetterCustomEnvelope value) {
            customEnvelope = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Letter {\n");
            sb.Append("  to: ").Append(to).Append("\n");
            sb.Append("  from: ").Append(from).Append("\n");
            sb.Append("  carrier: ").Append(carrier).Append("\n");
            sb.Append("  thumbnails: ").Append(thumbnails).Append("\n");
            sb.Append("  expectedDeliveryDate: ").Append(expectedDeliveryDate).Append("\n");
            sb.Append("  dateCreated: ").Append(dateCreated).Append("\n");
            sb.Append("  dateModified: ").Append(dateModified).Append("\n");
            sb.Append("  deleted: ").Append(deleted).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  templateId: ").Append(templateId).Append("\n");
            sb.Append("  templateVersionId: ").Append(templateVersionId).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  metadata: ").Append(metadata).Append("\n");
            sb.Append("  mergeVariables: ").Append(mergeVariables).Append("\n");
            sb.Append("  sendDate: ").Append(sendDate).Append("\n");
            sb.Append("  extraService: ").Append(extraService).Append("\n");
            sb.Append("  trackingNumber: ").Append(trackingNumber).Append("\n");
            sb.Append("  trackingEvents: ").Append(trackingEvents).Append("\n");
            sb.Append("  returnAddress: ").Append(returnAddress).Append("\n");
            sb.Append("  mailType: ").Append(mailType).Append("\n");
            sb.Append("  color: ").Append(color).Append("\n");
            sb.Append("  doubleSided: ").Append(doubleSided).Append("\n");
            sb.Append("  addressPlacement: ").Append(addressPlacement).Append("\n");
            sb.Append("  returnEnvelope: ").Append(returnEnvelope).Append("\n");
            sb.Append("  perforatedPage: ").Append(perforatedPage).Append("\n");
            sb.Append("  customEnvelope: ").Append(customEnvelope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Letter);
        }

        /// <summary>
        /// Returns true if Letter instances are equal
        /// </summary>
        /// <param name="input">Instance of Letter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Letter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.to == input.getTo() ||
                    (this.to != null &&
                    this.to.Equals(input.getTo()))
                ) && 
                (
                    this.from == input.getFrom() ||
                    (this.from != null &&
                    this.from.Equals(input.getFrom()))
                ) && 
                (
                    this.carrier == input.getCarrier() ||
                    this.carrier.Equals(input.getCarrier())
                ) && 
                (
                    this.thumbnails == input.getThumbnails() ||
                    this.thumbnails != null &&
                    input.getThumbnails() != null &&
                    this.thumbnails.SequenceEqual(input.getThumbnails())
                ) && 
                (
                    this.expectedDeliveryDate == input.getExpectedDeliveryDate() ||
                    (this.expectedDeliveryDate != null &&
                    this.expectedDeliveryDate.Equals(input.getExpectedDeliveryDate()))
                ) && 
                (
                    this.dateCreated == input.getDateCreated() ||
                    (this.dateCreated != null &&
                    this.dateCreated.Equals(input.getDateCreated()))
                ) && 
                (
                    this.dateModified == input.getDateModified() ||
                    (this.dateModified != null &&
                    this.dateModified.Equals(input.getDateModified()))
                ) && 
                (
                    this.deleted == input.getDeleted() ||
                    this.deleted.Equals(input.getDeleted())
                ) && 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.templateId == input.getTemplateId() ||
                    (this.templateId != null &&
                    this.templateId.Equals(input.getTemplateId()))
                ) && 
                (
                    this.templateVersionId == input.getTemplateVersionId() ||
                    (this.templateVersionId != null &&
                    this.templateVersionId.Equals(input.getTemplateVersionId()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                ) && 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.metadata == input.getMetadata() ||
                    this.metadata != null &&
                    input.getMetadata() != null &&
                    this.metadata.SequenceEqual(input.getMetadata())
                ) && 
                (
                    this.mergeVariables == input.getMergeVariables() ||
                    (this.mergeVariables != null &&
                    this.mergeVariables.Equals(input.getMergeVariables()))
                ) && 
                (
                    this.sendDate == input.getSendDate() ||
                    (this.sendDate != null &&
                    this.sendDate.Equals(input.getSendDate()))
                ) && 
                (
                    this.extraService == input.getExtraService() ||
                    (this.extraService != null &&
                    this.extraService.Equals(input.getExtraService()))
                ) && 
                (
                    this.trackingNumber == input.getTrackingNumber() ||
                    (this.trackingNumber != null &&
                    this.trackingNumber.Equals(input.getTrackingNumber()))
                ) && 
                (
                    this.trackingEvents == input.getTrackingEvents() ||
                    this.trackingEvents != null &&
                    input.getTrackingEvents() != null &&
                    this.trackingEvents.SequenceEqual(input.getTrackingEvents())
                ) && 
                (
                    this.returnAddress == input.getReturnAddress() ||
                    (this.returnAddress != null &&
                    this.returnAddress.Equals(input.getReturnAddress()))
                ) && 
                (
                    this.mailType == input.getMailType() ||
                    (this.mailType != null &&
                    this.mailType.Equals(input.getMailType()))
                ) && 
                (
                    this.color == input.getColor() ||
                    this.color.Equals(input.getColor())
                ) && 
                (
                    this.doubleSided == input.getDoubleSided() ||
                    this.doubleSided.Equals(input.getDoubleSided())
                ) && 
                (
                    this.addressPlacement == input.getAddressPlacement() ||
                    this.addressPlacement.Equals(input.getAddressPlacement())
                ) && 
                (
                    this.returnEnvelope == input.getReturnEnvelope() ||
                    (this.returnEnvelope != null &&
                    this.returnEnvelope.Equals(input.getReturnEnvelope()))
                ) && 
                (
                    this.perforatedPage == input.getPerforatedPage() ||
                    (this.perforatedPage != null &&
                    this.perforatedPage.Equals(input.getPerforatedPage()))
                ) && 
                (
                    this.customEnvelope == input.getCustomEnvelope() ||
                    (this.customEnvelope != null &&
                    this.customEnvelope.Equals(input.getCustomEnvelope()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.to != null)
                {
                    hashCode = (hashCode * 59) + this.to.GetHashCode();
                }
                if (this.from != null)
                {
                    hashCode = (hashCode * 59) + this.from.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.carrier.GetHashCode();
                if (this.thumbnails != null)
                {
                    hashCode = (hashCode * 59) + this.thumbnails.GetHashCode();
                }
                if (this.expectedDeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.expectedDeliveryDate.GetHashCode();
                }
                if (this.dateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.dateCreated.GetHashCode();
                }
                if (this.dateModified != null)
                {
                    hashCode = (hashCode * 59) + this.dateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.deleted.GetHashCode();
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.templateId != null)
                {
                    hashCode = (hashCode * 59) + this.templateId.GetHashCode();
                }
                if (this.templateVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.templateVersionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                if (this.metadata != null)
                {
                    hashCode = (hashCode * 59) + this.metadata.GetHashCode();
                }
                if (this.mergeVariables != null)
                {
                    hashCode = (hashCode * 59) + this.mergeVariables.GetHashCode();
                }
                if (this.sendDate != null)
                {
                    hashCode = (hashCode * 59) + this.sendDate.GetHashCode();
                }
                if (this.extraService != null)
                {
                    hashCode = (hashCode * 59) + this.extraService.GetHashCode();
                }
                if (this.trackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.trackingNumber.GetHashCode();
                }
                if (this.trackingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.trackingEvents.GetHashCode();
                }
                if (this.returnAddress != null)
                {
                    hashCode = (hashCode * 59) + this.returnAddress.GetHashCode();
                }
                if (this.mailType != null)
                {
                    hashCode = (hashCode * 59) + this.mailType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.color.GetHashCode();
                hashCode = (hashCode * 59) + this.doubleSided.GetHashCode();
                hashCode = (hashCode * 59) + this.addressPlacement.GetHashCode();
                if (this.returnEnvelope != null)
                {
                    hashCode = (hashCode * 59) + this.returnEnvelope.GetHashCode();
                }
                if (this.perforatedPage != null)
                {
                    hashCode = (hashCode * 59) + this.perforatedPage.GetHashCode();
                }
                if (this.customEnvelope != null)
                {
                    hashCode = (hashCode * 59) + this.customEnvelope.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^ltr_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // templateId (string) pattern
            Regex regextemplateId = new Regex(@"^tmpl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regextemplateId.Match(this.templateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for templateId, must match a pattern of " + regextemplateId, new [] { "templateId" });
            }

            // templateVersionId (string) pattern
            Regex regextemplateVersionId = new Regex(@"^vrsn_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regextemplateVersionId.Match(this.templateVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for templateVersionId, must match a pattern of " + regextemplateVersionId, new [] { "templateVersionId" });
            }

            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            yield break;
        }
    }

}
