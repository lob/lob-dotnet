/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Letter
    /// </summary>
    [DataContract(Name = "letter")]
    public partial class Letter : IEquatable<Letter>, IValidatableObject
    {
        /// <summary>
        /// Defines Carrier
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierEnum
        {
            /// <summary>
            /// Enum USPS for value: USPS
            /// </summary>
            [EnumMember(Value = "USPS")]
            USPS = 1
            

        }


        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name = "carrier", EmitDefaultValue = false)]
        public CarrierEnum? Carrier { get; set; }
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Letter for value: letter
            /// </summary>
            [EnumMember(Value = "letter")]
            Letter = 1
            

        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// Specifies the location of the address information that will show through the double-window envelope. 
        /// </summary>
        /// <value>Specifies the location of the address information that will show through the double-window envelope. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressPlacementEnum
        {
            /// <summary>
            /// Enum TopFirstPage for value: top_first_page
            /// </summary>
            [EnumMember(Value = "top_first_page")]
            TopFirstPage = 1,
            

            /// <summary>
            /// Enum InsertBlankPage for value: insert_blank_page
            /// </summary>
            [EnumMember(Value = "insert_blank_page")]
            InsertBlankPage = 2,
            

            /// <summary>
            /// Enum BottomFirstPageCenter for value: bottom_first_page_center
            /// </summary>
            [EnumMember(Value = "bottom_first_page_center")]
            BottomFirstPageCenter = 3,
            

            /// <summary>
            /// Enum BottomFirstPage for value: bottom_first_page
            /// </summary>
            [EnumMember(Value = "bottom_first_page")]
            BottomFirstPage = 4
            

        }


        /// <summary>
        /// Specifies the location of the address information that will show through the double-window envelope. 
        /// </summary>
        /// <value>Specifies the location of the address information that will show through the double-window envelope. </value>
        [DataMember(Name = "address_placement", EmitDefaultValue = false)]
        public AddressPlacementEnum? AddressPlacement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Letter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Letter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Letter" /> class.
        /// </summary>
        /// <param name="to">to (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="carrier">carrier (default to CarrierEnum.USPS).</param>
        /// <param name="thumbnails">thumbnails.</param>
        /// <param name="expectedDeliveryDate">A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;..</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created. (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified. (required).</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="id">Unique identifier prefixed with &#x60;ltr_&#x60;. (required).</param>
        /// <param name="templateId">Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates)..</param>
        /// <param name="templateVersionId">Unique identifier prefixed with &#x60;vrsn_&#x60;..</param>
        /// <param name="url">A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated..</param>
        /// <param name="_object">_object (required) (default to ObjectEnum.Letter).</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="mergeVariables">You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string..</param>
        /// <param name="sendDate">A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC..</param>
        /// <param name="extraService">Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred..</param>
        /// <param name="trackingNumber">The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode..</param>
        /// <param name="trackingEvents">Tracking events are not populated for registered or regular (no extra service) letters..</param>
        /// <param name="returnAddress">Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request..</param>
        /// <param name="mailType">mailType.</param>
        /// <param name="color">Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white..</param>
        /// <param name="doubleSided">Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;. (default to true).</param>
        /// <param name="addressPlacement">Specifies the location of the address information that will show through the double-window envelope.  (default to AddressPlacementEnum.TopFirstPage).</param>
        /// <param name="returnEnvelope">returnEnvelope (required).</param>
        /// <param name="perforatedPage">Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf)..</param>
        /// <param name="customEnvelope">customEnvelope.</param>
        /// <param name="campaignId">The unique ID of the associated campaign if the resource was generated from a campaign..</param>
        /// <param name="useType">useType (required).</param>
        public Letter(Address to = default(Address), Address from = default(Address), CarrierEnum? carrier = CarrierEnum.USPS, List<Thumbnail> thumbnails = default(List<Thumbnail>), DateTime expectedDeliveryDate = default(DateTime), DateTime dateCreated = default(DateTime), DateTime dateModified = default(DateTime), bool deleted = default(bool), string id = default(string), string templateId = default(string), string templateVersionId = default(string), string url = default(string), ObjectEnum _object = ObjectEnum.Letter, string description = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), Object mergeVariables = default(Object), DateTime sendDate = default(DateTime), string extraService = default(string), string trackingNumber = default(string), List<TrackingEventNormal> trackingEvents = default(List<TrackingEventNormal>), Object returnAddress = default(Object), MailType mailType = default(MailType), bool color = default(bool), bool doubleSided = true, AddressPlacementEnum? addressPlacement = AddressPlacementEnum.TopFirstPage, Object returnEnvelope = default(Object), int? perforatedPage = default(int?), LetterCustomEnvelope customEnvelope = default(LetterCustomEnvelope), string campaignId = default(string), LtrUseType useType = default(LtrUseType))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for Letter and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for Letter and cannot be null");
            }
            this.From = from;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Letter and cannot be null");
            }
            this.Id = id;
            this.Object = _object;
            // to ensure "returnEnvelope" is required (not null)
            if (returnEnvelope == null)
            {
                throw new ArgumentNullException("returnEnvelope is a required property for Letter and cannot be null");
            }
            this.ReturnEnvelope = returnEnvelope;
            // to ensure "useType" is required (not null)
            if (useType == null)
            {
                throw new ArgumentNullException("useType is a required property for Letter and cannot be null");
            }
            this.UseType = useType;
            this.Carrier = carrier;
            this.Thumbnails = thumbnails;
            this.ExpectedDeliveryDate = expectedDeliveryDate;
            this.Deleted = deleted;
            this.TemplateId = templateId;
            this.TemplateVersionId = templateVersionId;
            this.Url = url;
            this.Description = description;
            this.Metadata = metadata;
            this.MergeVariables = mergeVariables;
            this.SendDate = sendDate;
            this.ExtraService = extraService;
            this.TrackingNumber = trackingNumber;
            this.TrackingEvents = trackingEvents;
            this.ReturnAddress = returnAddress;
            this.MailType = mailType;
            this.Color = color;
            this.DoubleSided = doubleSided;
            this.AddressPlacement = addressPlacement;
            this.PerforatedPage = perforatedPage;
            this.CustomEnvelope = customEnvelope;
            this.CampaignId = campaignId;
        }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public Address To { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public Address From { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", EmitDefaultValue = false)]
        public List<Thumbnail> Thumbnails { get; set; }

        /// <summary>
        /// A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.
        /// </summary>
        /// <value>A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.</value>
        [DataMember(Name = "expected_delivery_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;ltr_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;ltr_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates).
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;tmpl_&#x60;. ID of a saved [HTML template](#section/HTML-Templates).</value>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;vrsn_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;vrsn_&#x60;.</value>
        [DataMember(Name = "template_version_id", EmitDefaultValue = false)]
        public string TemplateVersionId { get; set; }

        /// <summary>
        /// A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
        /// </summary>
        /// <value>A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
        /// </summary>
        /// <value>You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.</value>
        [DataMember(Name = "merge_variables", EmitDefaultValue = false)]
        public Object MergeVariables { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.</value>
        [DataMember(Name = "send_date", EmitDefaultValue = false)]
        public DateTime SendDate { get; set; }

        /// <summary>
        /// Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.
        /// </summary>
        /// <value>Add an extra service to your letter. See [pricing](https://www.lob.com/pricing/print-mail#compare) for extra costs incurred.</value>
        [DataMember(Name = "extra_service", EmitDefaultValue = false)]
        public string ExtraService { get; set; }

        /// <summary>
        /// The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode.
        /// </summary>
        /// <value>The tracking number, if applicable, will appear here when it becomes available. Dummy tracking numbers are not created in test mode.</value>
        [DataMember(Name = "tracking_number", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Tracking events are not populated for registered or regular (no extra service) letters.
        /// </summary>
        /// <value>Tracking events are not populated for registered or regular (no extra service) letters.</value>
        [DataMember(Name = "tracking_events", EmitDefaultValue = false)]
        public List<TrackingEventNormal> TrackingEvents { get; set; }

        /// <summary>
        /// Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request.
        /// </summary>
        /// <value>Specifies the address the return envelope will be sent back to. This is an optional argument that is available if an account is signed up for the return envelope tracking beta, and has &#x60;return_envelope&#x60;, and &#x60;perforated_page&#x60; fields populated in the API request.</value>
        [DataMember(Name = "return_address", EmitDefaultValue = false)]
        public Object ReturnAddress { get; set; }

        /// <summary>
        /// Gets or Sets MailType
        /// </summary>
        [DataMember(Name = "mail_type", EmitDefaultValue = false)]
        public MailType MailType { get; set; }

        /// <summary>
        /// Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white.
        /// </summary>
        /// <value>Set this key to &#x60;true&#x60; if you would like to print in color. Set to &#x60;false&#x60; if you would like to print in black and white.</value>
        [DataMember(Name = "color", EmitDefaultValue = true)]
        public bool Color { get; set; }

        /// <summary>
        /// Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;.
        /// </summary>
        /// <value>Set this attribute to &#x60;true&#x60; for double sided printing, or &#x60;false&#x60; for for single sided printing. Defaults to &#x60;true&#x60;.</value>
        [DataMember(Name = "double_sided", EmitDefaultValue = true)]
        public bool DoubleSided { get; set; }

        /// <summary>
        /// Gets or Sets ReturnEnvelope
        /// </summary>
        [DataMember(Name = "return_envelope", IsRequired = true, EmitDefaultValue = false)]
        public Object ReturnEnvelope { get; set; }

        /// <summary>
        /// Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).
        /// </summary>
        /// <value>Required if &#x60;return_envelope&#x60; is &#x60;true&#x60;. The number of the page that should be perforated for use with the return envelope. Must be greater than or equal to &#x60;1&#x60;. The blank page added by &#x60;address_placement&#x3D;insert_blank_page&#x60; will be ignored when considering the perforated page number. To see how perforation will impact your letter design, view our [perforation guide](https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf).</value>
        [DataMember(Name = "perforated_page", EmitDefaultValue = false)]
        public int? PerforatedPage { get; set; }

        /// <summary>
        /// Gets or Sets CustomEnvelope
        /// </summary>
        [DataMember(Name = "custom_envelope", EmitDefaultValue = false)]
        public LetterCustomEnvelope CustomEnvelope { get; set; }

        /// <summary>
        /// The unique ID of the associated campaign if the resource was generated from a campaign.
        /// </summary>
        /// <value>The unique ID of the associated campaign if the resource was generated from a campaign.</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Gets or Sets UseType
        /// </summary>
        [DataMember(Name = "use_type", IsRequired = true, EmitDefaultValue = false)]
        public LtrUseType UseType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Letter {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  ExpectedDeliveryDate: ").Append(ExpectedDeliveryDate).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateVersionId: ").Append(TemplateVersionId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MergeVariables: ").Append(MergeVariables).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  ExtraService: ").Append(ExtraService).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  TrackingEvents: ").Append(TrackingEvents).Append("\n");
            sb.Append("  ReturnAddress: ").Append(ReturnAddress).Append("\n");
            sb.Append("  MailType: ").Append(MailType).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  DoubleSided: ").Append(DoubleSided).Append("\n");
            sb.Append("  AddressPlacement: ").Append(AddressPlacement).Append("\n");
            sb.Append("  ReturnEnvelope: ").Append(ReturnEnvelope).Append("\n");
            sb.Append("  PerforatedPage: ").Append(PerforatedPage).Append("\n");
            sb.Append("  CustomEnvelope: ").Append(CustomEnvelope).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  UseType: ").Append(UseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Letter);
        }

        /// <summary>
        /// Returns true if Letter instances are equal
        /// </summary>
        /// <param name="input">Instance of Letter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Letter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    this.Carrier.Equals(input.Carrier)
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    input.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                ) && 
                (
                    this.ExpectedDeliveryDate == input.ExpectedDeliveryDate ||
                    (this.ExpectedDeliveryDate != null &&
                    this.ExpectedDeliveryDate.Equals(input.ExpectedDeliveryDate))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateVersionId == input.TemplateVersionId ||
                    (this.TemplateVersionId != null &&
                    this.TemplateVersionId.Equals(input.TemplateVersionId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Object == input.Object ||
                    this.Object.Equals(input.Object)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.MergeVariables == input.MergeVariables ||
                    (this.MergeVariables != null &&
                    this.MergeVariables.Equals(input.MergeVariables))
                ) && 
                (
                    this.SendDate == input.SendDate ||
                    (this.SendDate != null &&
                    this.SendDate.Equals(input.SendDate))
                ) && 
                (
                    this.ExtraService == input.ExtraService ||
                    (this.ExtraService != null &&
                    this.ExtraService.Equals(input.ExtraService))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.TrackingEvents == input.TrackingEvents ||
                    this.TrackingEvents != null &&
                    input.TrackingEvents != null &&
                    this.TrackingEvents.SequenceEqual(input.TrackingEvents)
                ) && 
                (
                    this.ReturnAddress == input.ReturnAddress ||
                    (this.ReturnAddress != null &&
                    this.ReturnAddress.Equals(input.ReturnAddress))
                ) && 
                (
                    this.MailType == input.MailType ||
                    (this.MailType != null &&
                    this.MailType.Equals(input.MailType))
                ) && 
                (
                    this.Color == input.Color ||
                    this.Color.Equals(input.Color)
                ) && 
                (
                    this.DoubleSided == input.DoubleSided ||
                    this.DoubleSided.Equals(input.DoubleSided)
                ) && 
                (
                    this.AddressPlacement == input.AddressPlacement ||
                    this.AddressPlacement.Equals(input.AddressPlacement)
                ) && 
                (
                    this.ReturnEnvelope == input.ReturnEnvelope ||
                    (this.ReturnEnvelope != null &&
                    this.ReturnEnvelope.Equals(input.ReturnEnvelope))
                ) && 
                (
                    this.PerforatedPage == input.PerforatedPage ||
                    (this.PerforatedPage != null &&
                    this.PerforatedPage.Equals(input.PerforatedPage))
                ) && 
                (
                    this.CustomEnvelope == input.CustomEnvelope ||
                    (this.CustomEnvelope != null &&
                    this.CustomEnvelope.Equals(input.CustomEnvelope))
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.UseType == input.UseType ||
                    (this.UseType != null &&
                    this.UseType.Equals(input.UseType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Carrier.GetHashCode();
                if (this.Thumbnails != null)
                {
                    hashCode = (hashCode * 59) + this.Thumbnails.GetHashCode();
                }
                if (this.ExpectedDeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedDeliveryDate.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateModified != null)
                {
                    hashCode = (hashCode * 59) + this.DateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.TemplateVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateVersionId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Object.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.MergeVariables != null)
                {
                    hashCode = (hashCode * 59) + this.MergeVariables.GetHashCode();
                }
                if (this.SendDate != null)
                {
                    hashCode = (hashCode * 59) + this.SendDate.GetHashCode();
                }
                if (this.ExtraService != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraService.GetHashCode();
                }
                if (this.TrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                }
                if (this.TrackingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingEvents.GetHashCode();
                }
                if (this.ReturnAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnAddress.GetHashCode();
                }
                if (this.MailType != null)
                {
                    hashCode = (hashCode * 59) + this.MailType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Color.GetHashCode();
                hashCode = (hashCode * 59) + this.DoubleSided.GetHashCode();
                hashCode = (hashCode * 59) + this.AddressPlacement.GetHashCode();
                if (this.ReturnEnvelope != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnEnvelope.GetHashCode();
                }
                if (this.PerforatedPage != null)
                {
                    hashCode = (hashCode * 59) + this.PerforatedPage.GetHashCode();
                }
                if (this.CustomEnvelope != null)
                {
                    hashCode = (hashCode * 59) + this.CustomEnvelope.GetHashCode();
                }
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.UseType != null)
                {
                    hashCode = (hashCode * 59) + this.UseType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^ltr_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // TemplateId (string) pattern
            Regex regexTemplateId = new Regex(@"^tmpl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTemplateId.Match(this.TemplateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateId, must match a pattern of " + regexTemplateId, new [] { "TemplateId" });
            }

            // TemplateVersionId (string) pattern
            Regex regexTemplateVersionId = new Regex(@"^vrsn_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTemplateVersionId.Match(this.TemplateVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateVersionId, must match a pattern of " + regexTemplateVersionId, new [] { "TemplateVersionId" });
            }

            // Url (string) pattern
            Regex regexUrl = new Regex(@"^https:\/\/(lob-assets|lob-assets-staging)\\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\\.pdf|_thumb_[a-z]+_[0-9]+\\.png)\\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$", RegexOptions.CultureInvariant);
            if (false == regexUrl.Match(this.Url).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, must match a pattern of " + regexUrl, new [] { "Url" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

}
