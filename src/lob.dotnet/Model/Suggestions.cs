/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Suggestions
    /// </summary>
    [DataContract(Name = "suggestions")]
    public partial class Suggestions : IEquatable<Suggestions>, IValidatableObject
    {
        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum UsAutocompletion for value: us_autocompletion
            /// </summary>
            [EnumMember(Value = "us_autocompletion")]
            UsAutocompletion = 1
            

        }


        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        private ObjectEnum? _object;
        public ObjectEnum? getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Suggestions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Suggestions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Suggestions" /> class.
        /// </summary>
        /// <param name="primaryLine">The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60; (primary number &amp; secondary information may be missing or inaccurate): * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60;  (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="state">The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state.  (required).</param>
        /// <param name="zipCode">A 5-digit zip code. Left empty if a test key is used. (required).</param>
        /// <param name="_object">Value is resource type. (default to ObjectEnum.UsAutocompletion).</param>

        /// <summary>
        /// The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60; (primary number &amp; secondary information may be missing or inaccurate): * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; 
        /// </summary>
        /// <value>The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60; (primary number &amp; secondary information may be missing or inaccurate): * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; </value>
        [DataMember(Name = "primary_line", IsRequired = true, EmitDefaultValue = false)]
        private string primaryLine;
        public string getPrimaryLine() {
            return primaryLine;
        }
        public void setPrimaryLine(string value) {
            primaryLine = value;
        }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        private string city;
        public string getCity() {
            return city;
        }
        public void setCity(string value) {
            city = value;
        }

        /// <summary>
        /// The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. 
        /// </summary>
        /// <value>The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. </value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        private string state;
        public string getState() {
            return state;
        }
        public void setState(string value) {
            state = value;
        }

        /// <summary>
        /// A 5-digit zip code. Left empty if a test key is used.
        /// </summary>
        /// <value>A 5-digit zip code. Left empty if a test key is used.</value>
        [DataMember(Name = "zip_code", IsRequired = true, EmitDefaultValue = false)]
        private string zipCode;
        public string getZipCode() {
            return zipCode;
        }
        public void setZipCode(string value) {
            zipCode = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Suggestions {\n");
            sb.Append("  primaryLine: ").Append(primaryLine).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  zipCode: ").Append(zipCode).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Suggestions);
        }

        /// <summary>
        /// Returns true if Suggestions instances are equal
        /// </summary>
        /// <param name="input">Instance of Suggestions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Suggestions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.primaryLine == input.getPrimaryLine() ||
                    (this.primaryLine != null &&
                    this.primaryLine.Equals(input.getPrimaryLine()))
                ) && 
                (
                    this.city == input.getCity() ||
                    (this.city != null &&
                    this.city.Equals(input.getCity()))
                ) && 
                (
                    this.state == input.getState() ||
                    (this.state != null &&
                    this.state.Equals(input.getState()))
                ) && 
                (
                    this.zipCode == input.getZipCode() ||
                    (this.zipCode != null &&
                    this.zipCode.Equals(input.getZipCode()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.primaryLine != null)
                {
                    hashCode = (hashCode * 59) + this.primaryLine.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.zipCode != null)
                {
                    hashCode = (hashCode * 59) + this.zipCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // city (string) maxLength
            if (this.city != null && this.city.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for city, length must be less than 200.", new [] { "city" });
            }

            yield break;
        }
    }

}
