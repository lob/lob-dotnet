/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// SelfMailer
    /// </summary>
    [DataContract(Name = "self_mailer")]
    public partial class SelfMailer : IEquatable<SelfMailer>, IValidatableObject
    {
        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum SelfMailer for value: self_mailer
            /// </summary>
            [EnumMember(Value = "self_mailer")]
            SelfMailer = 1
            

        }


        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        private ObjectEnum? _object;
        public ObjectEnum? getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfMailer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SelfMailer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SelfMailer" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;sfm_&#x60;. (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="from">from.</param>
        /// <param name="size">size.</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="mailType">mailType.</param>
        /// <param name="mergeVariables">You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string..</param>
        /// <param name="sendDate">A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC..</param>
        /// <param name="outsideTemplateId">The unique ID of the HTML template used for the outside of the self mailer..</param>
        /// <param name="insideTemplateId">The unique ID of the HTML template used for the inside of the self mailer..</param>
        /// <param name="outsideTemplateVersionId">The unique ID of the specific version of the HTML template used for the outside of the self mailer..</param>
        /// <param name="insideTemplateVersionId">The unique ID of the specific version of the HTML template used for the inside of the self mailer..</param>
        /// <param name="_object">Value is resource type. (default to ObjectEnum.SelfMailer).</param>
        /// <param name="trackingEvents">An array of certified tracking events ordered by ascending &#x60;time&#x60;. Not populated in test mode..</param>
        /// <param name="url">A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated. (required).</param>

        /// <summary>
        /// Unique identifier prefixed with &#x60;sfm_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;sfm_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        private string to;
        public string getTo() {
            return to;
        }
        public void setTo(string value) {
            to = value;
        }
        public void setTo(Address value) {
            to = Newtonsoft.Json.JsonConvert.SerializeObject(value);
        }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        private string from;
        public string getFrom() {
            return from;
        }
        public void setFrom(string value) {
            from = value;
        }
        public void setFrom(AddressDomesticExpanded value) {
            from = Newtonsoft.Json.JsonConvert.SerializeObject(value);
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        private SelfMailerSize size;
        public SelfMailerSize getSize() {
            return size;
        }
        public void setSize(SelfMailerSize value) {
            size = value;
        }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        private Dictionary<string, string> metadata;
        public Dictionary<string, string> getMetadata() {
            return metadata;
        }
        public void setMetadata(Dictionary<string, string> value) {
            metadata = value;
        }

        /// <summary>
        /// Gets or Sets MailType
        /// </summary>
        [DataMember(Name = "mail_type", EmitDefaultValue = false)]
        private MailType mailType;
        public MailType getMailType() {
            return mailType;
        }
        public void setMailType(MailType value) {
            mailType = value;
        }

        /// <summary>
        /// You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
        /// </summary>
        /// <value>You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in [our guide to using html and merge variables](https://lob.com/resources/guides/general/using-html-and-merge-variables). Depending on your [Merge Variable strictness](https://dashboard.lob.com/#/settings/account) setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.</value>
        [DataMember(Name = "merge_variables", EmitDefaultValue = true)]
        private Object mergeVariables;
        public Object getMergeVariables() {
            return mergeVariables;
        }
        public void setMergeVariables(Object value) {
            mergeVariables = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format which specifies a date after the current time and up to 180 days in the future to send the letter off for production. Setting a send date overrides the default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until the &#x60;send_date&#x60; has passed, the mailpiece can be canceled. If a date in the format &#x60;2017-11-01&#x60; is passed, it will evaluate to midnight UTC of that date (&#x60;2017-11-01T00:00:00.000Z&#x60;). If a datetime is passed, that exact time will be used. A &#x60;send_date&#x60; passed with no time zone will default to UTC, while a &#x60;send_date&#x60; passed with a time zone will be converted to UTC.</value>
        [DataMember(Name = "send_date", EmitDefaultValue = false)]
        private DateTime sendDate;
        public DateTime getSendDate() {
            return sendDate;
        }
        public void setSendDate(DateTime value) {
            sendDate = value;
        }

        /// <summary>
        /// The unique ID of the HTML template used for the outside of the self mailer.
        /// </summary>
        /// <value>The unique ID of the HTML template used for the outside of the self mailer.</value>
        [DataMember(Name = "outside_template_id", EmitDefaultValue = true)]
        private string outsideTemplateId;
        public string getOutsideTemplateId() {
            return outsideTemplateId;
        }
        public void setOutsideTemplateId(string value) {
            outsideTemplateId = value;
        }

        /// <summary>
        /// The unique ID of the HTML template used for the inside of the self mailer.
        /// </summary>
        /// <value>The unique ID of the HTML template used for the inside of the self mailer.</value>
        [DataMember(Name = "inside_template_id", EmitDefaultValue = true)]
        private string insideTemplateId;
        public string getInsideTemplateId() {
            return insideTemplateId;
        }
        public void setInsideTemplateId(string value) {
            insideTemplateId = value;
        }

        /// <summary>
        /// The unique ID of the specific version of the HTML template used for the outside of the self mailer.
        /// </summary>
        /// <value>The unique ID of the specific version of the HTML template used for the outside of the self mailer.</value>
        [DataMember(Name = "outside_template_version_id", EmitDefaultValue = true)]
        private string outsideTemplateVersionId;
        public string getOutsideTemplateVersionId() {
            return outsideTemplateVersionId;
        }
        public void setOutsideTemplateVersionId(string value) {
            outsideTemplateVersionId = value;
        }

        /// <summary>
        /// The unique ID of the specific version of the HTML template used for the inside of the self mailer.
        /// </summary>
        /// <value>The unique ID of the specific version of the HTML template used for the inside of the self mailer.</value>
        [DataMember(Name = "inside_template_version_id", EmitDefaultValue = true)]
        private string insideTemplateVersionId;
        public string getInsideTemplateVersionId() {
            return insideTemplateVersionId;
        }
        public void setInsideTemplateVersionId(string value) {
            insideTemplateVersionId = value;
        }

        /// <summary>
        /// An array of certified tracking events ordered by ascending &#x60;time&#x60;. Not populated in test mode.
        /// </summary>
        /// <value>An array of certified tracking events ordered by ascending &#x60;time&#x60;. Not populated in test mode.</value>
        [DataMember(Name = "tracking_events", EmitDefaultValue = false)]
        private List<TrackingEventCertified> trackingEvents;
        public List<TrackingEventCertified> getTrackingEvents() {
            return trackingEvents;
        }
        public void setTrackingEvents(List<TrackingEventCertified> value) {
            trackingEvents = value;
        }

        /// <summary>
        /// A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
        /// </summary>
        /// <value>A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        private string url;
        public string getUrl() {
            return url;
        }
        public void setUrl(string value) {
            url = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SelfMailer {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  to: ").Append(to).Append("\n");
            sb.Append("  from: ").Append(from).Append("\n");
            sb.Append("  size: ").Append(size).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  metadata: ").Append(metadata).Append("\n");
            sb.Append("  mailType: ").Append(mailType).Append("\n");
            sb.Append("  mergeVariables: ").Append(mergeVariables).Append("\n");
            sb.Append("  sendDate: ").Append(sendDate).Append("\n");
            sb.Append("  outsideTemplateId: ").Append(outsideTemplateId).Append("\n");
            sb.Append("  insideTemplateId: ").Append(insideTemplateId).Append("\n");
            sb.Append("  outsideTemplateVersionId: ").Append(outsideTemplateVersionId).Append("\n");
            sb.Append("  insideTemplateVersionId: ").Append(insideTemplateVersionId).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  trackingEvents: ").Append(trackingEvents).Append("\n");
            sb.Append("  url: ").Append(url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SelfMailer);
        }

        /// <summary>
        /// Returns true if SelfMailer instances are equal
        /// </summary>
        /// <param name="input">Instance of SelfMailer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SelfMailer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.to == input.getTo() ||
                    (this.to != null &&
                    this.to.Equals(input.getTo()))
                ) && 
                (
                    this.from == input.getFrom() ||
                    (this.from != null &&
                    this.from.Equals(input.getFrom()))
                ) && 
                (
                    this.size == input.getSize() ||
                    (this.size != null &&
                    this.size.Equals(input.getSize()))
                ) && 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.metadata == input.getMetadata() ||
                    this.metadata != null &&
                    input.getMetadata() != null &&
                    this.metadata.SequenceEqual(input.getMetadata())
                ) && 
                (
                    this.mailType == input.getMailType() ||
                    (this.mailType != null &&
                    this.mailType.Equals(input.getMailType()))
                ) && 
                (
                    this.mergeVariables == input.getMergeVariables() ||
                    (this.mergeVariables != null &&
                    this.mergeVariables.Equals(input.getMergeVariables()))
                ) && 
                (
                    this.sendDate == input.getSendDate() ||
                    (this.sendDate != null &&
                    this.sendDate.Equals(input.getSendDate()))
                ) && 
                (
                    this.outsideTemplateId == input.getOutsideTemplateId() ||
                    (this.outsideTemplateId != null &&
                    this.outsideTemplateId.Equals(input.getOutsideTemplateId()))
                ) && 
                (
                    this.insideTemplateId == input.getInsideTemplateId() ||
                    (this.insideTemplateId != null &&
                    this.insideTemplateId.Equals(input.getInsideTemplateId()))
                ) && 
                (
                    this.outsideTemplateVersionId == input.getOutsideTemplateVersionId() ||
                    (this.outsideTemplateVersionId != null &&
                    this.outsideTemplateVersionId.Equals(input.getOutsideTemplateVersionId()))
                ) && 
                (
                    this.insideTemplateVersionId == input.getInsideTemplateVersionId() ||
                    (this.insideTemplateVersionId != null &&
                    this.insideTemplateVersionId.Equals(input.getInsideTemplateVersionId()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                ) && 
                (
                    this.trackingEvents == input.getTrackingEvents() ||
                    this.trackingEvents != null &&
                    input.getTrackingEvents() != null &&
                    this.trackingEvents.SequenceEqual(input.getTrackingEvents())
                ) && 
                (
                    this.url == input.getUrl() ||
                    (this.url != null &&
                    this.url.Equals(input.getUrl()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.to != null)
                {
                    hashCode = (hashCode * 59) + this.to.GetHashCode();
                }
                if (this.from != null)
                {
                    hashCode = (hashCode * 59) + this.from.GetHashCode();
                }
                if (this.size != null)
                {
                    hashCode = (hashCode * 59) + this.size.GetHashCode();
                }
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                if (this.metadata != null)
                {
                    hashCode = (hashCode * 59) + this.metadata.GetHashCode();
                }
                if (this.mailType != null)
                {
                    hashCode = (hashCode * 59) + this.mailType.GetHashCode();
                }
                if (this.mergeVariables != null)
                {
                    hashCode = (hashCode * 59) + this.mergeVariables.GetHashCode();
                }
                if (this.sendDate != null)
                {
                    hashCode = (hashCode * 59) + this.sendDate.GetHashCode();
                }
                if (this.outsideTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.outsideTemplateId.GetHashCode();
                }
                if (this.insideTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.insideTemplateId.GetHashCode();
                }
                if (this.outsideTemplateVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.outsideTemplateVersionId.GetHashCode();
                }
                if (this.insideTemplateVersionId != null)
                {
                    hashCode = (hashCode * 59) + this.insideTemplateVersionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                if (this.trackingEvents != null)
                {
                    hashCode = (hashCode * 59) + this.trackingEvents.GetHashCode();
                }
                if (this.url != null)
                {
                    hashCode = (hashCode * 59) + this.url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^sfm_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            // outsideTemplateId (string) pattern
            Regex regexoutsideTemplateId = new Regex(@"^tmpl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexoutsideTemplateId.Match(this.outsideTemplateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for outsideTemplateId, must match a pattern of " + regexoutsideTemplateId, new [] { "outsideTemplateId" });
            }

            // insideTemplateId (string) pattern
            Regex regexinsideTemplateId = new Regex(@"^tmpl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexinsideTemplateId.Match(this.insideTemplateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for insideTemplateId, must match a pattern of " + regexinsideTemplateId, new [] { "insideTemplateId" });
            }

            // outsideTemplateVersionId (string) pattern
            Regex regexoutsideTemplateVersionId = new Regex(@"^vrsn_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexoutsideTemplateVersionId.Match(this.outsideTemplateVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for outsideTemplateVersionId, must match a pattern of " + regexoutsideTemplateVersionId, new [] { "outsideTemplateVersionId" });
            }

            // insideTemplateVersionId (string) pattern
            Regex regexinsideTemplateVersionId = new Regex(@"^vrsn_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexinsideTemplateVersionId.Match(this.insideTemplateVersionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for insideTemplateVersionId, must match a pattern of " + regexinsideTemplateVersionId, new [] { "insideTemplateVersionId" });
            }

            // url (string) pattern
            Regex regexurl = new Regex(@"^https:\/\/(lob-assets|lob-assets-staging)\\.com\/(letters|postcards|bank-accounts|checks|self-mailers|cards)\/[a-z]{3,4}_[a-z0-9]{15,16}(\\.pdf|_thumb_[a-z]+_[0-9]+\\.png)\\?(version=[a-z0-9-]*&)?expires=[0-9]{10}&signature=[a-zA-Z0-9-_]+$", RegexOptions.CultureInvariant);
            if (false == regexurl.Match(this.url).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for url, must match a pattern of " + regexurl, new [] { "url" });
            }

            yield break;
        }
    }

}
