/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// CampaignUpdatable
    /// </summary>
    [DataContract(Name = "campaign_updatable")]
    public partial class CampaignUpdatable : IEquatable<CampaignUpdatable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignUpdatable" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="scheduleType">scheduleType.</param>
        /// <param name="targetDeliveryDate">If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign..</param>
        /// <param name="sendDate">If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign..</param>
        /// <param name="cancelWindowCampaignMinutes">A window, in minutes, within which the campaign can be canceled..</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="isDraft">Whether or not the campaign is still a draft..</param>
        /// <param name="useType">useType.</param>
        /// <param name="autoCancelIfNcoa">Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA..</param>
        public CampaignUpdatable(string name = default(string), string description = default(string), CmpScheduleType scheduleType = default(CmpScheduleType), DateTime targetDeliveryDate = default(DateTime), DateTime sendDate = default(DateTime), int cancelWindowCampaignMinutes = default(int), Dictionary<string, string> metadata = default(Dictionary<string, string>), bool isDraft = default(bool), CmpUseType useType = default(CmpUseType), bool autoCancelIfNcoa = default(bool))
        {
            this.Name = name;
            this.Description = description;
            this.ScheduleType = scheduleType;
            this.TargetDeliveryDate = targetDeliveryDate;
            this.SendDate = sendDate;
            this.CancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
            this.Metadata = metadata;
            this.IsDraft = isDraft;
            this.UseType = useType;
            this.AutoCancelIfNcoa = autoCancelIfNcoa;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name = "schedule_type", EmitDefaultValue = false)]
        public CmpScheduleType ScheduleType { get; set; }

        /// <summary>
        /// If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign.
        /// </summary>
        /// <value>If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign.</value>
        [DataMember(Name = "target_delivery_date", EmitDefaultValue = false)]
        public DateTime TargetDeliveryDate { get; set; }

        /// <summary>
        /// If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign.
        /// </summary>
        /// <value>If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign.</value>
        [DataMember(Name = "send_date", EmitDefaultValue = false)]
        public DateTime SendDate { get; set; }

        /// <summary>
        /// A window, in minutes, within which the campaign can be canceled.
        /// </summary>
        /// <value>A window, in minutes, within which the campaign can be canceled.</value>
        [DataMember(Name = "cancel_window_campaign_minutes", EmitDefaultValue = false)]
        public int CancelWindowCampaignMinutes { get; set; }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Whether or not the campaign is still a draft.
        /// </summary>
        /// <value>Whether or not the campaign is still a draft.</value>
        [DataMember(Name = "is_draft", EmitDefaultValue = false)]
        public bool IsDraft { get; set; }

        /// <summary>
        /// Gets or Sets UseType
        /// </summary>
        [DataMember(Name = "use_type", EmitDefaultValue = false)]
        public CmpUseType UseType { get; set; }

        /// <summary>
        /// Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA.
        /// </summary>
        /// <value>Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA.</value>
        [DataMember(Name = "auto_cancel_if_ncoa", EmitDefaultValue = false)]
        public bool AutoCancelIfNcoa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignUpdatable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  TargetDeliveryDate: ").Append(TargetDeliveryDate).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  CancelWindowCampaignMinutes: ").Append(CancelWindowCampaignMinutes).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  IsDraft: ").Append(IsDraft).Append("\n");
            sb.Append("  UseType: ").Append(UseType).Append("\n");
            sb.Append("  AutoCancelIfNcoa: ").Append(AutoCancelIfNcoa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignUpdatable);
        }

        /// <summary>
        /// Returns true if CampaignUpdatable instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignUpdatable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignUpdatable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    (this.ScheduleType != null &&
                    this.ScheduleType.Equals(input.ScheduleType))
                ) && 
                (
                    this.TargetDeliveryDate == input.TargetDeliveryDate ||
                    (this.TargetDeliveryDate != null &&
                    this.TargetDeliveryDate.Equals(input.TargetDeliveryDate))
                ) && 
                (
                    this.SendDate == input.SendDate ||
                    (this.SendDate != null &&
                    this.SendDate.Equals(input.SendDate))
                ) && 
                (
                    this.CancelWindowCampaignMinutes == input.CancelWindowCampaignMinutes ||
                    this.CancelWindowCampaignMinutes.Equals(input.CancelWindowCampaignMinutes)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.IsDraft == input.IsDraft ||
                    this.IsDraft.Equals(input.IsDraft)
                ) && 
                (
                    this.UseType == input.UseType ||
                    (this.UseType != null &&
                    this.UseType.Equals(input.UseType))
                ) && 
                (
                    this.AutoCancelIfNcoa == input.AutoCancelIfNcoa ||
                    this.AutoCancelIfNcoa.Equals(input.AutoCancelIfNcoa)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ScheduleType != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                }
                if (this.TargetDeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.TargetDeliveryDate.GetHashCode();
                }
                if (this.SendDate != null)
                {
                    hashCode = (hashCode * 59) + this.SendDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CancelWindowCampaignMinutes.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDraft.GetHashCode();
                if (this.UseType != null)
                {
                    hashCode = (hashCode * 59) + this.UseType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoCancelIfNcoa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

}
