/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// BuckslipEditable
    /// </summary>
    [DataContract(Name = "buckslip_editable")]
    public partial class BuckslipEditable : IEquatable<BuckslipEditable>, IValidatableObject
    {
        /// <summary>
        /// The size of the buckslip
        /// </summary>
        /// <value>The size of the buckslip</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _875x375 for value: 8.75x3.75
            /// </summary>
            [EnumMember(Value = "8.75x3.75")]
            _875x375 = 1
            

        }


        /// <summary>
        /// The size of the buckslip
        /// </summary>
        /// <value>The size of the buckslip</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuckslipEditable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuckslipEditable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuckslipEditable" /> class.
        /// </summary>
        /// <param name="front">A PDF template for the front of the buckslip (required).</param>
        /// <param name="back">A PDF template for the back of the buckslip.</param>
        /// <param name="description">Description of the buckslip..</param>
        /// <param name="size">The size of the buckslip (default to SizeEnum._875x375).</param>
        public BuckslipEditable(string front = default(string), string back = default(string), string description = default(string), SizeEnum? size = SizeEnum._875x375)
        {
            // to ensure "front" is required (not null)
            if (front == null)
            {
                throw new ArgumentNullException("front is a required property for BuckslipEditable and cannot be null");
            }
            this.Front = front;
            this.Back = back;
            this.Description = description;
            this.Size = size;
        }

        /// <summary>
        /// A PDF template for the front of the buckslip
        /// </summary>
        /// <value>A PDF template for the front of the buckslip</value>
        [DataMember(Name = "front", IsRequired = true, EmitDefaultValue = false)]
        public string Front { get; set; }

        /// <summary>
        /// A PDF template for the back of the buckslip
        /// </summary>
        /// <value>A PDF template for the back of the buckslip</value>
        [DataMember(Name = "back", EmitDefaultValue = false)]
        public string Back { get; set; }

        /// <summary>
        /// Description of the buckslip.
        /// </summary>
        /// <value>Description of the buckslip.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuckslipEditable {\n");
            sb.Append("  Front: ").Append(Front).Append("\n");
            sb.Append("  Back: ").Append(Back).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuckslipEditable);
        }

        /// <summary>
        /// Returns true if BuckslipEditable instances are equal
        /// </summary>
        /// <param name="input">Instance of BuckslipEditable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuckslipEditable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Front == input.Front ||
                    (this.Front != null &&
                    this.Front.Equals(input.Front))
                ) && 
                (
                    this.Back == input.Back ||
                    (this.Back != null &&
                    this.Back.Equals(input.Back))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Front != null)
                {
                    hashCode = (hashCode * 59) + this.Front.GetHashCode();
                }
                if (this.Back != null)
                {
                    hashCode = (hashCode * 59) + this.Back.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

}
