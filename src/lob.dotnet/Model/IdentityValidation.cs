/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// IdentityValidation
    /// </summary>
    [DataContract(Name = "identity_validation")]
    public partial class IdentityValidation : IEquatable<IdentityValidation>, IValidatableObject
    {
        /// <summary>
        /// Indicates the likelihood the recipient name and address match based on our custom internal calculation. Possible values are: - &#x60;high&#x60; — Has a Lob confidence score greater than 70. - &#x60;medium&#x60; — Has a Lob confidence score between 40 and 70. - &#x60;low&#x60; — Has a Lob confidence score less than 40. - &#x60;\&quot;\&quot;&#x60; — No tracking data exists for this address. 
        /// </summary>
        /// <value>Indicates the likelihood the recipient name and address match based on our custom internal calculation. Possible values are: - &#x60;high&#x60; — Has a Lob confidence score greater than 70. - &#x60;medium&#x60; — Has a Lob confidence score between 40 and 70. - &#x60;low&#x60; — Has a Lob confidence score less than 40. - &#x60;\&quot;\&quot;&#x60; — No tracking data exists for this address. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfidenceEnum
        {
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 1,
            

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 2,
            

            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 3,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 4
            

        }


        /// <summary>
        /// Indicates the likelihood the recipient name and address match based on our custom internal calculation. Possible values are: - &#x60;high&#x60; — Has a Lob confidence score greater than 70. - &#x60;medium&#x60; — Has a Lob confidence score between 40 and 70. - &#x60;low&#x60; — Has a Lob confidence score less than 40. - &#x60;\&quot;\&quot;&#x60; — No tracking data exists for this address. 
        /// </summary>
        /// <value>Indicates the likelihood the recipient name and address match based on our custom internal calculation. Possible values are: - &#x60;high&#x60; — Has a Lob confidence score greater than 70. - &#x60;medium&#x60; — Has a Lob confidence score between 40 and 70. - &#x60;low&#x60; — Has a Lob confidence score less than 40. - &#x60;\&quot;\&quot;&#x60; — No tracking data exists for this address. </value>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public ConfidenceEnum? Confidence { get; set; }
        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum IdValidation for value: id_validation
            /// </summary>
            [EnumMember(Value = "id_validation")]
            IdValidation = 1
            

        }


        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public ObjectEnum? Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityValidation" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;id_validation_&#x60;..</param>
        /// <param name="recipient">The intended recipient, typically a person&#39;s or firm&#39;s name..</param>
        /// <param name="primaryLine">The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; .</param>
        /// <param name="secondaryLine">The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. .</param>
        /// <param name="urbanization">Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. .</param>
        /// <param name="lastLine">Combination of the following applicable &#x60;components&#x60;: * City (&#x60;city&#x60;) * State (&#x60;state&#x60;) * ZIP code (&#x60;zip_code&#x60;) * ZIP+4 (&#x60;zip_code_plus_4&#x60;) .</param>
        /// <param name="score">A numerical score between 0 and 100 that represents the likelihood the provided name is associated with a physical address. .</param>
        /// <param name="confidence">Indicates the likelihood the recipient name and address match based on our custom internal calculation. Possible values are: - &#x60;high&#x60; — Has a Lob confidence score greater than 70. - &#x60;medium&#x60; — Has a Lob confidence score between 40 and 70. - &#x60;low&#x60; — Has a Lob confidence score less than 40. - &#x60;\&quot;\&quot;&#x60; — No tracking data exists for this address. .</param>
        /// <param name="_object">Value is resource type. (default to ObjectEnum.IdValidation).</param>
        public IdentityValidation(string id = default(string), string recipient = default(string), string primaryLine = default(string), string secondaryLine = default(string), string urbanization = default(string), string lastLine = default(string), float? score = default(float?), ConfidenceEnum? confidence = default(ConfidenceEnum?), ObjectEnum? _object = ObjectEnum.IdValidation)
        {
            this.Id = id;
            this.Recipient = recipient;
            this.PrimaryLine = primaryLine;
            this.SecondaryLine = secondaryLine;
            this.Urbanization = urbanization;
            this.LastLine = lastLine;
            this.Score = score;
            this.Confidence = confidence;
            this.Object = _object;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;id_validation_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;id_validation_&#x60;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The intended recipient, typically a person&#39;s or firm&#39;s name.
        /// </summary>
        /// <value>The intended recipient, typically a person&#39;s or firm&#39;s name.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; 
        /// </summary>
        /// <value>The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; </value>
        [DataMember(Name = "primary_line", EmitDefaultValue = false)]
        public string PrimaryLine { get; set; }

        /// <summary>
        /// The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. 
        /// </summary>
        /// <value>The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. </value>
        [DataMember(Name = "secondary_line", EmitDefaultValue = false)]
        public string SecondaryLine { get; set; }

        /// <summary>
        /// Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. 
        /// </summary>
        /// <value>Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. </value>
        [DataMember(Name = "urbanization", EmitDefaultValue = false)]
        public string Urbanization { get; set; }

        /// <summary>
        /// Combination of the following applicable &#x60;components&#x60;: * City (&#x60;city&#x60;) * State (&#x60;state&#x60;) * ZIP code (&#x60;zip_code&#x60;) * ZIP+4 (&#x60;zip_code_plus_4&#x60;) 
        /// </summary>
        /// <value>Combination of the following applicable &#x60;components&#x60;: * City (&#x60;city&#x60;) * State (&#x60;state&#x60;) * ZIP code (&#x60;zip_code&#x60;) * ZIP+4 (&#x60;zip_code_plus_4&#x60;) </value>
        [DataMember(Name = "last_line", EmitDefaultValue = false)]
        public string LastLine { get; set; }

        /// <summary>
        /// A numerical score between 0 and 100 that represents the likelihood the provided name is associated with a physical address. 
        /// </summary>
        /// <value>A numerical score between 0 and 100 that represents the likelihood the provided name is associated with a physical address. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public float? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityValidation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  PrimaryLine: ").Append(PrimaryLine).Append("\n");
            sb.Append("  SecondaryLine: ").Append(SecondaryLine).Append("\n");
            sb.Append("  Urbanization: ").Append(Urbanization).Append("\n");
            sb.Append("  LastLine: ").Append(LastLine).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityValidation);
        }

        /// <summary>
        /// Returns true if IdentityValidation instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityValidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityValidation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.PrimaryLine == input.PrimaryLine ||
                    (this.PrimaryLine != null &&
                    this.PrimaryLine.Equals(input.PrimaryLine))
                ) && 
                (
                    this.SecondaryLine == input.SecondaryLine ||
                    (this.SecondaryLine != null &&
                    this.SecondaryLine.Equals(input.SecondaryLine))
                ) && 
                (
                    this.Urbanization == input.Urbanization ||
                    (this.Urbanization != null &&
                    this.Urbanization.Equals(input.Urbanization))
                ) && 
                (
                    this.LastLine == input.LastLine ||
                    (this.LastLine != null &&
                    this.LastLine.Equals(input.LastLine))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    this.Confidence.Equals(input.Confidence)
                ) && 
                (
                    this.Object == input.Object ||
                    this.Object.Equals(input.Object)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                if (this.PrimaryLine != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLine.GetHashCode();
                }
                if (this.SecondaryLine != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryLine.GetHashCode();
                }
                if (this.Urbanization != null)
                {
                    hashCode = (hashCode * 59) + this.Urbanization.GetHashCode();
                }
                if (this.LastLine != null)
                {
                    hashCode = (hashCode * 59) + this.LastLine.GetHashCode();
                }
                if (this.Score != null)
                {
                    hashCode = (hashCode * 59) + this.Score.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Confidence.GetHashCode();
                hashCode = (hashCode * 59) + this.Object.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^id_validation_[a-zA-Z0-9_]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // Recipient (string) maxLength
            if (this.Recipient != null && this.Recipient.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Recipient, length must be less than 500.", new [] { "Recipient" });
            }

            // PrimaryLine (string) maxLength
            if (this.PrimaryLine != null && this.PrimaryLine.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrimaryLine, length must be less than 500.", new [] { "PrimaryLine" });
            }

            // SecondaryLine (string) maxLength
            if (this.SecondaryLine != null && this.SecondaryLine.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecondaryLine, length must be less than 500.", new [] { "SecondaryLine" });
            }

            // Urbanization (string) maxLength
            if (this.Urbanization != null && this.Urbanization.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Urbanization, length must be less than 500.", new [] { "Urbanization" });
            }

            // Score (float?) maximum
            if (this.Score > (float?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (float?) minimum
            if (this.Score < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}
