/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// UploadFile
    /// </summary>
    [DataContract(Name = "upload_file")]
    public partial class UploadFile : IEquatable<UploadFile>, IValidatableObject
    {
        /// <summary>
        /// Defines Message
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageEnum
        {
            /// <summary>
            /// Enum FileUploadedSuccessfully for value: File uploaded successfully
            /// </summary>
            [EnumMember(Value = "File uploaded successfully")]
            FileUploadedSuccessfully = 1
            

        }


        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public MessageEnum Message { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFile" /> class.
        /// </summary>
        /// <param name="message">message (required) (default to MessageEnum.FileUploadedSuccessfully).</param>
        /// <param name="filename">filename (required).</param>
        public UploadFile(MessageEnum message = MessageEnum.FileUploadedSuccessfully, string filename = default(string))
        {
            this.Message = message;
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for UploadFile and cannot be null");
            }
            this.Filename = filename;
        }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadFile {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadFile);
        }

        /// <summary>
        /// Returns true if UploadFile instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadFile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    this.Message.Equals(input.Message)
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Message.GetHashCode();
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
