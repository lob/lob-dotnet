/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Buckslip
    /// </summary>
    [DataContract(Name = "buckslip")]
    public partial class Buckslip : IEquatable<Buckslip>, IValidatableObject
    {
        /// <summary>
        /// Defines Stock
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StockEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,
            

            /// <summary>
            /// Enum Cover for value: cover
            /// </summary>
            [EnumMember(Value = "cover")]
            Cover = 2
            

        }


        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "stock", IsRequired = true, EmitDefaultValue = false)]
        public StockEnum Stock { get; set; }
        /// <summary>
        /// Defines Weight
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightEnum
        {
            /// <summary>
            /// Enum _80 for value: 80#
            /// </summary>
            [EnumMember(Value = "80#")]
            _80 = 1
            

        }


        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = false)]
        public WeightEnum Weight { get; set; }
        /// <summary>
        /// Defines Finish
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FinishEnum
        {
            /// <summary>
            /// Enum Gloss for value: gloss
            /// </summary>
            [EnumMember(Value = "gloss")]
            Gloss = 1,
            

            /// <summary>
            /// Enum Matte for value: matte
            /// </summary>
            [EnumMember(Value = "matte")]
            Matte = 2
            

        }


        /// <summary>
        /// Gets or Sets Finish
        /// </summary>
        [DataMember(Name = "finish", IsRequired = true, EmitDefaultValue = false)]
        public FinishEnum Finish { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 1,
            

            /// <summary>
            /// Enum Rendered for value: rendered
            /// </summary>
            [EnumMember(Value = "rendered")]
            Rendered = 2
            

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Buckslip for value: buckslip
            /// </summary>
            [EnumMember(Value = "buckslip")]
            Buckslip = 1
            

        }


        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// The size of the buckslip
        /// </summary>
        /// <value>The size of the buckslip</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _875x375 for value: 8.75x3.75
            /// </summary>
            [EnumMember(Value = "8.75x3.75")]
            _875x375 = 1
            

        }


        /// <summary>
        /// The size of the buckslip
        /// </summary>
        /// <value>The size of the buckslip</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Buckslip" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Buckslip() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Buckslip" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;bck_&#x60;. (required).</param>
        /// <param name="autoReorder">True if the buckslips should be auto-reordered. (required) (default to false).</param>
        /// <param name="reorderQuantity">The number of buckslips to be reordered. (required).</param>
        /// <param name="thresholdAmount">The threshold amount of the buckslip (required) (default to 0).</param>
        /// <param name="url">The signed link for the buckslip. (required).</param>
        /// <param name="rawUrl">The raw URL of the buckslip. (required).</param>
        /// <param name="frontOriginalUrl">The original URL of the front template. (required).</param>
        /// <param name="backOriginalUrl">The original URL of the back template. (required).</param>
        /// <param name="thumbnails">thumbnails (required).</param>
        /// <param name="availableQuantity">The available quantity of buckslips. (required) (default to 0M).</param>
        /// <param name="allocatedQuantity">The allocated quantity of buckslips. (required) (default to 0M).</param>
        /// <param name="onhandQuantity">The onhand quantity of buckslips. (required) (default to 0M).</param>
        /// <param name="pendingQuantity">The pending quantity of buckslips. (required) (default to 0M).</param>
        /// <param name="projectedQuantity">The sum of pending and onhand quantities of buckslips. (required) (default to 0M).</param>
        /// <param name="buckslipOrders">An array of buckslip orders that are associated with the buckslip. (required).</param>
        /// <param name="stock">stock (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="finish">finish (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="_object">object (required) (default to ObjectEnum.Buckslip).</param>
        /// <param name="description">Description of the buckslip. (required).</param>
        /// <param name="size">The size of the buckslip (default to SizeEnum._875x375).</param>
        public Buckslip(string id = default(string), bool autoReorder = false, int? reorderQuantity = default(int?), int thresholdAmount = 0, string url = default(string), string rawUrl = default(string), string frontOriginalUrl = default(string), string backOriginalUrl = default(string), List<Thumbnail> thumbnails = default(List<Thumbnail>), decimal availableQuantity = 0M, decimal allocatedQuantity = 0M, decimal onhandQuantity = 0M, decimal pendingQuantity = 0M, decimal projectedQuantity = 0M, List<BuckslipOrder> buckslipOrders = default(List<BuckslipOrder>), StockEnum stock = default(StockEnum), WeightEnum weight = default(WeightEnum), FinishEnum finish = default(FinishEnum), StatusEnum status = default(StatusEnum), ObjectEnum _object = ObjectEnum.Buckslip, string description = default(string), SizeEnum? size = SizeEnum._875x375)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Buckslip and cannot be null");
            }
            this.Id = id;
            this.AutoReorder = autoReorder;
            // to ensure "reorderQuantity" is required (not null)
            if (reorderQuantity == null)
            {
                throw new ArgumentNullException("reorderQuantity is a required property for Buckslip and cannot be null");
            }
            this.ReorderQuantity = reorderQuantity;
            this.ThresholdAmount = thresholdAmount;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Buckslip and cannot be null");
            }
            this.Url = url;
            // to ensure "rawUrl" is required (not null)
            if (rawUrl == null)
            {
                throw new ArgumentNullException("rawUrl is a required property for Buckslip and cannot be null");
            }
            this.RawUrl = rawUrl;
            // to ensure "frontOriginalUrl" is required (not null)
            if (frontOriginalUrl == null)
            {
                throw new ArgumentNullException("frontOriginalUrl is a required property for Buckslip and cannot be null");
            }
            this.FrontOriginalUrl = frontOriginalUrl;
            // to ensure "backOriginalUrl" is required (not null)
            if (backOriginalUrl == null)
            {
                throw new ArgumentNullException("backOriginalUrl is a required property for Buckslip and cannot be null");
            }
            this.BackOriginalUrl = backOriginalUrl;
            // to ensure "thumbnails" is required (not null)
            if (thumbnails == null)
            {
                throw new ArgumentNullException("thumbnails is a required property for Buckslip and cannot be null");
            }
            this.Thumbnails = thumbnails;
            this.AvailableQuantity = availableQuantity;
            this.AllocatedQuantity = allocatedQuantity;
            this.OnhandQuantity = onhandQuantity;
            this.PendingQuantity = pendingQuantity;
            this.ProjectedQuantity = projectedQuantity;
            // to ensure "buckslipOrders" is required (not null)
            if (buckslipOrders == null)
            {
                throw new ArgumentNullException("buckslipOrders is a required property for Buckslip and cannot be null");
            }
            this.BuckslipOrders = buckslipOrders;
            this.Stock = stock;
            this.Weight = weight;
            this.Finish = finish;
            this.Status = status;
            this.Object = _object;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Buckslip and cannot be null");
            }
            this.Description = description;
            this.Size = size;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;bck_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;bck_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// True if the buckslips should be auto-reordered.
        /// </summary>
        /// <value>True if the buckslips should be auto-reordered.</value>
        [DataMember(Name = "auto_reorder", IsRequired = true, EmitDefaultValue = false)]
        public bool AutoReorder { get; set; }

        /// <summary>
        /// The number of buckslips to be reordered.
        /// </summary>
        /// <value>The number of buckslips to be reordered.</value>
        [DataMember(Name = "reorder_quantity", IsRequired = true, EmitDefaultValue = false)]
        public int? ReorderQuantity { get; set; }

        /// <summary>
        /// The threshold amount of the buckslip
        /// </summary>
        /// <value>The threshold amount of the buckslip</value>
        [DataMember(Name = "threshold_amount", IsRequired = true, EmitDefaultValue = false)]
        public int ThresholdAmount { get; set; }

        /// <summary>
        /// The signed link for the buckslip.
        /// </summary>
        /// <value>The signed link for the buckslip.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The raw URL of the buckslip.
        /// </summary>
        /// <value>The raw URL of the buckslip.</value>
        [DataMember(Name = "raw_url", IsRequired = true, EmitDefaultValue = false)]
        public string RawUrl { get; set; }

        /// <summary>
        /// The original URL of the front template.
        /// </summary>
        /// <value>The original URL of the front template.</value>
        [DataMember(Name = "front_original_url", IsRequired = true, EmitDefaultValue = false)]
        public string FrontOriginalUrl { get; set; }

        /// <summary>
        /// The original URL of the back template.
        /// </summary>
        /// <value>The original URL of the back template.</value>
        [DataMember(Name = "back_original_url", IsRequired = true, EmitDefaultValue = false)]
        public string BackOriginalUrl { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", IsRequired = true, EmitDefaultValue = false)]
        public List<Thumbnail> Thumbnails { get; set; }

        /// <summary>
        /// The available quantity of buckslips.
        /// </summary>
        /// <value>The available quantity of buckslips.</value>
        [DataMember(Name = "available_quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal AvailableQuantity { get; set; }

        /// <summary>
        /// The allocated quantity of buckslips.
        /// </summary>
        /// <value>The allocated quantity of buckslips.</value>
        [DataMember(Name = "allocated_quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal AllocatedQuantity { get; set; }

        /// <summary>
        /// The onhand quantity of buckslips.
        /// </summary>
        /// <value>The onhand quantity of buckslips.</value>
        [DataMember(Name = "onhand_quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal OnhandQuantity { get; set; }

        /// <summary>
        /// The pending quantity of buckslips.
        /// </summary>
        /// <value>The pending quantity of buckslips.</value>
        [DataMember(Name = "pending_quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal PendingQuantity { get; set; }

        /// <summary>
        /// The sum of pending and onhand quantities of buckslips.
        /// </summary>
        /// <value>The sum of pending and onhand quantities of buckslips.</value>
        [DataMember(Name = "projected_quantity", IsRequired = true, EmitDefaultValue = false)]
        public decimal ProjectedQuantity { get; set; }

        /// <summary>
        /// An array of buckslip orders that are associated with the buckslip.
        /// </summary>
        /// <value>An array of buckslip orders that are associated with the buckslip.</value>
        [DataMember(Name = "buckslip_orders", IsRequired = true, EmitDefaultValue = false)]
        public List<BuckslipOrder> BuckslipOrders { get; set; }

        /// <summary>
        /// Description of the buckslip.
        /// </summary>
        /// <value>Description of the buckslip.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Buckslip {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AutoReorder: ").Append(AutoReorder).Append("\n");
            sb.Append("  ReorderQuantity: ").Append(ReorderQuantity).Append("\n");
            sb.Append("  ThresholdAmount: ").Append(ThresholdAmount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RawUrl: ").Append(RawUrl).Append("\n");
            sb.Append("  FrontOriginalUrl: ").Append(FrontOriginalUrl).Append("\n");
            sb.Append("  BackOriginalUrl: ").Append(BackOriginalUrl).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  AvailableQuantity: ").Append(AvailableQuantity).Append("\n");
            sb.Append("  AllocatedQuantity: ").Append(AllocatedQuantity).Append("\n");
            sb.Append("  OnhandQuantity: ").Append(OnhandQuantity).Append("\n");
            sb.Append("  PendingQuantity: ").Append(PendingQuantity).Append("\n");
            sb.Append("  ProjectedQuantity: ").Append(ProjectedQuantity).Append("\n");
            sb.Append("  BuckslipOrders: ").Append(BuckslipOrders).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Finish: ").Append(Finish).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Buckslip);
        }

        /// <summary>
        /// Returns true if Buckslip instances are equal
        /// </summary>
        /// <param name="input">Instance of Buckslip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Buckslip input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AutoReorder == input.AutoReorder ||
                    this.AutoReorder.Equals(input.AutoReorder)
                ) && 
                (
                    this.ReorderQuantity == input.ReorderQuantity ||
                    (this.ReorderQuantity != null &&
                    this.ReorderQuantity.Equals(input.ReorderQuantity))
                ) && 
                (
                    this.ThresholdAmount == input.ThresholdAmount ||
                    this.ThresholdAmount.Equals(input.ThresholdAmount)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.RawUrl == input.RawUrl ||
                    (this.RawUrl != null &&
                    this.RawUrl.Equals(input.RawUrl))
                ) && 
                (
                    this.FrontOriginalUrl == input.FrontOriginalUrl ||
                    (this.FrontOriginalUrl != null &&
                    this.FrontOriginalUrl.Equals(input.FrontOriginalUrl))
                ) && 
                (
                    this.BackOriginalUrl == input.BackOriginalUrl ||
                    (this.BackOriginalUrl != null &&
                    this.BackOriginalUrl.Equals(input.BackOriginalUrl))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    input.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                ) && 
                (
                    this.AvailableQuantity == input.AvailableQuantity ||
                    this.AvailableQuantity.Equals(input.AvailableQuantity)
                ) && 
                (
                    this.AllocatedQuantity == input.AllocatedQuantity ||
                    this.AllocatedQuantity.Equals(input.AllocatedQuantity)
                ) && 
                (
                    this.OnhandQuantity == input.OnhandQuantity ||
                    this.OnhandQuantity.Equals(input.OnhandQuantity)
                ) && 
                (
                    this.PendingQuantity == input.PendingQuantity ||
                    this.PendingQuantity.Equals(input.PendingQuantity)
                ) && 
                (
                    this.ProjectedQuantity == input.ProjectedQuantity ||
                    this.ProjectedQuantity.Equals(input.ProjectedQuantity)
                ) && 
                (
                    this.BuckslipOrders == input.BuckslipOrders ||
                    this.BuckslipOrders != null &&
                    input.BuckslipOrders != null &&
                    this.BuckslipOrders.SequenceEqual(input.BuckslipOrders)
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.Finish == input.Finish ||
                    this.Finish.Equals(input.Finish)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Object == input.Object ||
                    this.Object.Equals(input.Object)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoReorder.GetHashCode();
                if (this.ReorderQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.ReorderQuantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThresholdAmount.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.RawUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RawUrl.GetHashCode();
                }
                if (this.FrontOriginalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FrontOriginalUrl.GetHashCode();
                }
                if (this.BackOriginalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BackOriginalUrl.GetHashCode();
                }
                if (this.Thumbnails != null)
                {
                    hashCode = (hashCode * 59) + this.Thumbnails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AvailableQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.AllocatedQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.OnhandQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.PendingQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.ProjectedQuantity.GetHashCode();
                if (this.BuckslipOrders != null)
                {
                    hashCode = (hashCode * 59) + this.BuckslipOrders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                hashCode = (hashCode * 59) + this.Finish.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Object.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^bck_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 2083.", new [] { "Url" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            // RawUrl (string) maxLength
            if (this.RawUrl != null && this.RawUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RawUrl, length must be less than 2083.", new [] { "RawUrl" });
            }

            // RawUrl (string) minLength
            if (this.RawUrl != null && this.RawUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RawUrl, length must be greater than 1.", new [] { "RawUrl" });
            }

            // FrontOriginalUrl (string) maxLength
            if (this.FrontOriginalUrl != null && this.FrontOriginalUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontOriginalUrl, length must be less than 2083.", new [] { "FrontOriginalUrl" });
            }

            // FrontOriginalUrl (string) minLength
            if (this.FrontOriginalUrl != null && this.FrontOriginalUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontOriginalUrl, length must be greater than 1.", new [] { "FrontOriginalUrl" });
            }

            // BackOriginalUrl (string) maxLength
            if (this.BackOriginalUrl != null && this.BackOriginalUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BackOriginalUrl, length must be less than 2083.", new [] { "BackOriginalUrl" });
            }

            // BackOriginalUrl (string) minLength
            if (this.BackOriginalUrl != null && this.BackOriginalUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BackOriginalUrl, length must be greater than 1.", new [] { "BackOriginalUrl" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

}
