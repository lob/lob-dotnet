/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// The mapping of column headers in your file to Lob-required fields for the resource created. See our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
    /// </summary>
    [DataContract(Name = "required_address_column_mapping")]
    public partial class RequiredAddressColumnMapping : IEquatable<RequiredAddressColumnMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredAddressColumnMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequiredAddressColumnMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredAddressColumnMapping" /> class.
        /// </summary>
        /// <param name="name">The column header from the csv file that should be mapped to the required field &#x60;name&#x60; (required) (default to &quot;null&quot;).</param>
        /// <param name="addressLine1">The column header from the csv file that should be mapped to the required field &#x60;address_line1&#x60; (required) (default to &quot;null&quot;).</param>
        /// <param name="addressCity">The column header from the csv file that should be mapped to the required field &#x60;address_city&#x60; (required) (default to &quot;null&quot;).</param>
        /// <param name="addressState">The column header from the csv file that should be mapped to the required field &#x60;address_state&#x60; (required) (default to &quot;null&quot;).</param>
        /// <param name="addressZip">The column header from the csv file that should be mapped to the required field &#x60;address_zip&#x60; (required) (default to &quot;null&quot;).</param>
        public RequiredAddressColumnMapping(string name = "null", string addressLine1 = "null", string addressCity = "null", string addressState = "null", string addressZip = "null")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RequiredAddressColumnMapping and cannot be null");
            }
            this.Name = name;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for RequiredAddressColumnMapping and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "addressCity" is required (not null)
            if (addressCity == null)
            {
                throw new ArgumentNullException("addressCity is a required property for RequiredAddressColumnMapping and cannot be null");
            }
            this.AddressCity = addressCity;
            // to ensure "addressState" is required (not null)
            if (addressState == null)
            {
                throw new ArgumentNullException("addressState is a required property for RequiredAddressColumnMapping and cannot be null");
            }
            this.AddressState = addressState;
            // to ensure "addressZip" is required (not null)
            if (addressZip == null)
            {
                throw new ArgumentNullException("addressZip is a required property for RequiredAddressColumnMapping and cannot be null");
            }
            this.AddressZip = addressZip;
        }

        /// <summary>
        /// The column header from the csv file that should be mapped to the required field &#x60;name&#x60;
        /// </summary>
        /// <value>The column header from the csv file that should be mapped to the required field &#x60;name&#x60;</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The column header from the csv file that should be mapped to the required field &#x60;address_line1&#x60;
        /// </summary>
        /// <value>The column header from the csv file that should be mapped to the required field &#x60;address_line1&#x60;</value>
        [DataMember(Name = "address_line1", IsRequired = true, EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The column header from the csv file that should be mapped to the required field &#x60;address_city&#x60;
        /// </summary>
        /// <value>The column header from the csv file that should be mapped to the required field &#x60;address_city&#x60;</value>
        [DataMember(Name = "address_city", IsRequired = true, EmitDefaultValue = false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// The column header from the csv file that should be mapped to the required field &#x60;address_state&#x60;
        /// </summary>
        /// <value>The column header from the csv file that should be mapped to the required field &#x60;address_state&#x60;</value>
        [DataMember(Name = "address_state", IsRequired = true, EmitDefaultValue = false)]
        public string AddressState { get; set; }

        /// <summary>
        /// The column header from the csv file that should be mapped to the required field &#x60;address_zip&#x60;
        /// </summary>
        /// <value>The column header from the csv file that should be mapped to the required field &#x60;address_zip&#x60;</value>
        [DataMember(Name = "address_zip", IsRequired = true, EmitDefaultValue = false)]
        public string AddressZip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequiredAddressColumnMapping {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressZip: ").Append(AddressZip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequiredAddressColumnMapping);
        }

        /// <summary>
        /// Returns true if RequiredAddressColumnMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of RequiredAddressColumnMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredAddressColumnMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressZip == input.AddressZip ||
                    (this.AddressZip != null &&
                    this.AddressZip.Equals(input.AddressZip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressCity != null)
                {
                    hashCode = (hashCode * 59) + this.AddressCity.GetHashCode();
                }
                if (this.AddressState != null)
                {
                    hashCode = (hashCode * 59) + this.AddressState.GetHashCode();
                }
                if (this.AddressZip != null)
                {
                    hashCode = (hashCode * 59) + this.AddressZip.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
