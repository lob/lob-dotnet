/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// CardOrder
    /// </summary>
    [DataContract(Name = "card_order")]
    public partial class CardOrder : IEquatable<CardOrder>, IValidatableObject
    {
        /// <summary>
        /// The status of the card order.
        /// </summary>
        /// <value>The status of the card order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            

            /// <summary>
            /// Enum Printing for value: printing
            /// </summary>
            [EnumMember(Value = "printing")]
            Printing = 2,
            

            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 3,
            

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 4,
            

            /// <summary>
            /// Enum Depleted for value: depleted
            /// </summary>
            [EnumMember(Value = "depleted")]
            Depleted = 5
            

        }


        /// <summary>
        /// The status of the card order.
        /// </summary>
        /// <value>The status of the card order.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        private StatusEnum? status;
        public StatusEnum? getStatus() {
            return status;
        }
        public void setStatus(StatusEnum value) {
            status = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CardOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOrder" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;co_&#x60;..</param>
        /// <param name="cardId">Unique identifier prefixed with &#x60;card_&#x60;..</param>
        /// <param name="status">The status of the card order..</param>
        /// <param name="inventory">The inventory of the card order. (default to 0M).</param>
        /// <param name="quantityOrdered">The quantity of cards ordered (default to 0M).</param>
        /// <param name="unitPrice">The unit price for the card order. (default to 0M).</param>
        /// <param name="cancelledReason">The reason for cancellation..</param>
        /// <param name="availabilityDate">A timestamp in ISO 8601 format of the date the resource was created..</param>
        /// <param name="expectedAvailabilityDate">The fixed deadline for the cards to be printed..</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created. (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified. (required).</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="_object">Value is type of resource. (required).</param>

        /// <summary>
        /// Unique identifier prefixed with &#x60;co_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;co_&#x60;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;card_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;card_&#x60;.</value>
        [DataMember(Name = "card_id", EmitDefaultValue = false)]
        private string cardId;
        public string getCardId() {
            return cardId;
        }
        public void setCardId(string value) {
            cardId = value;
        }

        /// <summary>
        /// The inventory of the card order.
        /// </summary>
        /// <value>The inventory of the card order.</value>
        [DataMember(Name = "inventory", EmitDefaultValue = false)]
        private decimal inventory;
        public decimal getInventory() {
            return inventory;
        }
        public void setInventory(decimal value) {
            inventory = value;
        }

        /// <summary>
        /// The quantity of cards ordered
        /// </summary>
        /// <value>The quantity of cards ordered</value>
        [DataMember(Name = "quantity_ordered", EmitDefaultValue = false)]
        private decimal quantityOrdered;
        public decimal getQuantityOrdered() {
            return quantityOrdered;
        }
        public void setQuantityOrdered(decimal value) {
            quantityOrdered = value;
        }

        /// <summary>
        /// The unit price for the card order.
        /// </summary>
        /// <value>The unit price for the card order.</value>
        [DataMember(Name = "unit_price", EmitDefaultValue = false)]
        private decimal unitPrice;
        public decimal getUnitPrice() {
            return unitPrice;
        }
        public void setUnitPrice(decimal value) {
            unitPrice = value;
        }

        /// <summary>
        /// The reason for cancellation.
        /// </summary>
        /// <value>The reason for cancellation.</value>
        [DataMember(Name = "cancelled_reason", EmitDefaultValue = false)]
        private string cancelledReason;
        public string getCancelledReason() {
            return cancelledReason;
        }
        public void setCancelledReason(string value) {
            cancelledReason = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "availability_date", EmitDefaultValue = false)]
        private DateTime availabilityDate;
        public DateTime getAvailabilityDate() {
            return availabilityDate;
        }
        public void setAvailabilityDate(DateTime value) {
            availabilityDate = value;
        }

        /// <summary>
        /// The fixed deadline for the cards to be printed.
        /// </summary>
        /// <value>The fixed deadline for the cards to be printed.</value>
        [DataMember(Name = "expected_availability_date", EmitDefaultValue = false)]
        private DateTime expectedAvailabilityDate;
        public DateTime getExpectedAvailabilityDate() {
            return expectedAvailabilityDate;
        }
        public void setExpectedAvailabilityDate(DateTime value) {
            expectedAvailabilityDate = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateCreated;
        public DateTime getDateCreated() {
            return dateCreated;
        }
        public void setDateCreated(DateTime value) {
            dateCreated = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateModified;
        public DateTime getDateModified() {
            return dateModified;
        }
        public void setDateModified(DateTime value) {
            dateModified = value;
        }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        private bool deleted;
        public bool getDeleted() {
            return deleted;
        }
        public void setDeleted(bool value) {
            deleted = value;
        }

        /// <summary>
        /// Value is type of resource.
        /// </summary>
        /// <value>Value is type of resource.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        private string _object;
        public string getObject() {
            return _object;
        }
        public void setObject(string value) {
            _object = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardOrder {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  cardId: ").Append(cardId).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  inventory: ").Append(inventory).Append("\n");
            sb.Append("  quantityOrdered: ").Append(quantityOrdered).Append("\n");
            sb.Append("  unitPrice: ").Append(unitPrice).Append("\n");
            sb.Append("  cancelledReason: ").Append(cancelledReason).Append("\n");
            sb.Append("  availabilityDate: ").Append(availabilityDate).Append("\n");
            sb.Append("  expectedAvailabilityDate: ").Append(expectedAvailabilityDate).Append("\n");
            sb.Append("  dateCreated: ").Append(dateCreated).Append("\n");
            sb.Append("  dateModified: ").Append(dateModified).Append("\n");
            sb.Append("  deleted: ").Append(deleted).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardOrder);
        }

        /// <summary>
        /// Returns true if CardOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CardOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.cardId == input.getCardId() ||
                    (this.cardId != null &&
                    this.cardId.Equals(input.getCardId()))
                ) && 
                (
                    this.status == input.getStatus() ||
                    this.status.Equals(input.getStatus())
                ) && 
                (
                    this.inventory == input.getInventory() ||
                    this.inventory.Equals(input.getInventory())
                ) && 
                (
                    this.quantityOrdered == input.getQuantityOrdered() ||
                    this.quantityOrdered.Equals(input.getQuantityOrdered())
                ) && 
                (
                    this.unitPrice == input.getUnitPrice() ||
                    this.unitPrice.Equals(input.getUnitPrice())
                ) && 
                (
                    this.cancelledReason == input.getCancelledReason() ||
                    (this.cancelledReason != null &&
                    this.cancelledReason.Equals(input.getCancelledReason()))
                ) && 
                (
                    this.availabilityDate == input.getAvailabilityDate() ||
                    (this.availabilityDate != null &&
                    this.availabilityDate.Equals(input.getAvailabilityDate()))
                ) && 
                (
                    this.expectedAvailabilityDate == input.getExpectedAvailabilityDate() ||
                    (this.expectedAvailabilityDate != null &&
                    this.expectedAvailabilityDate.Equals(input.getExpectedAvailabilityDate()))
                ) && 
                (
                    this.dateCreated == input.getDateCreated() ||
                    (this.dateCreated != null &&
                    this.dateCreated.Equals(input.getDateCreated()))
                ) && 
                (
                    this.dateModified == input.getDateModified() ||
                    (this.dateModified != null &&
                    this.dateModified.Equals(input.getDateModified()))
                ) && 
                (
                    this.deleted == input.getDeleted() ||
                    this.deleted.Equals(input.getDeleted())
                ) && 
                (
                    this._object == input.getObject() ||
                    (this._object != null &&
                    this._object.Equals(input.getObject()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.cardId != null)
                {
                    hashCode = (hashCode * 59) + this.cardId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.status.GetHashCode();
                hashCode = (hashCode * 59) + this.inventory.GetHashCode();
                hashCode = (hashCode * 59) + this.quantityOrdered.GetHashCode();
                hashCode = (hashCode * 59) + this.unitPrice.GetHashCode();
                if (this.cancelledReason != null)
                {
                    hashCode = (hashCode * 59) + this.cancelledReason.GetHashCode();
                }
                if (this.availabilityDate != null)
                {
                    hashCode = (hashCode * 59) + this.availabilityDate.GetHashCode();
                }
                if (this.expectedAvailabilityDate != null)
                {
                    hashCode = (hashCode * 59) + this.expectedAvailabilityDate.GetHashCode();
                }
                if (this.dateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.dateCreated.GetHashCode();
                }
                if (this.dateModified != null)
                {
                    hashCode = (hashCode * 59) + this.dateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.deleted.GetHashCode();
                if (this._object != null)
                {
                    hashCode = (hashCode * 59) + this._object.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^co_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // cardId (string) pattern
            Regex regexcardId = new Regex(@"^card_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexcardId.Match(this.cardId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for cardId, must match a pattern of " + regexcardId, new [] { "cardId" });
            }

            yield break;
        }
    }

}
