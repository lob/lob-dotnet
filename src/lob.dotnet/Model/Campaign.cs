/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Campaign
    /// </summary>
    [DataContract(Name = "campaign")]
    public partial class Campaign : IEquatable<Campaign>, IValidatableObject
    {
        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Campaign for value: campaign
            /// </summary>
            [EnumMember(Value = "campaign")]
            Campaign = 1
            

        }


        /// <summary>
        /// Value is resource type.
        /// </summary>
        /// <value>Value is resource type.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        public ObjectEnum Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Campaign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Campaign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Campaign" /> class.
        /// </summary>
        /// <param name="billingGroupId">Unique identifier prefixed with &#x60;bg_&#x60;..</param>
        /// <param name="name">Name of the campaign. (required).</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="scheduleType">scheduleType (required).</param>
        /// <param name="targetDeliveryDate">If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign..</param>
        /// <param name="sendDate">If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign..</param>
        /// <param name="cancelWindowCampaignMinutes">A window, in minutes, within which the campaign can be canceled..</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="useType">useType (required).</param>
        /// <param name="autoCancelIfNcoa">Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA. (required).</param>
        /// <param name="id">Unique identifier prefixed with &#x60;cmp_&#x60;. (required).</param>
        /// <param name="accountId">Account ID that this campaign is associated with..</param>
        /// <param name="isDraft">Whether or not the campaign is still a draft. (required) (default to true).</param>
        /// <param name="creatives">An array of creatives that have been associated with this campaign. (required).</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created. (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified. (required).</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="_object">Value is resource type. (required) (default to ObjectEnum.Campaign).</param>
        public Campaign(string billingGroupId = default(string), string name = default(string), string description = default(string), CmpScheduleType scheduleType = default(CmpScheduleType), DateTime? targetDeliveryDate = default(DateTime?), DateTime? sendDate = default(DateTime?), int? cancelWindowCampaignMinutes = default(int?), Dictionary<string, string> metadata = default(Dictionary<string, string>), CmpUseType useType = default(CmpUseType), bool autoCancelIfNcoa = default(bool), string id = default(string), string accountId = default(string), bool isDraft = true, List<CampaignCreative> creatives = default(List<CampaignCreative>), DateTime dateCreated = default(DateTime), DateTime dateModified = default(DateTime), bool deleted = default(bool), ObjectEnum _object = ObjectEnum.Campaign)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Campaign and cannot be null");
            }
            this.Name = name;
            // to ensure "scheduleType" is required (not null)
            if (scheduleType == null)
            {
                throw new ArgumentNullException("scheduleType is a required property for Campaign and cannot be null");
            }
            this.ScheduleType = scheduleType;
            // to ensure "useType" is required (not null)
            if (useType == null)
            {
                throw new ArgumentNullException("useType is a required property for Campaign and cannot be null");
            }
            this.UseType = useType;
            this.AutoCancelIfNcoa = autoCancelIfNcoa;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Campaign and cannot be null");
            }
            this.Id = id;
            this.IsDraft = isDraft;
            // to ensure "creatives" is required (not null)
            if (creatives == null)
            {
                throw new ArgumentNullException("creatives is a required property for Campaign and cannot be null");
            }
            this.Creatives = creatives;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            this.Object = _object;
            this.BillingGroupId = billingGroupId;
            this.Description = description;
            this.TargetDeliveryDate = targetDeliveryDate;
            this.SendDate = sendDate;
            this.CancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
            this.Metadata = metadata;
            this.AccountId = accountId;
            this.Deleted = deleted;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;bg_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;bg_&#x60;.</value>
        [DataMember(Name = "billing_group_id", EmitDefaultValue = false)]
        public string BillingGroupId { get; set; }

        /// <summary>
        /// Name of the campaign.
        /// </summary>
        /// <value>Name of the campaign.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name = "schedule_type", IsRequired = true, EmitDefaultValue = false)]
        public CmpScheduleType ScheduleType { get; set; }

        /// <summary>
        /// If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign.
        /// </summary>
        /// <value>If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign.</value>
        [DataMember(Name = "target_delivery_date", EmitDefaultValue = false)]
        public DateTime? TargetDeliveryDate { get; set; }

        /// <summary>
        /// If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign.
        /// </summary>
        /// <value>If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign.</value>
        [DataMember(Name = "send_date", EmitDefaultValue = false)]
        public DateTime? SendDate { get; set; }

        /// <summary>
        /// A window, in minutes, within which the campaign can be canceled.
        /// </summary>
        /// <value>A window, in minutes, within which the campaign can be canceled.</value>
        [DataMember(Name = "cancel_window_campaign_minutes", EmitDefaultValue = false)]
        public int? CancelWindowCampaignMinutes { get; set; }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets UseType
        /// </summary>
        [DataMember(Name = "use_type", IsRequired = true, EmitDefaultValue = false)]
        public CmpUseType UseType { get; set; }

        /// <summary>
        /// Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA.
        /// </summary>
        /// <value>Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA.</value>
        [DataMember(Name = "auto_cancel_if_ncoa", IsRequired = true, EmitDefaultValue = false)]
        public bool AutoCancelIfNcoa { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;cmp_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;cmp_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Account ID that this campaign is associated with.
        /// </summary>
        /// <value>Account ID that this campaign is associated with.</value>
        [DataMember(Name = "account_id", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Whether or not the campaign is still a draft.
        /// </summary>
        /// <value>Whether or not the campaign is still a draft.</value>
        [DataMember(Name = "is_draft", IsRequired = true, EmitDefaultValue = false)]
        public bool IsDraft { get; set; }

        /// <summary>
        /// An array of creatives that have been associated with this campaign.
        /// </summary>
        /// <value>An array of creatives that have been associated with this campaign.</value>
        [DataMember(Name = "creatives", IsRequired = true, EmitDefaultValue = false)]
        public List<CampaignCreative> Creatives { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = false)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Campaign {\n");
            sb.Append("  BillingGroupId: ").Append(BillingGroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  TargetDeliveryDate: ").Append(TargetDeliveryDate).Append("\n");
            sb.Append("  SendDate: ").Append(SendDate).Append("\n");
            sb.Append("  CancelWindowCampaignMinutes: ").Append(CancelWindowCampaignMinutes).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  UseType: ").Append(UseType).Append("\n");
            sb.Append("  AutoCancelIfNcoa: ").Append(AutoCancelIfNcoa).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IsDraft: ").Append(IsDraft).Append("\n");
            sb.Append("  Creatives: ").Append(Creatives).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Campaign);
        }

        /// <summary>
        /// Returns true if Campaign instances are equal
        /// </summary>
        /// <param name="input">Instance of Campaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Campaign input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BillingGroupId == input.BillingGroupId ||
                    (this.BillingGroupId != null &&
                    this.BillingGroupId.Equals(input.BillingGroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    (this.ScheduleType != null &&
                    this.ScheduleType.Equals(input.ScheduleType))
                ) && 
                (
                    this.TargetDeliveryDate == input.TargetDeliveryDate ||
                    (this.TargetDeliveryDate != null &&
                    this.TargetDeliveryDate.Equals(input.TargetDeliveryDate))
                ) && 
                (
                    this.SendDate == input.SendDate ||
                    (this.SendDate != null &&
                    this.SendDate.Equals(input.SendDate))
                ) && 
                (
                    this.CancelWindowCampaignMinutes == input.CancelWindowCampaignMinutes ||
                    (this.CancelWindowCampaignMinutes != null &&
                    this.CancelWindowCampaignMinutes.Equals(input.CancelWindowCampaignMinutes))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.UseType == input.UseType ||
                    (this.UseType != null &&
                    this.UseType.Equals(input.UseType))
                ) && 
                (
                    this.AutoCancelIfNcoa == input.AutoCancelIfNcoa ||
                    this.AutoCancelIfNcoa.Equals(input.AutoCancelIfNcoa)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.IsDraft == input.IsDraft ||
                    this.IsDraft.Equals(input.IsDraft)
                ) && 
                (
                    this.Creatives == input.Creatives ||
                    this.Creatives != null &&
                    input.Creatives != null &&
                    this.Creatives.SequenceEqual(input.Creatives)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.Object == input.Object ||
                    this.Object.Equals(input.Object)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingGroupId != null)
                {
                    hashCode = (hashCode * 59) + this.BillingGroupId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ScheduleType != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                }
                if (this.TargetDeliveryDate != null)
                {
                    hashCode = (hashCode * 59) + this.TargetDeliveryDate.GetHashCode();
                }
                if (this.SendDate != null)
                {
                    hashCode = (hashCode * 59) + this.SendDate.GetHashCode();
                }
                if (this.CancelWindowCampaignMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.CancelWindowCampaignMinutes.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.UseType != null)
                {
                    hashCode = (hashCode * 59) + this.UseType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoCancelIfNcoa.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDraft.GetHashCode();
                if (this.Creatives != null)
                {
                    hashCode = (hashCode * 59) + this.Creatives.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateModified != null)
                {
                    hashCode = (hashCode * 59) + this.DateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                hashCode = (hashCode * 59) + this.Object.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BillingGroupId (string) pattern
            Regex regexBillingGroupId = new Regex(@"^bg_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexBillingGroupId.Match(this.BillingGroupId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BillingGroupId, must match a pattern of " + regexBillingGroupId, new [] { "BillingGroupId" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^cmp_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}
