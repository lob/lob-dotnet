/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// BankAccountWritable
    /// </summary>
    [DataContract(Name = "bank_account_writable")]
    public partial class BankAccountWritable : IEquatable<BankAccountWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountWritable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public BankAccountWritable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountWritable" /> class.
        /// </summary>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="routingNumber">Must be a [valid US routing number](https://www.frbservices.org/index.html). (required).</param>
        /// <param name="accountNumber">accountNumber (required).</param>
        /// <param name="accountType">accountType (required).</param>
        /// <param name="signatory">The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the [Dashboard](https://dashboard.lob.com/#/login). (required).</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Must be a [valid US routing number](https://www.frbservices.org/index.html).
        /// </summary>
        /// <value>Must be a [valid US routing number](https://www.frbservices.org/index.html).</value>
        [DataMember(Name = "routing_number", IsRequired = true, EmitDefaultValue = false)]
        private string routingNumber;
        public string getRoutingNumber() {
            return routingNumber;
        }
        public void setRoutingNumber(string value) {
            routingNumber = value;
        }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = false)]
        private string accountNumber;
        public string getAccountNumber() {
            return accountNumber;
        }
        public void setAccountNumber(string value) {
            accountNumber = value;
        }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "account_type", IsRequired = true, EmitDefaultValue = false)]
        private BankTypeEnum accountType;
        public BankTypeEnum getAccountType() {
            return accountType;
        }
        public void setAccountType(BankTypeEnum value) {
            accountType = value;
        }

        /// <summary>
        /// The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the [Dashboard](https://dashboard.lob.com/#/login).
        /// </summary>
        /// <value>The signatory associated with your account. This name will be printed on checks created with this bank account. If you prefer to use a custom signature image on your checks instead, please create your bank account from the [Dashboard](https://dashboard.lob.com/#/login).</value>
        [DataMember(Name = "signatory", IsRequired = true, EmitDefaultValue = false)]
        private string signatory;
        public string getSignatory() {
            return signatory;
        }
        public void setSignatory(string value) {
            signatory = value;
        }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        private Dictionary<string, string> metadata;
        public Dictionary<string, string> getMetadata() {
            return metadata;
        }
        public void setMetadata(Dictionary<string, string> value) {
            metadata = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankAccountWritable {\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  routingNumber: ").Append(routingNumber).Append("\n");
            sb.Append("  accountNumber: ").Append(accountNumber).Append("\n");
            sb.Append("  accountType: ").Append(accountType).Append("\n");
            sb.Append("  signatory: ").Append(signatory).Append("\n");
            sb.Append("  metadata: ").Append(metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountWritable);
        }

        /// <summary>
        /// Returns true if BankAccountWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.routingNumber == input.getRoutingNumber() ||
                    (this.routingNumber != null &&
                    this.routingNumber.Equals(input.getRoutingNumber()))
                ) && 
                (
                    this.accountNumber == input.getAccountNumber() ||
                    (this.accountNumber != null &&
                    this.accountNumber.Equals(input.getAccountNumber()))
                ) && 
                (
                    this.accountType == input.getAccountType() ||
                    (this.accountType != null &&
                    this.accountType.Equals(input.getAccountType()))
                ) && 
                (
                    this.signatory == input.getSignatory() ||
                    (this.signatory != null &&
                    this.signatory.Equals(input.getSignatory()))
                ) && 
                (
                    this.metadata == input.getMetadata() ||
                    this.metadata != null &&
                    input.getMetadata() != null &&
                    this.metadata.SequenceEqual(input.getMetadata())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                if (this.routingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.routingNumber.GetHashCode();
                }
                if (this.accountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.accountNumber.GetHashCode();
                }
                if (this.accountType != null)
                {
                    hashCode = (hashCode * 59) + this.accountType.GetHashCode();
                }
                if (this.signatory != null)
                {
                    hashCode = (hashCode * 59) + this.signatory.GetHashCode();
                }
                if (this.metadata != null)
                {
                    hashCode = (hashCode * 59) + this.metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            // routingNumber (string) maxLength
            if (this.routingNumber != null && this.routingNumber.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for routingNumber, length must be less than 9.", new [] { "routingNumber" });
            }

            // routingNumber (string) minLength
            if (this.routingNumber != null && this.routingNumber.Length < 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for routingNumber, length must be greater than 9.", new [] { "routingNumber" });
            }

            // accountNumber (string) maxLength
            if (this.accountNumber != null && this.accountNumber.Length > 17)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for accountNumber, length must be less than 17.", new [] { "accountNumber" });
            }

            // signatory (string) maxLength
            if (this.signatory != null && this.signatory.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for signatory, length must be less than 30.", new [] { "signatory" });
            }

            yield break;
        }
    }

}
