/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// ReturnEnvelope
    /// </summary>
    [DataContract(Name = "return_envelope")]
    public partial class ReturnEnvelope : IEquatable<ReturnEnvelope>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnEnvelope" /> class.
        /// </summary>
        /// <param name="id">The unique ID of the Return Envelope.</param>
        /// <param name="alias">A quick reference name for the Return Envelope.</param>
        /// <param name="url">The url of the  return envelope.</param>
        /// <param name="_object">_object.</param>

        /// <summary>
        /// The unique ID of the Return Envelope
        /// </summary>
        /// <value>The unique ID of the Return Envelope</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// A quick reference name for the Return Envelope
        /// </summary>
        /// <value>A quick reference name for the Return Envelope</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        private string alias;
        public string getAlias() {
            return alias;
        }
        public void setAlias(string value) {
            alias = value;
        }

        /// <summary>
        /// The url of the  return envelope
        /// </summary>
        /// <value>The url of the  return envelope</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        private string url;
        public string getUrl() {
            return url;
        }
        public void setUrl(string value) {
            url = value;
        }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        private string _object;
        public string getObject() {
            return _object;
        }
        public void setObject(string value) {
            _object = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnEnvelope {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  alias: ").Append(alias).Append("\n");
            sb.Append("  url: ").Append(url).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnEnvelope);
        }

        /// <summary>
        /// Returns true if ReturnEnvelope instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnEnvelope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnEnvelope input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.alias == input.getAlias() ||
                    (this.alias != null &&
                    this.alias.Equals(input.getAlias()))
                ) && 
                (
                    this.url == input.getUrl() ||
                    (this.url != null &&
                    this.url.Equals(input.getUrl()))
                ) && 
                (
                    this._object == input.getObject() ||
                    (this._object != null &&
                    this._object.Equals(input.getObject()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.alias != null)
                {
                    hashCode = (hashCode * 59) + this.alias.GetHashCode();
                }
                if (this.url != null)
                {
                    hashCode = (hashCode * 59) + this.url.GetHashCode();
                }
                if (this._object != null)
                {
                    hashCode = (hashCode * 59) + this._object.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
