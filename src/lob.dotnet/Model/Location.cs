/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract(Name = "location")]
    public partial class Location : IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Location() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="latitude">A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;longitude&#x60; to pinpoint locations on a map.  (required).</param>
        /// <param name="longitude">A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;latitude&#x60; to pinpoint locations on a map.  (required).</param>

        /// <summary>
        /// A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;longitude&#x60; to pinpoint locations on a map. 
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;longitude&#x60; to pinpoint locations on a map. </value>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        private float? latitude;
        public float? getLatitude() {
            return latitude;
        }
        public void setLatitude(float? value) {
            latitude = value;
        }

        /// <summary>
        /// A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;latitude&#x60; to pinpoint locations on a map. 
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be input with &#x60;latitude&#x60; to pinpoint locations on a map. </value>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        private float? longitude;
        public float? getLongitude() {
            return longitude;
        }
        public void setLongitude(float? value) {
            longitude = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  latitude: ").Append(latitude).Append("\n");
            sb.Append("  longitude: ").Append(longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.latitude == input.getLatitude() ||
                    (this.latitude != null &&
                    this.latitude.Equals(input.getLatitude()))
                ) && 
                (
                    this.longitude == input.getLongitude() ||
                    (this.longitude != null &&
                    this.longitude.Equals(input.getLongitude()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.latitude != null)
                {
                    hashCode = (hashCode * 59) + this.latitude.GetHashCode();
                }
                if (this.longitude != null)
                {
                    hashCode = (hashCode * 59) + this.longitude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // latitude (float?) maximum
            if (this.latitude > (float?)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for latitude, must be a value less than or equal to 90.", new [] { "latitude" });
            }

            // latitude (float?) minimum
            if (this.latitude < (float?)-90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for latitude, must be a value greater than or equal to -90.", new [] { "latitude" });
            }

            // longitude (float?) maximum
            if (this.longitude > (float?)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for longitude, must be a value less than or equal to 180.", new [] { "longitude" });
            }

            // longitude (float?) minimum
            if (this.longitude < (float?)-180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for longitude, must be a value greater than or equal to -180.", new [] { "longitude" });
            }

            yield break;
        }
    }

}
