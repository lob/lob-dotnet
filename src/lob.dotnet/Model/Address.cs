/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "address")]
    public partial class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Address for value: address
            /// </summary>
            [EnumMember(Value = "address")]
            Address = 1
            

        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        private ObjectEnum? _object;
        public ObjectEnum? getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;adr_&#x60;..</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="name">name associated with address.</param>
        /// <param name="company">Either &#x60;name&#x60; or &#x60;company&#x60; is required, you may also add both..</param>
        /// <param name="phone">Must be no longer than 40 characters..</param>
        /// <param name="email">Must be no longer than 100 characters..</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressCity">addressCity.</param>
        /// <param name="addressState">2 letter state short-name code.</param>
        /// <param name="addressZip">Must follow the ZIP format of &#x60;12345&#x60; or ZIP+4 format of &#x60;12345-1234&#x60;. .</param>
        /// <param name="addressCountry">addressCountry.</param>
        /// <param name="_object">_object (default to ObjectEnum.Address).</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created..</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified..</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="recipientMoved">Only returned for accounts on certain &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/editions\&quot;&gt;Print &amp;amp; Mail Editions&lt;/a&gt;. Value is &#x60;true&#x60; if the address was altered because the recipient filed for a &lt;a href&#x3D;\&quot;#ncoa\&quot;&gt;National Change of Address (NCOA)&lt;/a&gt;, &#x60;false&#x60; if the NCOA check was run but no altered address was found, and &#x60;null&#x60; if the NCOA check was not run. The NCOA check does not happen for non-US addresses, for non-deliverable US addresses, or for addresses created before the NCOA feature was added to your account. .</param>

        /// <summary>
        /// Unique identifier prefixed with &#x60;adr_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;adr_&#x60;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// name associated with address
        /// </summary>
        /// <value>name associated with address</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        private string name;
        public string getName() {
            return name;
        }
        public void setName(string value) {
            name = value;
        }

        /// <summary>
        /// Either &#x60;name&#x60; or &#x60;company&#x60; is required, you may also add both.
        /// </summary>
        /// <value>Either &#x60;name&#x60; or &#x60;company&#x60; is required, you may also add both.</value>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        private string company;
        public string getCompany() {
            return company;
        }
        public void setCompany(string value) {
            company = value;
        }

        /// <summary>
        /// Must be no longer than 40 characters.
        /// </summary>
        /// <value>Must be no longer than 40 characters.</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        private string phone;
        public string getPhone() {
            return phone;
        }
        public void setPhone(string value) {
            phone = value;
        }

        /// <summary>
        /// Must be no longer than 100 characters.
        /// </summary>
        /// <value>Must be no longer than 100 characters.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        private string email;
        public string getEmail() {
            return email;
        }
        public void setEmail(string value) {
            email = value;
        }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        private Dictionary<string, string> metadata;
        public Dictionary<string, string> getMetadata() {
            return metadata;
        }
        public void setMetadata(Dictionary<string, string> value) {
            metadata = value;
        }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "address_line1", EmitDefaultValue = false)]
        private string addressLine1;
        public string getAddressLine1() {
            return addressLine1;
        }
        public void setAddressLine1(string value) {
            addressLine1 = value;
        }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "address_line2", EmitDefaultValue = true)]
        private string addressLine2;
        public string getAddressLine2() {
            return addressLine2;
        }
        public void setAddressLine2(string value) {
            addressLine2 = value;
        }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name = "address_city", EmitDefaultValue = false)]
        private string addressCity;
        public string getAddressCity() {
            return addressCity;
        }
        public void setAddressCity(string value) {
            addressCity = value;
        }

        /// <summary>
        /// 2 letter state short-name code
        /// </summary>
        /// <value>2 letter state short-name code</value>
        [DataMember(Name = "address_state", EmitDefaultValue = false)]
        private string addressState;
        public string getAddressState() {
            return addressState;
        }
        public void setAddressState(string value) {
            addressState = value;
        }

        /// <summary>
        /// Must follow the ZIP format of &#x60;12345&#x60; or ZIP+4 format of &#x60;12345-1234&#x60;. 
        /// </summary>
        /// <value>Must follow the ZIP format of &#x60;12345&#x60; or ZIP+4 format of &#x60;12345-1234&#x60;. </value>
        [DataMember(Name = "address_zip", EmitDefaultValue = false)]
        private string addressZip;
        public string getAddressZip() {
            return addressZip;
        }
        public void setAddressZip(string value) {
            addressZip = value;
        }

        /// <summary>
        /// Gets or Sets AddressCountry
        /// </summary>
        [DataMember(Name = "address_country", EmitDefaultValue = false)]
        private CountryExtendedExpanded addressCountry;
        public CountryExtendedExpanded getAddressCountry() {
            return addressCountry;
        }
        public void setAddressCountry(CountryExtendedExpanded value) {
            addressCountry = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        private DateTime dateCreated;
        public DateTime getDateCreated() {
            return dateCreated;
        }
        public void setDateCreated(DateTime value) {
            dateCreated = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", EmitDefaultValue = false)]
        private DateTime dateModified;
        public DateTime getDateModified() {
            return dateModified;
        }
        public void setDateModified(DateTime value) {
            dateModified = value;
        }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        private bool deleted;
        public bool getDeleted() {
            return deleted;
        }
        public void setDeleted(bool value) {
            deleted = value;
        }

        /// <summary>
        /// Only returned for accounts on certain &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/editions\&quot;&gt;Print &amp;amp; Mail Editions&lt;/a&gt;. Value is &#x60;true&#x60; if the address was altered because the recipient filed for a &lt;a href&#x3D;\&quot;#ncoa\&quot;&gt;National Change of Address (NCOA)&lt;/a&gt;, &#x60;false&#x60; if the NCOA check was run but no altered address was found, and &#x60;null&#x60; if the NCOA check was not run. The NCOA check does not happen for non-US addresses, for non-deliverable US addresses, or for addresses created before the NCOA feature was added to your account. 
        /// </summary>
        /// <value>Only returned for accounts on certain &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/editions\&quot;&gt;Print &amp;amp; Mail Editions&lt;/a&gt;. Value is &#x60;true&#x60; if the address was altered because the recipient filed for a &lt;a href&#x3D;\&quot;#ncoa\&quot;&gt;National Change of Address (NCOA)&lt;/a&gt;, &#x60;false&#x60; if the NCOA check was run but no altered address was found, and &#x60;null&#x60; if the NCOA check was not run. The NCOA check does not happen for non-US addresses, for non-deliverable US addresses, or for addresses created before the NCOA feature was added to your account. </value>
        [DataMember(Name = "recipient_moved", EmitDefaultValue = true)]
        private bool? recipientMoved;
        public bool? getRecipientMoved() {
            return recipientMoved;
        }
        public void setRecipientMoved(bool? value) {
            recipientMoved = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  company: ").Append(company).Append("\n");
            sb.Append("  phone: ").Append(phone).Append("\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("  metadata: ").Append(metadata).Append("\n");
            sb.Append("  addressLine1: ").Append(addressLine1).Append("\n");
            sb.Append("  addressLine2: ").Append(addressLine2).Append("\n");
            sb.Append("  addressCity: ").Append(addressCity).Append("\n");
            sb.Append("  addressState: ").Append(addressState).Append("\n");
            sb.Append("  addressZip: ").Append(addressZip).Append("\n");
            sb.Append("  addressCountry: ").Append(addressCountry).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  dateCreated: ").Append(dateCreated).Append("\n");
            sb.Append("  dateModified: ").Append(dateModified).Append("\n");
            sb.Append("  deleted: ").Append(deleted).Append("\n");
            sb.Append("  recipientMoved: ").Append(recipientMoved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.name == input.getName() ||
                    (this.name != null &&
                    this.name.Equals(input.getName()))
                ) && 
                (
                    this.company == input.getCompany() ||
                    (this.company != null &&
                    this.company.Equals(input.getCompany()))
                ) && 
                (
                    this.phone == input.getPhone() ||
                    (this.phone != null &&
                    this.phone.Equals(input.getPhone()))
                ) && 
                (
                    this.email == input.getEmail() ||
                    (this.email != null &&
                    this.email.Equals(input.getEmail()))
                ) && 
                (
                    this.metadata == input.getMetadata() ||
                    this.metadata != null &&
                    input.getMetadata() != null &&
                    this.metadata.SequenceEqual(input.getMetadata())
                ) && 
                (
                    this.addressLine1 == input.getAddressLine1() ||
                    (this.addressLine1 != null &&
                    this.addressLine1.Equals(input.getAddressLine1()))
                ) && 
                (
                    this.addressLine2 == input.getAddressLine2() ||
                    (this.addressLine2 != null &&
                    this.addressLine2.Equals(input.getAddressLine2()))
                ) && 
                (
                    this.addressCity == input.getAddressCity() ||
                    (this.addressCity != null &&
                    this.addressCity.Equals(input.getAddressCity()))
                ) && 
                (
                    this.addressState == input.getAddressState() ||
                    (this.addressState != null &&
                    this.addressState.Equals(input.getAddressState()))
                ) && 
                (
                    this.addressZip == input.getAddressZip() ||
                    (this.addressZip != null &&
                    this.addressZip.Equals(input.getAddressZip()))
                ) && 
                (
                    this.addressCountry == input.getAddressCountry() ||
                    (this.addressCountry != null &&
                    this.addressCountry.Equals(input.getAddressCountry()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                ) && 
                (
                    this.dateCreated == input.getDateCreated() ||
                    (this.dateCreated != null &&
                    this.dateCreated.Equals(input.getDateCreated()))
                ) && 
                (
                    this.dateModified == input.getDateModified() ||
                    (this.dateModified != null &&
                    this.dateModified.Equals(input.getDateModified()))
                ) && 
                (
                    this.deleted == input.getDeleted() ||
                    this.deleted.Equals(input.getDeleted())
                ) && 
                (
                    this.recipientMoved == input.getRecipientMoved() ||
                    (this.recipientMoved != null &&
                    this.recipientMoved.Equals(input.getRecipientMoved()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                if (this.name != null)
                {
                    hashCode = (hashCode * 59) + this.name.GetHashCode();
                }
                if (this.company != null)
                {
                    hashCode = (hashCode * 59) + this.company.GetHashCode();
                }
                if (this.phone != null)
                {
                    hashCode = (hashCode * 59) + this.phone.GetHashCode();
                }
                if (this.email != null)
                {
                    hashCode = (hashCode * 59) + this.email.GetHashCode();
                }
                if (this.metadata != null)
                {
                    hashCode = (hashCode * 59) + this.metadata.GetHashCode();
                }
                if (this.addressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.addressLine1.GetHashCode();
                }
                if (this.addressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.addressLine2.GetHashCode();
                }
                if (this.addressCity != null)
                {
                    hashCode = (hashCode * 59) + this.addressCity.GetHashCode();
                }
                if (this.addressState != null)
                {
                    hashCode = (hashCode * 59) + this.addressState.GetHashCode();
                }
                if (this.addressZip != null)
                {
                    hashCode = (hashCode * 59) + this.addressZip.GetHashCode();
                }
                if (this.addressCountry != null)
                {
                    hashCode = (hashCode * 59) + this.addressCountry.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                if (this.dateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.dateCreated.GetHashCode();
                }
                if (this.dateModified != null)
                {
                    hashCode = (hashCode * 59) + this.dateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.deleted.GetHashCode();
                if (this.recipientMoved != null)
                {
                    hashCode = (hashCode * 59) + this.recipientMoved.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^adr_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            // name (string) maxLength
            if (this.name != null && this.name.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for name, length must be less than 40.", new [] { "name" });
            }

            // company (string) maxLength
            if (this.company != null && this.company.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for company, length must be less than 40.", new [] { "company" });
            }

            // phone (string) maxLength
            if (this.phone != null && this.phone.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for phone, length must be less than 40.", new [] { "phone" });
            }

            // email (string) maxLength
            if (this.email != null && this.email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for email, length must be less than 100.", new [] { "email" });
            }

            // addressLine1 (string) maxLength
            if (this.addressLine1 != null && this.addressLine1.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for addressLine1, length must be less than 64.", new [] { "addressLine1" });
            }

            // addressLine2 (string) maxLength
            if (this.addressLine2 != null && this.addressLine2.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for addressLine2, length must be less than 64.", new [] { "addressLine2" });
            }

            // addressCity (string) maxLength
            if (this.addressCity != null && this.addressCity.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for addressCity, length must be less than 200.", new [] { "addressCity" });
            }

            // addressState (string) pattern
            Regex regexaddressState = new Regex(@"^[a-zA-Z]{2}$", RegexOptions.CultureInvariant);
            if (false == regexaddressState.Match(this.addressState).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for addressState, must match a pattern of " + regexaddressState, new [] { "addressState" });
            }

            // addressZip (string) pattern
            Regex regexaddressZip = new Regex(@"^\\d{5}(-\\d{4})?$", RegexOptions.CultureInvariant);
            if (false == regexaddressZip.Match(this.addressZip).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for addressZip, must match a pattern of " + regexaddressZip, new [] { "addressZip" });
            }

            yield break;
        }
    }

}
