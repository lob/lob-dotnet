/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract(Name = "card")]
    public partial class Card : IEquatable<Card>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 1,
            

            /// <summary>
            /// Enum Rendered for value: rendered
            /// </summary>
            [EnumMember(Value = "rendered")]
            Rendered = 2
            

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        private StatusEnum? status;
        public StatusEnum? getStatus() {
            return status;
        }
        public void setStatus(StatusEnum value) {
            status = value;
        }
        /// <summary>
        /// The orientation of the card.
        /// </summary>
        /// <value>The orientation of the card.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            /// <summary>
            /// Enum Horizontal for value: horizontal
            /// </summary>
            [EnumMember(Value = "horizontal")]
            Horizontal = 1,
            

            /// <summary>
            /// Enum Vertical for value: vertical
            /// </summary>
            [EnumMember(Value = "vertical")]
            Vertical = 2
            

        }


        /// <summary>
        /// The orientation of the card.
        /// </summary>
        /// <value>The orientation of the card.</value>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        private OrientationEnum? orientation;
        public OrientationEnum? getOrientation() {
            return orientation;
        }
        public void setOrientation(OrientationEnum value) {
            orientation = value;
        }
        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 1
            

        }


        /// <summary>
        /// object
        /// </summary>
        /// <value>object</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        private ObjectEnum _object;
        public ObjectEnum getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// The size of the card
        /// </summary>
        /// <value>The size of the card</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _3375x2125 for value: 3.375x2.125
            /// </summary>
            [EnumMember(Value = "3.375x2.125")]
            _3375x2125 = 1,
            

            /// <summary>
            /// Enum _2125x3375 for value: 2.125x3.375
            /// </summary>
            [EnumMember(Value = "2.125x3.375")]
            _2125x3375 = 2
            

        }


        /// <summary>
        /// The size of the card
        /// </summary>
        /// <value>The size of the card</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = false)]
        private SizeEnum size;
        public SizeEnum getSize() {
            return size;
        }
        public void setSize(SizeEnum value) {
            size = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Card() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;card_&#x60;. (required).</param>
        /// <param name="url">The signed link for the card. (required).</param>
        /// <param name="autoReorder">True if the cards should be auto-reordered. (required) (default to false).</param>
        /// <param name="reorderQuantity">The number of cards to be reordered. Only present when auto_reorder is True..</param>
        /// <param name="rawUrl">The raw URL of the card..</param>
        /// <param name="frontOriginalUrl">The original URL of the front template..</param>
        /// <param name="backOriginalUrl">The original URL of the back template..</param>
        /// <param name="thumbnails">thumbnails (required).</param>
        /// <param name="availableQuantity">The available quantity of cards. (required) (default to 0).</param>
        /// <param name="pendingQuantity">The pending quantity of cards. (required) (default to 0).</param>
        /// <param name="status">status.</param>
        /// <param name="orientation">The orientation of the card. (default to OrientationEnum.Horizontal).</param>
        /// <param name="thresholdAmount">The threshold amount of the card (default to 0).</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the resource was created. (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the resource was last modified. (required).</param>
        /// <param name="deleted">Only returned if the resource has been successfully deleted..</param>
        /// <param name="_object">object (required) (default to ObjectEnum.Card).</param>
        /// <param name="description">Description of the card..</param>
        /// <param name="size">The size of the card (required) (default to SizeEnum._2125x3375).</param>

        /// <summary>
        /// Unique identifier prefixed with &#x60;card_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;card_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// The signed link for the card.
        /// </summary>
        /// <value>The signed link for the card.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        private string url;
        public string getUrl() {
            return url;
        }
        public void setUrl(string value) {
            url = value;
        }

        /// <summary>
        /// True if the cards should be auto-reordered.
        /// </summary>
        /// <value>True if the cards should be auto-reordered.</value>
        [DataMember(Name = "auto_reorder", IsRequired = true, EmitDefaultValue = true)]
        private bool autoReorder;
        public bool getAutoReorder() {
            return autoReorder;
        }
        public void setAutoReorder(bool value) {
            autoReorder = value;
        }

        /// <summary>
        /// The number of cards to be reordered. Only present when auto_reorder is True.
        /// </summary>
        /// <value>The number of cards to be reordered. Only present when auto_reorder is True.</value>
        [DataMember(Name = "reorder_quantity", EmitDefaultValue = true)]
        private int? reorderQuantity;
        public int? getReorderQuantity() {
            return reorderQuantity;
        }
        public void setReorderQuantity(int? value) {
            reorderQuantity = value;
        }

        /// <summary>
        /// The raw URL of the card.
        /// </summary>
        /// <value>The raw URL of the card.</value>
        [DataMember(Name = "raw_url", EmitDefaultValue = false)]
        private string rawUrl;
        public string getRawUrl() {
            return rawUrl;
        }
        public void setRawUrl(string value) {
            rawUrl = value;
        }

        /// <summary>
        /// The original URL of the front template.
        /// </summary>
        /// <value>The original URL of the front template.</value>
        [DataMember(Name = "front_original_url", EmitDefaultValue = false)]
        private string frontOriginalUrl;
        public string getFrontOriginalUrl() {
            return frontOriginalUrl;
        }
        public void setFrontOriginalUrl(string value) {
            frontOriginalUrl = value;
        }

        /// <summary>
        /// The original URL of the back template.
        /// </summary>
        /// <value>The original URL of the back template.</value>
        [DataMember(Name = "back_original_url", EmitDefaultValue = false)]
        private string backOriginalUrl;
        public string getBackOriginalUrl() {
            return backOriginalUrl;
        }
        public void setBackOriginalUrl(string value) {
            backOriginalUrl = value;
        }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", IsRequired = true, EmitDefaultValue = false)]
        private List<Thumbnail> thumbnails;
        public List<Thumbnail> getThumbnails() {
            return thumbnails;
        }
        public void setThumbnails(List<Thumbnail> value) {
            thumbnails = value;
        }

        /// <summary>
        /// The available quantity of cards.
        /// </summary>
        /// <value>The available quantity of cards.</value>
        [DataMember(Name = "available_quantity", IsRequired = true, EmitDefaultValue = false)]
        private int availableQuantity;
        public int getAvailableQuantity() {
            return availableQuantity;
        }
        public void setAvailableQuantity(int value) {
            availableQuantity = value;
        }

        /// <summary>
        /// The pending quantity of cards.
        /// </summary>
        /// <value>The pending quantity of cards.</value>
        [DataMember(Name = "pending_quantity", IsRequired = true, EmitDefaultValue = false)]
        private int pendingQuantity;
        public int getPendingQuantity() {
            return pendingQuantity;
        }
        public void setPendingQuantity(int value) {
            pendingQuantity = value;
        }

        /// <summary>
        /// The threshold amount of the card
        /// </summary>
        /// <value>The threshold amount of the card</value>
        [DataMember(Name = "threshold_amount", EmitDefaultValue = false)]
        private int thresholdAmount;
        public int getThresholdAmount() {
            return thresholdAmount;
        }
        public void setThresholdAmount(int value) {
            thresholdAmount = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was created.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was created.</value>
        [DataMember(Name = "date_created", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateCreated;
        public DateTime getDateCreated() {
            return dateCreated;
        }
        public void setDateCreated(DateTime value) {
            dateCreated = value;
        }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the resource was last modified.
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the resource was last modified.</value>
        [DataMember(Name = "date_modified", IsRequired = true, EmitDefaultValue = false)]
        private DateTime dateModified;
        public DateTime getDateModified() {
            return dateModified;
        }
        public void setDateModified(DateTime value) {
            dateModified = value;
        }

        /// <summary>
        /// Only returned if the resource has been successfully deleted.
        /// </summary>
        /// <value>Only returned if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        private bool deleted;
        public bool getDeleted() {
            return deleted;
        }
        public void setDeleted(bool value) {
            deleted = value;
        }

        /// <summary>
        /// Description of the card.
        /// </summary>
        /// <value>Description of the card.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  url: ").Append(url).Append("\n");
            sb.Append("  autoReorder: ").Append(autoReorder).Append("\n");
            sb.Append("  reorderQuantity: ").Append(reorderQuantity).Append("\n");
            sb.Append("  rawUrl: ").Append(rawUrl).Append("\n");
            sb.Append("  frontOriginalUrl: ").Append(frontOriginalUrl).Append("\n");
            sb.Append("  backOriginalUrl: ").Append(backOriginalUrl).Append("\n");
            sb.Append("  thumbnails: ").Append(thumbnails).Append("\n");
            sb.Append("  availableQuantity: ").Append(availableQuantity).Append("\n");
            sb.Append("  pendingQuantity: ").Append(pendingQuantity).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  orientation: ").Append(orientation).Append("\n");
            sb.Append("  thresholdAmount: ").Append(thresholdAmount).Append("\n");
            sb.Append("  dateCreated: ").Append(dateCreated).Append("\n");
            sb.Append("  dateModified: ").Append(dateModified).Append("\n");
            sb.Append("  deleted: ").Append(deleted).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  size: ").Append(size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="input">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.url == input.getUrl() ||
                    (this.url != null &&
                    this.url.Equals(input.getUrl()))
                ) && 
                (
                    this.autoReorder == input.getAutoReorder() ||
                    this.autoReorder.Equals(input.getAutoReorder())
                ) && 
                (
                    this.reorderQuantity == input.getReorderQuantity() ||
                    (this.reorderQuantity != null &&
                    this.reorderQuantity.Equals(input.getReorderQuantity()))
                ) && 
                (
                    this.rawUrl == input.getRawUrl() ||
                    (this.rawUrl != null &&
                    this.rawUrl.Equals(input.getRawUrl()))
                ) && 
                (
                    this.frontOriginalUrl == input.getFrontOriginalUrl() ||
                    (this.frontOriginalUrl != null &&
                    this.frontOriginalUrl.Equals(input.getFrontOriginalUrl()))
                ) && 
                (
                    this.backOriginalUrl == input.getBackOriginalUrl() ||
                    (this.backOriginalUrl != null &&
                    this.backOriginalUrl.Equals(input.getBackOriginalUrl()))
                ) && 
                (
                    this.thumbnails == input.getThumbnails() ||
                    this.thumbnails != null &&
                    input.getThumbnails() != null &&
                    this.thumbnails.SequenceEqual(input.getThumbnails())
                ) && 
                (
                    this.availableQuantity == input.getAvailableQuantity() ||
                    this.availableQuantity.Equals(input.getAvailableQuantity())
                ) && 
                (
                    this.pendingQuantity == input.getPendingQuantity() ||
                    this.pendingQuantity.Equals(input.getPendingQuantity())
                ) && 
                (
                    this.status == input.getStatus() ||
                    this.status.Equals(input.getStatus())
                ) && 
                (
                    this.orientation == input.getOrientation() ||
                    this.orientation.Equals(input.getOrientation())
                ) && 
                (
                    this.thresholdAmount == input.getThresholdAmount() ||
                    this.thresholdAmount.Equals(input.getThresholdAmount())
                ) && 
                (
                    this.dateCreated == input.getDateCreated() ||
                    (this.dateCreated != null &&
                    this.dateCreated.Equals(input.getDateCreated()))
                ) && 
                (
                    this.dateModified == input.getDateModified() ||
                    (this.dateModified != null &&
                    this.dateModified.Equals(input.getDateModified()))
                ) && 
                (
                    this.deleted == input.getDeleted() ||
                    this.deleted.Equals(input.getDeleted())
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                ) && 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.size == input.getSize() ||
                    this.size.Equals(input.getSize())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.url != null)
                {
                    hashCode = (hashCode * 59) + this.url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.autoReorder.GetHashCode();
                if (this.reorderQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.reorderQuantity.GetHashCode();
                }
                if (this.rawUrl != null)
                {
                    hashCode = (hashCode * 59) + this.rawUrl.GetHashCode();
                }
                if (this.frontOriginalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.frontOriginalUrl.GetHashCode();
                }
                if (this.backOriginalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.backOriginalUrl.GetHashCode();
                }
                if (this.thumbnails != null)
                {
                    hashCode = (hashCode * 59) + this.thumbnails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.availableQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.pendingQuantity.GetHashCode();
                hashCode = (hashCode * 59) + this.status.GetHashCode();
                hashCode = (hashCode * 59) + this.orientation.GetHashCode();
                hashCode = (hashCode * 59) + this.thresholdAmount.GetHashCode();
                if (this.dateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.dateCreated.GetHashCode();
                }
                if (this.dateModified != null)
                {
                    hashCode = (hashCode * 59) + this.dateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.deleted.GetHashCode();
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^card_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // url (string) maxLength
            if (this.url != null && this.url.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for url, length must be less than 2083.", new [] { "url" });
            }

            // url (string) minLength
            if (this.url != null && this.url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for url, length must be greater than 1.", new [] { "url" });
            }

            // rawUrl (string) maxLength
            if (this.rawUrl != null && this.rawUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for rawUrl, length must be less than 2083.", new [] { "rawUrl" });
            }

            // rawUrl (string) minLength
            if (this.rawUrl != null && this.rawUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for rawUrl, length must be greater than 1.", new [] { "rawUrl" });
            }

            // frontOriginalUrl (string) maxLength
            if (this.frontOriginalUrl != null && this.frontOriginalUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for frontOriginalUrl, length must be less than 2083.", new [] { "frontOriginalUrl" });
            }

            // frontOriginalUrl (string) minLength
            if (this.frontOriginalUrl != null && this.frontOriginalUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for frontOriginalUrl, length must be greater than 1.", new [] { "frontOriginalUrl" });
            }

            // backOriginalUrl (string) maxLength
            if (this.backOriginalUrl != null && this.backOriginalUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for backOriginalUrl, length must be less than 2083.", new [] { "backOriginalUrl" });
            }

            // backOriginalUrl (string) minLength
            if (this.backOriginalUrl != null && this.backOriginalUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for backOriginalUrl, length must be greater than 1.", new [] { "backOriginalUrl" });
            }

            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            yield break;
        }
    }

}
