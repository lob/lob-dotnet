/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// CreativeWritable
    /// </summary>
    [DataContract(Name = "creative_writable")]
    public partial class CreativeWritable : IEquatable<CreativeWritable>, IValidatableObject
    {
        /// <summary>
        /// Mailpiece type for the creative
        /// </summary>
        /// <value>Mailpiece type for the creative</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum Letter for value: letter
            /// </summary>
            [EnumMember(Value = "letter")]
            Letter = 1,
            

            /// <summary>
            /// Enum Postcard for value: postcard
            /// </summary>
            [EnumMember(Value = "postcard")]
            Postcard = 2
            

        }


        /// <summary>
        /// Mailpiece type for the creative
        /// </summary>
        /// <value>Mailpiece type for the creative</value>
        [DataMember(Name = "resource_type", IsRequired = true, EmitDefaultValue = false)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreativeWritable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreativeWritable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreativeWritable" /> class.
        /// </summary>
        /// <param name="from">Must either be an address ID or an inline object with correct address parameters. (required).</param>
        /// <param name="description">An internal description that identifies this resource. Must be no longer than 255 characters. .</param>
        /// <param name="metadata">Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information..</param>
        /// <param name="resourceType">Mailpiece type for the creative (required).</param>
        /// <param name="campaignId">Unique identifier prefixed with &#x60;cmp_&#x60;. (required).</param>
        /// <param name="details">Either PostcardDetailsWritable or LetterDetailsWritable.</param>
        /// <param name="file">PDF file containing the letter&#39;s formatting. Do not include for resource_type &#x3D; postcard..</param>
        /// <param name="front">The artwork to use as the front of your postcard. Do not include for resource_type &#x3D; letter. .</param>
        /// <param name="back">The artwork to use as the back of your postcard. Do not include for resource_type &#x3D; letter. .</param>
        public CreativeWritable(Object from = default(Object), string description = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), ResourceTypeEnum resourceType = default(ResourceTypeEnum), string campaignId = default(string), Object details = default(Object), string file = default(string), string front = default(string), string back = default(string))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for CreativeWritable and cannot be null");
            }
            this.From = from;
            this.ResourceType = resourceType;
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new ArgumentNullException("campaignId is a required property for CreativeWritable and cannot be null");
            }
            this.CampaignId = campaignId;
            this.Description = description;
            this.Metadata = metadata;
            this.Details = details;
            this.File = file;
            this.Front = front;
            this.Back = back;
        }

        /// <summary>
        /// Must either be an address ID or an inline object with correct address parameters.
        /// </summary>
        /// <value>Must either be an address ID or an inline object with correct address parameters.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public Object From { get; set; }

        /// <summary>
        /// An internal description that identifies this resource. Must be no longer than 255 characters. 
        /// </summary>
        /// <value>An internal description that identifies this resource. Must be no longer than 255 characters. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
        /// </summary>
        /// <value>Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;cmp_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;cmp_&#x60;.</value>
        [DataMember(Name = "campaign_id", IsRequired = true, EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Either PostcardDetailsWritable or LetterDetailsWritable
        /// </summary>
        /// <value>Either PostcardDetailsWritable or LetterDetailsWritable</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Object Details { get; set; }

        /// <summary>
        /// PDF file containing the letter&#39;s formatting. Do not include for resource_type &#x3D; postcard.
        /// </summary>
        /// <value>PDF file containing the letter&#39;s formatting. Do not include for resource_type &#x3D; postcard.</value>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// The artwork to use as the front of your postcard. Do not include for resource_type &#x3D; letter. 
        /// </summary>
        /// <value>The artwork to use as the front of your postcard. Do not include for resource_type &#x3D; letter. </value>
        [DataMember(Name = "front", EmitDefaultValue = false)]
        public string Front { get; set; }

        /// <summary>
        /// The artwork to use as the back of your postcard. Do not include for resource_type &#x3D; letter. 
        /// </summary>
        /// <value>The artwork to use as the back of your postcard. Do not include for resource_type &#x3D; letter. </value>
        [DataMember(Name = "back", EmitDefaultValue = false)]
        public string Back { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreativeWritable {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Front: ").Append(Front).Append("\n");
            sb.Append("  Back: ").Append(Back).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreativeWritable);
        }

        /// <summary>
        /// Returns true if CreativeWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of CreativeWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreativeWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.Front == input.Front ||
                    (this.Front != null &&
                    this.Front.Equals(input.Front))
                ) && 
                (
                    this.Back == input.Back ||
                    (this.Back != null &&
                    this.Back.Equals(input.Back))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                if (this.Front != null)
                {
                    hashCode = (hashCode * 59) + this.Front.GetHashCode();
                }
                if (this.Back != null)
                {
                    hashCode = (hashCode * 59) + this.Back.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // CampaignId (string) pattern
            Regex regexCampaignId = new Regex(@"^cmp_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexCampaignId.Match(this.CampaignId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CampaignId, must match a pattern of " + regexCampaignId, new [] { "CampaignId" });
            }

            yield break;
        }
    }

}
