/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Upload
    /// </summary>
    [DataContract(Name = "upload")]
    public partial class Upload : IEquatable<Upload>, IValidatableObject
    {
        /// <summary>
        /// The environment in which the mailpieces were created. Today, will only be &#x60;live&#x60;.
        /// </summary>
        /// <value>The environment in which the mailpieces were created. Today, will only be &#x60;live&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Test for value: test
            /// </summary>
            [EnumMember(Value = "test")]
            Test = 1,
            

            /// <summary>
            /// Enum Live for value: live
            /// </summary>
            [EnumMember(Value = "live")]
            Live = 2
            

        }


        /// <summary>
        /// The environment in which the mailpieces were created. Today, will only be &#x60;live&#x60;.
        /// </summary>
        /// <value>The environment in which the mailpieces were created. Today, will only be &#x60;live&#x60;.</value>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = false)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Upload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Upload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Upload" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;upl_&#x60;. (required).</param>
        /// <param name="accountId">Account ID that made the request (required).</param>
        /// <param name="mode">The environment in which the mailpieces were created. Today, will only be &#x60;live&#x60;. (required).</param>
        /// <param name="campaignId">Campaign ID associated with the upload (required).</param>
        /// <param name="failuresUrl">Url where your campaign mailpiece failures can be retrieved.</param>
        /// <param name="originalFilename">Filename of the upload.</param>
        /// <param name="state">state (required).</param>
        /// <param name="totalMailpieces">Total number of recipients for the campaign (required).</param>
        /// <param name="failedMailpieces">Number of mailpieces that failed to create (required).</param>
        /// <param name="validatedMailpieces">Number of mailpieces that were successfully created (required).</param>
        /// <param name="bytesProcessed">Number of bytes processed in your CSV (required).</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the upload was created (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the upload was last modified (required).</param>
        /// <param name="requiredAddressColumnMapping">requiredAddressColumnMapping (required).</param>
        /// <param name="optionalAddressColumnMapping">optionalAddressColumnMapping (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="mergeVariableColumnMapping">The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same \&quot;name\&quot; as a \&quot;key\&quot; in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects. (required).</param>
        public Upload(string id = default(string), string accountId = default(string), ModeEnum mode = default(ModeEnum), string campaignId = default(string), string failuresUrl = default(string), string originalFilename = default(string), UploadState state = default(UploadState), int totalMailpieces = default(int), int failedMailpieces = default(int), int validatedMailpieces = default(int), int bytesProcessed = default(int), DateTime dateCreated = default(DateTime), DateTime dateModified = default(DateTime), RequiredAddressColumnMapping requiredAddressColumnMapping = default(RequiredAddressColumnMapping), OptionalAddressColumnMapping optionalAddressColumnMapping = default(OptionalAddressColumnMapping), UploadsMetadata metadata = default(UploadsMetadata), Object mergeVariableColumnMapping = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Upload and cannot be null");
            }
            this.Id = id;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for Upload and cannot be null");
            }
            this.AccountId = accountId;
            this.Mode = mode;
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new ArgumentNullException("campaignId is a required property for Upload and cannot be null");
            }
            this.CampaignId = campaignId;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for Upload and cannot be null");
            }
            this.State = state;
            this.TotalMailpieces = totalMailpieces;
            this.FailedMailpieces = failedMailpieces;
            this.ValidatedMailpieces = validatedMailpieces;
            this.BytesProcessed = bytesProcessed;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            // to ensure "requiredAddressColumnMapping" is required (not null)
            if (requiredAddressColumnMapping == null)
            {
                throw new ArgumentNullException("requiredAddressColumnMapping is a required property for Upload and cannot be null");
            }
            this.RequiredAddressColumnMapping = requiredAddressColumnMapping;
            // to ensure "optionalAddressColumnMapping" is required (not null)
            if (optionalAddressColumnMapping == null)
            {
                throw new ArgumentNullException("optionalAddressColumnMapping is a required property for Upload and cannot be null");
            }
            this.OptionalAddressColumnMapping = optionalAddressColumnMapping;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for Upload and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "mergeVariableColumnMapping" is required (not null)
            if (mergeVariableColumnMapping == null)
            {
                throw new ArgumentNullException("mergeVariableColumnMapping is a required property for Upload and cannot be null");
            }
            this.MergeVariableColumnMapping = mergeVariableColumnMapping;
            this.FailuresUrl = failuresUrl;
            this.OriginalFilename = originalFilename;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;upl_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;upl_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Account ID that made the request
        /// </summary>
        /// <value>Account ID that made the request</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Campaign ID associated with the upload
        /// </summary>
        /// <value>Campaign ID associated with the upload</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Url where your campaign mailpiece failures can be retrieved
        /// </summary>
        /// <value>Url where your campaign mailpiece failures can be retrieved</value>
        [DataMember(Name = "failuresUrl", EmitDefaultValue = false)]
        public string FailuresUrl { get; set; }

        /// <summary>
        /// Filename of the upload
        /// </summary>
        /// <value>Filename of the upload</value>
        [DataMember(Name = "originalFilename", EmitDefaultValue = false)]
        public string OriginalFilename { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public UploadState State { get; set; }

        /// <summary>
        /// Total number of recipients for the campaign
        /// </summary>
        /// <value>Total number of recipients for the campaign</value>
        [DataMember(Name = "totalMailpieces", IsRequired = true, EmitDefaultValue = false)]
        public int TotalMailpieces { get; set; }

        /// <summary>
        /// Number of mailpieces that failed to create
        /// </summary>
        /// <value>Number of mailpieces that failed to create</value>
        [DataMember(Name = "failedMailpieces", IsRequired = true, EmitDefaultValue = false)]
        public int FailedMailpieces { get; set; }

        /// <summary>
        /// Number of mailpieces that were successfully created
        /// </summary>
        /// <value>Number of mailpieces that were successfully created</value>
        [DataMember(Name = "validatedMailpieces", IsRequired = true, EmitDefaultValue = false)]
        public int ValidatedMailpieces { get; set; }

        /// <summary>
        /// Number of bytes processed in your CSV
        /// </summary>
        /// <value>Number of bytes processed in your CSV</value>
        [DataMember(Name = "bytesProcessed", IsRequired = true, EmitDefaultValue = false)]
        public int BytesProcessed { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the upload was created
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the upload was created</value>
        [DataMember(Name = "dateCreated", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the upload was last modified
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the upload was last modified</value>
        [DataMember(Name = "dateModified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Gets or Sets RequiredAddressColumnMapping
        /// </summary>
        [DataMember(Name = "requiredAddressColumnMapping", IsRequired = true, EmitDefaultValue = false)]
        public RequiredAddressColumnMapping RequiredAddressColumnMapping { get; set; }

        /// <summary>
        /// Gets or Sets OptionalAddressColumnMapping
        /// </summary>
        [DataMember(Name = "optionalAddressColumnMapping", IsRequired = true, EmitDefaultValue = false)]
        public OptionalAddressColumnMapping OptionalAddressColumnMapping { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = false)]
        public UploadsMetadata Metadata { get; set; }

        /// <summary>
        /// The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same \&quot;name\&quot; as a \&quot;key\&quot; in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects.
        /// </summary>
        /// <value>The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same \&quot;name\&quot; as a \&quot;key\&quot; in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the &#x60;requiredAddressColumnMapping&#x60; or &#x60;optionalAddressColumnMapping&#x60; objects.</value>
        [DataMember(Name = "mergeVariableColumnMapping", IsRequired = true, EmitDefaultValue = false)]
        public Object MergeVariableColumnMapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Upload {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  FailuresUrl: ").Append(FailuresUrl).Append("\n");
            sb.Append("  OriginalFilename: ").Append(OriginalFilename).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalMailpieces: ").Append(TotalMailpieces).Append("\n");
            sb.Append("  FailedMailpieces: ").Append(FailedMailpieces).Append("\n");
            sb.Append("  ValidatedMailpieces: ").Append(ValidatedMailpieces).Append("\n");
            sb.Append("  BytesProcessed: ").Append(BytesProcessed).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  RequiredAddressColumnMapping: ").Append(RequiredAddressColumnMapping).Append("\n");
            sb.Append("  OptionalAddressColumnMapping: ").Append(OptionalAddressColumnMapping).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MergeVariableColumnMapping: ").Append(MergeVariableColumnMapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Upload);
        }

        /// <summary>
        /// Returns true if Upload instances are equal
        /// </summary>
        /// <param name="input">Instance of Upload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.FailuresUrl == input.FailuresUrl ||
                    (this.FailuresUrl != null &&
                    this.FailuresUrl.Equals(input.FailuresUrl))
                ) && 
                (
                    this.OriginalFilename == input.OriginalFilename ||
                    (this.OriginalFilename != null &&
                    this.OriginalFilename.Equals(input.OriginalFilename))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.TotalMailpieces == input.TotalMailpieces ||
                    this.TotalMailpieces.Equals(input.TotalMailpieces)
                ) && 
                (
                    this.FailedMailpieces == input.FailedMailpieces ||
                    this.FailedMailpieces.Equals(input.FailedMailpieces)
                ) && 
                (
                    this.ValidatedMailpieces == input.ValidatedMailpieces ||
                    this.ValidatedMailpieces.Equals(input.ValidatedMailpieces)
                ) && 
                (
                    this.BytesProcessed == input.BytesProcessed ||
                    this.BytesProcessed.Equals(input.BytesProcessed)
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.RequiredAddressColumnMapping == input.RequiredAddressColumnMapping ||
                    (this.RequiredAddressColumnMapping != null &&
                    this.RequiredAddressColumnMapping.Equals(input.RequiredAddressColumnMapping))
                ) && 
                (
                    this.OptionalAddressColumnMapping == input.OptionalAddressColumnMapping ||
                    (this.OptionalAddressColumnMapping != null &&
                    this.OptionalAddressColumnMapping.Equals(input.OptionalAddressColumnMapping))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.MergeVariableColumnMapping == input.MergeVariableColumnMapping ||
                    (this.MergeVariableColumnMapping != null &&
                    this.MergeVariableColumnMapping.Equals(input.MergeVariableColumnMapping))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.CampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignId.GetHashCode();
                }
                if (this.FailuresUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FailuresUrl.GetHashCode();
                }
                if (this.OriginalFilename != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalFilename.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalMailpieces.GetHashCode();
                hashCode = (hashCode * 59) + this.FailedMailpieces.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidatedMailpieces.GetHashCode();
                hashCode = (hashCode * 59) + this.BytesProcessed.GetHashCode();
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateModified != null)
                {
                    hashCode = (hashCode * 59) + this.DateModified.GetHashCode();
                }
                if (this.RequiredAddressColumnMapping != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredAddressColumnMapping.GetHashCode();
                }
                if (this.OptionalAddressColumnMapping != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalAddressColumnMapping.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.MergeVariableColumnMapping != null)
                {
                    hashCode = (hashCode * 59) + this.MergeVariableColumnMapping.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^upl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}
