/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Zip
    /// </summary>
    [DataContract(Name = "zip")]
    public partial class Zip : IEquatable<Zip>, IValidatableObject
    {
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum UsZipLookup for value: us_zip_lookup
            /// </summary>
            [EnumMember(Value = "us_zip_lookup")]
            UsZipLookup = 1
            

        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        private ObjectEnum _object;
        public ObjectEnum getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Zip" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Zip() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Zip" /> class.
        /// </summary>
        /// <param name="zipCode">A 5-digit ZIP code..</param>
        /// <param name="id">Unique identifier prefixed with &#x60;us_zip_&#x60;. (required).</param>
        /// <param name="cities">An array of city objects containing valid cities for the &#x60;zip_code&#x60;. Multiple cities will be returned if more than one city is associated with the input ZIP code.  (required).</param>
        /// <param name="zipCodeType">zipCodeType (required).</param>
        /// <param name="_object">_object (required) (default to ObjectEnum.UsZipLookup).</param>

        /// <summary>
        /// A 5-digit ZIP code.
        /// </summary>
        /// <value>A 5-digit ZIP code.</value>
        [DataMember(Name = "zip_code", EmitDefaultValue = false)]
        private string zipCode;
        public string getZipCode() {
            return zipCode;
        }
        public void setZipCode(string value) {
            zipCode = value;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;us_zip_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;us_zip_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// An array of city objects containing valid cities for the &#x60;zip_code&#x60;. Multiple cities will be returned if more than one city is associated with the input ZIP code. 
        /// </summary>
        /// <value>An array of city objects containing valid cities for the &#x60;zip_code&#x60;. Multiple cities will be returned if more than one city is associated with the input ZIP code. </value>
        [DataMember(Name = "cities", IsRequired = true, EmitDefaultValue = false)]
        private List<ZipLookupCity> cities;
        public List<ZipLookupCity> getCities() {
            return cities;
        }
        public void setCities(List<ZipLookupCity> value) {
            cities = value;
        }

        /// <summary>
        /// Gets or Sets ZipCodeType
        /// </summary>
        [DataMember(Name = "zip_code_type", IsRequired = true, EmitDefaultValue = false)]
        private ZipCodeType zipCodeType;
        public ZipCodeType getZipCodeType() {
            return zipCodeType;
        }
        public void setZipCodeType(ZipCodeType value) {
            zipCodeType = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Zip {\n");
            sb.Append("  zipCode: ").Append(zipCode).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  cities: ").Append(cities).Append("\n");
            sb.Append("  zipCodeType: ").Append(zipCodeType).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Zip);
        }

        /// <summary>
        /// Returns true if Zip instances are equal
        /// </summary>
        /// <param name="input">Instance of Zip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Zip input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.zipCode == input.getZipCode() ||
                    (this.zipCode != null &&
                    this.zipCode.Equals(input.getZipCode()))
                ) && 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.cities == input.getCities() ||
                    this.cities != null &&
                    input.getCities() != null &&
                    this.cities.SequenceEqual(input.getCities())
                ) && 
                (
                    this.zipCodeType == input.getZipCodeType() ||
                    (this.zipCodeType != null &&
                    this.zipCodeType.Equals(input.getZipCodeType()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.zipCode != null)
                {
                    hashCode = (hashCode * 59) + this.zipCode.GetHashCode();
                }
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.cities != null)
                {
                    hashCode = (hashCode * 59) + this.cities.GetHashCode();
                }
                if (this.zipCodeType != null)
                {
                    hashCode = (hashCode * 59) + this.zipCodeType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // zipCode (string) pattern
            Regex regexzipCode = new Regex(@"^\\d{5}$", RegexOptions.CultureInvariant);
            if (false == regexzipCode.Match(this.zipCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for zipCode, must match a pattern of " + regexzipCode, new [] { "zipCode" });
            }

            // id (string) pattern
            Regex regexid = new Regex(@"^us_zip_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            yield break;
        }
    }

}
