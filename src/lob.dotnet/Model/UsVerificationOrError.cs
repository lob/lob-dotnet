/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// A model used to represent an entry in a result list where the entry can either be a us_verification or an Error. The SDK will perform necessary casting into the correct corresponding type. 
    /// </summary>
    [DataContract(Name = "us_verification_or_error")]
    public partial class UsVerificationOrError : IEquatable<UsVerificationOrError>, IValidatableObject
    {
        /// <summary>
        /// Defines Deliverability
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliverabilityEnum
        {
            /// <summary>
            /// Enum Deliverable for value: deliverable
            /// </summary>
            [EnumMember(Value = "deliverable")]
            Deliverable = 1,
            

            /// <summary>
            /// Enum DeliverableUnnecessaryUnit for value: deliverable_unnecessary_unit
            /// </summary>
            [EnumMember(Value = "deliverable_unnecessary_unit")]
            DeliverableUnnecessaryUnit = 2,
            

            /// <summary>
            /// Enum DeliverableIncorrectUnit for value: deliverable_incorrect_unit
            /// </summary>
            [EnumMember(Value = "deliverable_incorrect_unit")]
            DeliverableIncorrectUnit = 3,
            

            /// <summary>
            /// Enum DeliverableMissingUnit for value: deliverable_missing_unit
            /// </summary>
            [EnumMember(Value = "deliverable_missing_unit")]
            DeliverableMissingUnit = 4,
            

            /// <summary>
            /// Enum Undeliverable for value: undeliverable
            /// </summary>
            [EnumMember(Value = "undeliverable")]
            Undeliverable = 5
            

        }


        /// <summary>
        /// Gets or Sets Deliverability
        /// </summary>
        [DataMember(Name = "deliverability", EmitDefaultValue = false)]
        private DeliverabilityEnum? deliverability;
        public DeliverabilityEnum? getDeliverability() {
            return deliverability;
        }
        public void setDeliverability(DeliverabilityEnum value) {
            deliverability = value;
        }
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum UsVerification for value: us_verification
            /// </summary>
            [EnumMember(Value = "us_verification")]
            UsVerification = 1
            

        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        private ObjectEnum? _object;
        public ObjectEnum? getObject() {
            return _object;
        }
        public void setObject(ObjectEnum value) {
            _object = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsVerificationOrError" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;us_ver_&#x60;..</param>
        /// <param name="recipient">The intended recipient, typically a person&#39;s or firm&#39;s name..</param>
        /// <param name="primaryLine">The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; .</param>
        /// <param name="secondaryLine">The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. .</param>
        /// <param name="urbanization">Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. .</param>
        /// <param name="lastLine">lastLine.</param>
        /// <param name="deliverability">deliverability.</param>
        /// <param name="components">components.</param>
        /// <param name="deliverabilityAnalysis">deliverabilityAnalysis.</param>
        /// <param name="lobConfidenceScore">lobConfidenceScore.</param>
        /// <param name="_object">_object (default to ObjectEnum.UsVerification).</param>
        /// <param name="error">error.</param>

        /// <summary>
        /// Unique identifier prefixed with &#x60;us_ver_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;us_ver_&#x60;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        private string id;
        public string getId() {
            return id;
        }
        public void setId(string value) {
            id = value;
        }

        /// <summary>
        /// The intended recipient, typically a person&#39;s or firm&#39;s name.
        /// </summary>
        /// <value>The intended recipient, typically a person&#39;s or firm&#39;s name.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = true)]
        private string recipient;
        public string getRecipient() {
            return recipient;
        }
        public void setRecipient(string value) {
            recipient = value;
        }

        /// <summary>
        /// The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; 
        /// </summary>
        /// <value>The primary delivery line (usually the street address) of the address. Combination of the following applicable &#x60;components&#x60;: * &#x60;primary_number&#x60; * &#x60;street_predirection&#x60; * &#x60;street_name&#x60; * &#x60;street_suffix&#x60; * &#x60;street_postdirection&#x60; * &#x60;secondary_designator&#x60; * &#x60;secondary_number&#x60; * &#x60;pmb_designator&#x60; * &#x60;pmb_number&#x60; </value>
        [DataMember(Name = "primary_line", EmitDefaultValue = false)]
        private string primaryLine;
        public string getPrimaryLine() {
            return primaryLine;
        }
        public void setPrimaryLine(string value) {
            primaryLine = value;
        }

        /// <summary>
        /// The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. 
        /// </summary>
        /// <value>The secondary delivery line of the address. This field is typically empty but may contain information if &#x60;primary_line&#x60; is too long. </value>
        [DataMember(Name = "secondary_line", EmitDefaultValue = false)]
        private string secondaryLine;
        public string getSecondaryLine() {
            return secondaryLine;
        }
        public void setSecondaryLine(string value) {
            secondaryLine = value;
        }

        /// <summary>
        /// Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. 
        /// </summary>
        /// <value>Only present for addresses in Puerto Rico. An urbanization refers to an area, sector, or development within a city. See [USPS documentation](https://pe.usps.com/text/pub28/28api_008.htm#:~:text&#x3D;I51.,-4%20Urbanizations&amp;text&#x3D;In%20Puerto%20Rico%2C%20identical%20street,placed%20before%20the%20urbanization%20name.) for clarification. </value>
        [DataMember(Name = "urbanization", EmitDefaultValue = false)]
        private string urbanization;
        public string getUrbanization() {
            return urbanization;
        }
        public void setUrbanization(string value) {
            urbanization = value;
        }

        /// <summary>
        /// Gets or Sets LastLine
        /// </summary>
        [DataMember(Name = "last_line", EmitDefaultValue = false)]
        private string lastLine;
        public string getLastLine() {
            return lastLine;
        }
        public void setLastLine(string value) {
            lastLine = value;
        }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name = "components", EmitDefaultValue = false)]
        private UsComponents components;
        public UsComponents getComponents() {
            return components;
        }
        public void setComponents(UsComponents value) {
            components = value;
        }

        /// <summary>
        /// Gets or Sets DeliverabilityAnalysis
        /// </summary>
        [DataMember(Name = "deliverability_analysis", EmitDefaultValue = false)]
        private DeliverabilityAnalysis deliverabilityAnalysis;
        public DeliverabilityAnalysis getDeliverabilityAnalysis() {
            return deliverabilityAnalysis;
        }
        public void setDeliverabilityAnalysis(DeliverabilityAnalysis value) {
            deliverabilityAnalysis = value;
        }

        /// <summary>
        /// Gets or Sets LobConfidenceScore
        /// </summary>
        [DataMember(Name = "lob_confidence_score", EmitDefaultValue = false)]
        private LobConfidenceScore lobConfidenceScore;
        public LobConfidenceScore getLobConfidenceScore() {
            return lobConfidenceScore;
        }
        public void setLobConfidenceScore(LobConfidenceScore value) {
            lobConfidenceScore = value;
        }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        private BulkError error;
        public BulkError getError() {
            return error;
        }
        public void setError(BulkError value) {
            error = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsVerificationOrError {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  recipient: ").Append(recipient).Append("\n");
            sb.Append("  primaryLine: ").Append(primaryLine).Append("\n");
            sb.Append("  secondaryLine: ").Append(secondaryLine).Append("\n");
            sb.Append("  urbanization: ").Append(urbanization).Append("\n");
            sb.Append("  lastLine: ").Append(lastLine).Append("\n");
            sb.Append("  deliverability: ").Append(deliverability).Append("\n");
            sb.Append("  components: ").Append(components).Append("\n");
            sb.Append("  deliverabilityAnalysis: ").Append(deliverabilityAnalysis).Append("\n");
            sb.Append("  lobConfidenceScore: ").Append(lobConfidenceScore).Append("\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  error: ").Append(error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsVerificationOrError);
        }

        /// <summary>
        /// Returns true if UsVerificationOrError instances are equal
        /// </summary>
        /// <param name="input">Instance of UsVerificationOrError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsVerificationOrError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.id == input.getId() ||
                    (this.id != null &&
                    this.id.Equals(input.getId()))
                ) && 
                (
                    this.recipient == input.getRecipient() ||
                    (this.recipient != null &&
                    this.recipient.Equals(input.getRecipient()))
                ) && 
                (
                    this.primaryLine == input.getPrimaryLine() ||
                    (this.primaryLine != null &&
                    this.primaryLine.Equals(input.getPrimaryLine()))
                ) && 
                (
                    this.secondaryLine == input.getSecondaryLine() ||
                    (this.secondaryLine != null &&
                    this.secondaryLine.Equals(input.getSecondaryLine()))
                ) && 
                (
                    this.urbanization == input.getUrbanization() ||
                    (this.urbanization != null &&
                    this.urbanization.Equals(input.getUrbanization()))
                ) && 
                (
                    this.lastLine == input.getLastLine() ||
                    (this.lastLine != null &&
                    this.lastLine.Equals(input.getLastLine()))
                ) && 
                (
                    this.deliverability == input.getDeliverability() ||
                    this.deliverability.Equals(input.getDeliverability())
                ) && 
                (
                    this.components == input.getComponents() ||
                    (this.components != null &&
                    this.components.Equals(input.getComponents()))
                ) && 
                (
                    this.deliverabilityAnalysis == input.getDeliverabilityAnalysis() ||
                    (this.deliverabilityAnalysis != null &&
                    this.deliverabilityAnalysis.Equals(input.getDeliverabilityAnalysis()))
                ) && 
                (
                    this.lobConfidenceScore == input.getLobConfidenceScore() ||
                    (this.lobConfidenceScore != null &&
                    this.lobConfidenceScore.Equals(input.getLobConfidenceScore()))
                ) && 
                (
                    this._object == input.getObject() ||
                    this._object.Equals(input.getObject())
                ) && 
                (
                    this.error == input.getError() ||
                    (this.error != null &&
                    this.error.Equals(input.getError()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                {
                    hashCode = (hashCode * 59) + this.id.GetHashCode();
                }
                if (this.recipient != null)
                {
                    hashCode = (hashCode * 59) + this.recipient.GetHashCode();
                }
                if (this.primaryLine != null)
                {
                    hashCode = (hashCode * 59) + this.primaryLine.GetHashCode();
                }
                if (this.secondaryLine != null)
                {
                    hashCode = (hashCode * 59) + this.secondaryLine.GetHashCode();
                }
                if (this.urbanization != null)
                {
                    hashCode = (hashCode * 59) + this.urbanization.GetHashCode();
                }
                if (this.lastLine != null)
                {
                    hashCode = (hashCode * 59) + this.lastLine.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.deliverability.GetHashCode();
                if (this.components != null)
                {
                    hashCode = (hashCode * 59) + this.components.GetHashCode();
                }
                if (this.deliverabilityAnalysis != null)
                {
                    hashCode = (hashCode * 59) + this.deliverabilityAnalysis.GetHashCode();
                }
                if (this.lobConfidenceScore != null)
                {
                    hashCode = (hashCode * 59) + this.lobConfidenceScore.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._object.GetHashCode();
                if (this.error != null)
                {
                    hashCode = (hashCode * 59) + this.error.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // id (string) pattern
            Regex regexid = new Regex(@"^us_ver_[a-zA-Z0-9_]+$", RegexOptions.CultureInvariant);
            if (false == regexid.Match(this.id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for id, must match a pattern of " + regexid, new [] { "id" });
            }

            // recipient (string) maxLength
            if (this.recipient != null && this.recipient.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for recipient, length must be less than 500.", new [] { "recipient" });
            }

            // primaryLine (string) maxLength
            if (this.primaryLine != null && this.primaryLine.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for primaryLine, length must be less than 500.", new [] { "primaryLine" });
            }

            // secondaryLine (string) maxLength
            if (this.secondaryLine != null && this.secondaryLine.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for secondaryLine, length must be less than 500.", new [] { "secondaryLine" });
            }

            // urbanization (string) maxLength
            if (this.urbanization != null && this.urbanization.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for urbanization, length must be less than 500.", new [] { "urbanization" });
            }

            yield break;
        }
    }

}
