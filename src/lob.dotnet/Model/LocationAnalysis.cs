/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// A nested object containing a breakdown of the analysis of a reverse geocoded location.
    /// </summary>
    [DataContract(Name = "location_analysis")]
    public partial class LocationAnalysis : IEquatable<LocationAnalysis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationAnalysis" /> class.
        /// </summary>
        /// <param name="latitude">A positive or negative decimal indicating the geographic latitude of the address..</param>
        /// <param name="longitude">A positive or negative decimal indicating the geographic longitude of the address..</param>
        /// <param name="distance">The distance from the input location to this exact zip code in miles..</param>
        public LocationAnalysis(float? latitude = default(float?), float? longitude = default(float?), float distance = default(float))
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Distance = distance;
        }

        /// <summary>
        /// A positive or negative decimal indicating the geographic latitude of the address.
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic latitude of the address.</value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public float? Latitude { get; set; }

        /// <summary>
        /// A positive or negative decimal indicating the geographic longitude of the address.
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic longitude of the address.</value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public float? Longitude { get; set; }

        /// <summary>
        /// The distance from the input location to this exact zip code in miles.
        /// </summary>
        /// <value>The distance from the input location to this exact zip code in miles.</value>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public float Distance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationAnalysis {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationAnalysis);
        }

        /// <summary>
        /// Returns true if LocationAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationAnalysis input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Latitude (float?) maximum
            if (this.Latitude > (float?)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value less than or equal to 90.", new [] { "Latitude" });
            }

            // Latitude (float?) minimum
            if (this.Latitude < (float?)-90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Latitude, must be a value greater than or equal to -90.", new [] { "Latitude" });
            }

            // Longitude (float?) maximum
            if (this.Longitude > (float?)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value less than or equal to 180.", new [] { "Longitude" });
            }

            // Longitude (float?) minimum
            if (this.Longitude < (float?)-180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Longitude, must be a value greater than or equal to -180.", new [] { "Longitude" });
            }

            yield break;
        }
    }

}
