/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// A nested object containing a breakdown of each component of an address.
    /// </summary>
    [DataContract(Name = "intl_components")]
    public partial class IntlComponents : IEquatable<IntlComponents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntlComponents" /> class.
        /// </summary>
        /// <param name="primaryNumber">The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number..</param>
        /// <param name="streetName">The name of the street..</param>
        /// <param name="city">city.</param>
        /// <param name="state">The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. .</param>
        /// <param name="postalCode">The postal code..</param>

        /// <summary>
        /// The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.
        /// </summary>
        /// <value>The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.</value>
        [DataMember(Name = "primary_number", EmitDefaultValue = false)]
        private string primaryNumber;
        public string getPrimaryNumber() {
            return primaryNumber;
        }
        public void setPrimaryNumber(string value) {
            primaryNumber = value;
        }

        /// <summary>
        /// The name of the street.
        /// </summary>
        /// <value>The name of the street.</value>
        [DataMember(Name = "street_name", EmitDefaultValue = false)]
        private string streetName;
        public string getStreetName() {
            return streetName;
        }
        public void setStreetName(string value) {
            streetName = value;
        }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        private string city;
        public string getCity() {
            return city;
        }
        public void setCity(string value) {
            city = value;
        }

        /// <summary>
        /// The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. 
        /// </summary>
        /// <value>The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. </value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        private string state;
        public string getState() {
            return state;
        }
        public void setState(string value) {
            state = value;
        }

        /// <summary>
        /// The postal code.
        /// </summary>
        /// <value>The postal code.</value>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        private string postalCode;
        public string getPostalCode() {
            return postalCode;
        }
        public void setPostalCode(string value) {
            postalCode = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntlComponents {\n");
            sb.Append("  primaryNumber: ").Append(primaryNumber).Append("\n");
            sb.Append("  streetName: ").Append(streetName).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  postalCode: ").Append(postalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntlComponents);
        }

        /// <summary>
        /// Returns true if IntlComponents instances are equal
        /// </summary>
        /// <param name="input">Instance of IntlComponents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntlComponents input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.primaryNumber == input.getPrimaryNumber() ||
                    (this.primaryNumber != null &&
                    this.primaryNumber.Equals(input.getPrimaryNumber()))
                ) && 
                (
                    this.streetName == input.getStreetName() ||
                    (this.streetName != null &&
                    this.streetName.Equals(input.getStreetName()))
                ) && 
                (
                    this.city == input.getCity() ||
                    (this.city != null &&
                    this.city.Equals(input.getCity()))
                ) && 
                (
                    this.state == input.getState() ||
                    (this.state != null &&
                    this.state.Equals(input.getState()))
                ) && 
                (
                    this.postalCode == input.getPostalCode() ||
                    (this.postalCode != null &&
                    this.postalCode.Equals(input.getPostalCode()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.primaryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.primaryNumber.GetHashCode();
                }
                if (this.streetName != null)
                {
                    hashCode = (hashCode * 59) + this.streetName.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.postalCode != null)
                {
                    hashCode = (hashCode * 59) + this.postalCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // city (string) maxLength
            if (this.city != null && this.city.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for city, length must be less than 200.", new [] { "city" });
            }

            // state (string) maxLength
            if (this.state != null && this.state.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for state, length must be less than 2.", new [] { "state" });
            }

            // postalCode (string) maxLength
            if (this.postalCode != null && this.postalCode.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for postalCode, length must be less than 12.", new [] { "postalCode" });
            }

            yield break;
        }
    }

}
