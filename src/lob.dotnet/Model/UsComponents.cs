/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// A nested object containing a breakdown of each component of an address.
    /// </summary>
    [DataContract(Name = "us_components")]
    public partial class UsComponents : IEquatable<UsComponents>, IValidatableObject
    {
        /// <summary>
        /// Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
        /// </summary>
        /// <value>Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreetPredirectionEnum
        {
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1,
            

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 2,
            

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 3,
            

            /// <summary>
            /// Enum W for value: W
            /// </summary>
            [EnumMember(Value = "W")]
            W = 4,
            

            /// <summary>
            /// Enum NE for value: NE
            /// </summary>
            [EnumMember(Value = "NE")]
            NE = 5,
            

            /// <summary>
            /// Enum SW for value: SW
            /// </summary>
            [EnumMember(Value = "SW")]
            SW = 6,
            

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 7,
            

            /// <summary>
            /// Enum NW for value: NW
            /// </summary>
            [EnumMember(Value = "NW")]
            NW = 8,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 9
            

        }


        /// <summary>
        /// Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
        /// </summary>
        /// <value>Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). </value>
        [DataMember(Name = "street_predirection", IsRequired = true, EmitDefaultValue = false)]
        private StreetPredirectionEnum streetPredirection;
        public StreetPredirectionEnum getStreetPredirection() {
            return streetPredirection;
        }
        public void setStreetPredirection(StreetPredirectionEnum value) {
            streetPredirection = value;
        }
        /// <summary>
        /// Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
        /// </summary>
        /// <value>Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreetPostdirectionEnum
        {
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1,
            

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 2,
            

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 3,
            

            /// <summary>
            /// Enum W for value: W
            /// </summary>
            [EnumMember(Value = "W")]
            W = 4,
            

            /// <summary>
            /// Enum NE for value: NE
            /// </summary>
            [EnumMember(Value = "NE")]
            NE = 5,
            

            /// <summary>
            /// Enum SW for value: SW
            /// </summary>
            [EnumMember(Value = "SW")]
            SW = 6,
            

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 7,
            

            /// <summary>
            /// Enum NW for value: NW
            /// </summary>
            [EnumMember(Value = "NW")]
            NW = 8,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 9
            

        }


        /// <summary>
        /// Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
        /// </summary>
        /// <value>Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). </value>
        [DataMember(Name = "street_postdirection", IsRequired = true, EmitDefaultValue = false)]
        private StreetPostdirectionEnum streetPostdirection;
        public StreetPostdirectionEnum getStreetPostdirection() {
            return streetPostdirection;
        }
        public void setStreetPostdirection(StreetPostdirectionEnum value) {
            streetPostdirection = value;
        }
        /// <summary>
        /// Uses USPS&#39;s [Residential Delivery Indicator (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. 
        /// </summary>
        /// <value>Uses USPS&#39;s [Residential Delivery Indicator (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeEnum
        {
            /// <summary>
            /// Enum Residential for value: residential
            /// </summary>
            [EnumMember(Value = "residential")]
            Residential = 1,
            

            /// <summary>
            /// Enum Commercial for value: commercial
            /// </summary>
            [EnumMember(Value = "commercial")]
            Commercial = 2,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3
            

        }


        /// <summary>
        /// Uses USPS&#39;s [Residential Delivery Indicator (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. 
        /// </summary>
        /// <value>Uses USPS&#39;s [Residential Delivery Indicator (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. </value>
        [DataMember(Name = "address_type", IsRequired = true, EmitDefaultValue = false)]
        private AddressTypeEnum addressType;
        public AddressTypeEnum getAddressType() {
            return addressType;
        }
        public void setAddressType(AddressTypeEnum value) {
            addressType = value;
        }
        /// <summary>
        /// A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). 
        /// </summary>
        /// <value>A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecordTypeEnum
        {
            /// <summary>
            /// Enum Street for value: street
            /// </summary>
            [EnumMember(Value = "street")]
            Street = 1,
            

            /// <summary>
            /// Enum Highrise for value: highrise
            /// </summary>
            [EnumMember(Value = "highrise")]
            Highrise = 2,
            

            /// <summary>
            /// Enum Firm for value: firm
            /// </summary>
            [EnumMember(Value = "firm")]
            Firm = 3,
            

            /// <summary>
            /// Enum PoBox for value: po_box
            /// </summary>
            [EnumMember(Value = "po_box")]
            PoBox = 4,
            

            /// <summary>
            /// Enum RuralRoute for value: rural_route
            /// </summary>
            [EnumMember(Value = "rural_route")]
            RuralRoute = 5,
            

            /// <summary>
            /// Enum GeneralDelivery for value: general_delivery
            /// </summary>
            [EnumMember(Value = "general_delivery")]
            GeneralDelivery = 6,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 7
            

        }


        /// <summary>
        /// A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). 
        /// </summary>
        /// <value>A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). </value>
        [DataMember(Name = "record_type", IsRequired = true, EmitDefaultValue = false)]
        private RecordTypeEnum recordType;
        public RecordTypeEnum getRecordType() {
            return recordType;
        }
        public void setRecordType(RecordTypeEnum value) {
            recordType = value;
        }
        /// <summary>
        /// The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). 
        /// </summary>
        /// <value>The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierRouteTypeEnum
        {
            /// <summary>
            /// Enum CityDelivery for value: city_delivery
            /// </summary>
            [EnumMember(Value = "city_delivery")]
            CityDelivery = 1,
            

            /// <summary>
            /// Enum RuralRoute for value: rural_route
            /// </summary>
            [EnumMember(Value = "rural_route")]
            RuralRoute = 2,
            

            /// <summary>
            /// Enum HighwayContract for value: highway_contract
            /// </summary>
            [EnumMember(Value = "highway_contract")]
            HighwayContract = 3,
            

            /// <summary>
            /// Enum PoBox for value: po_box
            /// </summary>
            [EnumMember(Value = "po_box")]
            PoBox = 4,
            

            /// <summary>
            /// Enum GeneralDelivery for value: general_delivery
            /// </summary>
            [EnumMember(Value = "general_delivery")]
            GeneralDelivery = 5,
            

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 6
            

        }


        /// <summary>
        /// The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). 
        /// </summary>
        /// <value>The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). </value>
        [DataMember(Name = "carrier_route_type", IsRequired = true, EmitDefaultValue = false)]
        private CarrierRouteTypeEnum carrierRouteType;
        public CarrierRouteTypeEnum getCarrierRouteType() {
            return carrierRouteType;
        }
        public void setCarrierRouteType(CarrierRouteTypeEnum value) {
            carrierRouteType = value;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsComponents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public UsComponents() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsComponents" /> class.
        /// </summary>
        /// <param name="primaryNumber">The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number. (required).</param>
        /// <param name="streetPredirection">Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;).  (required).</param>
        /// <param name="streetName">The name of the street. (required).</param>
        /// <param name="streetSuffix">The standard USPS abbreviation for the street suffix (&#x60;ST&#x60;, &#x60;AVE&#x60;, &#x60;BLVD&#x60;, etc).  (required).</param>
        /// <param name="streetPostdirection">Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;).  (required).</param>
        /// <param name="secondaryDesignator">The standard USPS abbreviation describing the &#x60;components[secondary_number]&#x60; (&#x60;STE&#x60;, &#x60;APT&#x60;, &#x60;BLDG&#x60;, etc).  (required).</param>
        /// <param name="secondaryNumber">Number of the apartment/unit/etc.  (required).</param>
        /// <param name="pmbDesignator">Designator of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox.  (required).</param>
        /// <param name="pmbNumber">Number of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox.  (required).</param>
        /// <param name="extraSecondaryDesignator">An extra (often unnecessary) secondary designator provided with the input address.  (required).</param>
        /// <param name="extraSecondaryNumber">An extra (often unnecessary) secondary number provided with the input address.  (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="state">The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state.  (required).</param>
        /// <param name="zipCode">The 5-digit ZIP code (required).</param>
        /// <param name="zipCodePlus4">zipCodePlus4 (required).</param>
        /// <param name="zipCodeType">zipCodeType (required).</param>
        /// <param name="deliveryPointBarcode">A 12-digit identifier that uniquely identifies a delivery point (location where mail can be sent and received). It consists of the 5-digit ZIP code (&#x60;zip_code&#x60;), 4-digit ZIP+4 add-on (&#x60;zip_code_plus_4&#x60;), 2-digit delivery point, and 1-digit delivery point check digit.  (required).</param>
        /// <param name="addressType">Uses USPS&#39;s [Residential Delivery Indicator (RDI)](https://www.usps.com/nationalpremieraccounts/rdi.htm) to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined.  (required).</param>
        /// <param name="recordType">A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types).  (required).</param>
        /// <param name="defaultBuildingAddress">Designates whether or not the address is the default address for a building containing multiple delivery points.  (required).</param>
        /// <param name="county">County name of the address city. (required).</param>
        /// <param name="countyFips">A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code.  (required).</param>
        /// <param name="carrierRoute">A 4-character code assigned to a mail delivery route within a ZIP code.  (required).</param>
        /// <param name="carrierRouteType">The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types).  (required).</param>
        /// <param name="latitude">A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;longitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). .</param>
        /// <param name="longitude">A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;latitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). .</param>

        /// <summary>
        /// The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.
        /// </summary>
        /// <value>The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.</value>
        [DataMember(Name = "primary_number", IsRequired = true, EmitDefaultValue = false)]
        private string primaryNumber;
        public string getPrimaryNumber() {
            return primaryNumber;
        }
        public void setPrimaryNumber(string value) {
            primaryNumber = value;
        }

        /// <summary>
        /// The name of the street.
        /// </summary>
        /// <value>The name of the street.</value>
        [DataMember(Name = "street_name", IsRequired = true, EmitDefaultValue = false)]
        private string streetName;
        public string getStreetName() {
            return streetName;
        }
        public void setStreetName(string value) {
            streetName = value;
        }

        /// <summary>
        /// The standard USPS abbreviation for the street suffix (&#x60;ST&#x60;, &#x60;AVE&#x60;, &#x60;BLVD&#x60;, etc). 
        /// </summary>
        /// <value>The standard USPS abbreviation for the street suffix (&#x60;ST&#x60;, &#x60;AVE&#x60;, &#x60;BLVD&#x60;, etc). </value>
        [DataMember(Name = "street_suffix", IsRequired = true, EmitDefaultValue = false)]
        private string streetSuffix;
        public string getStreetSuffix() {
            return streetSuffix;
        }
        public void setStreetSuffix(string value) {
            streetSuffix = value;
        }

        /// <summary>
        /// The standard USPS abbreviation describing the &#x60;components[secondary_number]&#x60; (&#x60;STE&#x60;, &#x60;APT&#x60;, &#x60;BLDG&#x60;, etc). 
        /// </summary>
        /// <value>The standard USPS abbreviation describing the &#x60;components[secondary_number]&#x60; (&#x60;STE&#x60;, &#x60;APT&#x60;, &#x60;BLDG&#x60;, etc). </value>
        [DataMember(Name = "secondary_designator", IsRequired = true, EmitDefaultValue = false)]
        private string secondaryDesignator;
        public string getSecondaryDesignator() {
            return secondaryDesignator;
        }
        public void setSecondaryDesignator(string value) {
            secondaryDesignator = value;
        }

        /// <summary>
        /// Number of the apartment/unit/etc. 
        /// </summary>
        /// <value>Number of the apartment/unit/etc. </value>
        [DataMember(Name = "secondary_number", IsRequired = true, EmitDefaultValue = false)]
        private string secondaryNumber;
        public string getSecondaryNumber() {
            return secondaryNumber;
        }
        public void setSecondaryNumber(string value) {
            secondaryNumber = value;
        }

        /// <summary>
        /// Designator of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox. 
        /// </summary>
        /// <value>Designator of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox. </value>
        [DataMember(Name = "pmb_designator", IsRequired = true, EmitDefaultValue = false)]
        private string pmbDesignator;
        public string getPmbDesignator() {
            return pmbDesignator;
        }
        public void setPmbDesignator(string value) {
            pmbDesignator = value;
        }

        /// <summary>
        /// Number of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox. 
        /// </summary>
        /// <value>Number of a [CMRA-authorized](https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency) private mailbox. </value>
        [DataMember(Name = "pmb_number", IsRequired = true, EmitDefaultValue = false)]
        private string pmbNumber;
        public string getPmbNumber() {
            return pmbNumber;
        }
        public void setPmbNumber(string value) {
            pmbNumber = value;
        }

        /// <summary>
        /// An extra (often unnecessary) secondary designator provided with the input address. 
        /// </summary>
        /// <value>An extra (often unnecessary) secondary designator provided with the input address. </value>
        [DataMember(Name = "extra_secondary_designator", IsRequired = true, EmitDefaultValue = false)]
        private string extraSecondaryDesignator;
        public string getExtraSecondaryDesignator() {
            return extraSecondaryDesignator;
        }
        public void setExtraSecondaryDesignator(string value) {
            extraSecondaryDesignator = value;
        }

        /// <summary>
        /// An extra (often unnecessary) secondary number provided with the input address. 
        /// </summary>
        /// <value>An extra (often unnecessary) secondary number provided with the input address. </value>
        [DataMember(Name = "extra_secondary_number", IsRequired = true, EmitDefaultValue = false)]
        private string extraSecondaryNumber;
        public string getExtraSecondaryNumber() {
            return extraSecondaryNumber;
        }
        public void setExtraSecondaryNumber(string value) {
            extraSecondaryNumber = value;
        }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        private string city;
        public string getCity() {
            return city;
        }
        public void setCity(string value) {
            city = value;
        }

        /// <summary>
        /// The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. 
        /// </summary>
        /// <value>The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. </value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        private string state;
        public string getState() {
            return state;
        }
        public void setState(string value) {
            state = value;
        }

        /// <summary>
        /// The 5-digit ZIP code
        /// </summary>
        /// <value>The 5-digit ZIP code</value>
        [DataMember(Name = "zip_code", IsRequired = true, EmitDefaultValue = false)]
        private string zipCode;
        public string getZipCode() {
            return zipCode;
        }
        public void setZipCode(string value) {
            zipCode = value;
        }

        /// <summary>
        /// Gets or Sets ZipCodePlus4
        /// </summary>
        [DataMember(Name = "zip_code_plus_4", IsRequired = true, EmitDefaultValue = false)]
        private string zipCodePlus4;
        public string getZipCodePlus4() {
            return zipCodePlus4;
        }
        public void setZipCodePlus4(string value) {
            zipCodePlus4 = value;
        }

        /// <summary>
        /// Gets or Sets ZipCodeType
        /// </summary>
        [DataMember(Name = "zip_code_type", IsRequired = true, EmitDefaultValue = false)]
        private ZipCodeType zipCodeType;
        public ZipCodeType getZipCodeType() {
            return zipCodeType;
        }
        public void setZipCodeType(ZipCodeType value) {
            zipCodeType = value;
        }

        /// <summary>
        /// A 12-digit identifier that uniquely identifies a delivery point (location where mail can be sent and received). It consists of the 5-digit ZIP code (&#x60;zip_code&#x60;), 4-digit ZIP+4 add-on (&#x60;zip_code_plus_4&#x60;), 2-digit delivery point, and 1-digit delivery point check digit. 
        /// </summary>
        /// <value>A 12-digit identifier that uniquely identifies a delivery point (location where mail can be sent and received). It consists of the 5-digit ZIP code (&#x60;zip_code&#x60;), 4-digit ZIP+4 add-on (&#x60;zip_code_plus_4&#x60;), 2-digit delivery point, and 1-digit delivery point check digit. </value>
        [DataMember(Name = "delivery_point_barcode", IsRequired = true, EmitDefaultValue = false)]
        private string deliveryPointBarcode;
        public string getDeliveryPointBarcode() {
            return deliveryPointBarcode;
        }
        public void setDeliveryPointBarcode(string value) {
            deliveryPointBarcode = value;
        }

        /// <summary>
        /// Designates whether or not the address is the default address for a building containing multiple delivery points. 
        /// </summary>
        /// <value>Designates whether or not the address is the default address for a building containing multiple delivery points. </value>
        [DataMember(Name = "default_building_address", IsRequired = true, EmitDefaultValue = true)]
        private bool defaultBuildingAddress;
        public bool getDefaultBuildingAddress() {
            return defaultBuildingAddress;
        }
        public void setDefaultBuildingAddress(bool value) {
            defaultBuildingAddress = value;
        }

        /// <summary>
        /// County name of the address city.
        /// </summary>
        /// <value>County name of the address city.</value>
        [DataMember(Name = "county", IsRequired = true, EmitDefaultValue = false)]
        private string county;
        public string getCounty() {
            return county;
        }
        public void setCounty(string value) {
            county = value;
        }

        /// <summary>
        /// A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. 
        /// </summary>
        /// <value>A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. </value>
        [DataMember(Name = "county_fips", IsRequired = true, EmitDefaultValue = false)]
        private string countyFips;
        public string getCountyFips() {
            return countyFips;
        }
        public void setCountyFips(string value) {
            countyFips = value;
        }

        /// <summary>
        /// A 4-character code assigned to a mail delivery route within a ZIP code. 
        /// </summary>
        /// <value>A 4-character code assigned to a mail delivery route within a ZIP code. </value>
        [DataMember(Name = "carrier_route", IsRequired = true, EmitDefaultValue = false)]
        private string carrierRoute;
        public string getCarrierRoute() {
            return carrierRoute;
        }
        public void setCarrierRoute(string value) {
            carrierRoute = value;
        }

        /// <summary>
        /// A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;longitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). 
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;longitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). </value>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        private float? latitude;
        public float? getLatitude() {
            return latitude;
        }
        public void setLatitude(float? value) {
            latitude = value;
        }

        /// <summary>
        /// A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;latitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). 
        /// </summary>
        /// <value>A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;latitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). </value>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        private float? longitude;
        public float? getLongitude() {
            return longitude;
        }
        public void setLongitude(float? value) {
            longitude = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsComponents {\n");
            sb.Append("  primaryNumber: ").Append(primaryNumber).Append("\n");
            sb.Append("  streetPredirection: ").Append(streetPredirection).Append("\n");
            sb.Append("  streetName: ").Append(streetName).Append("\n");
            sb.Append("  streetSuffix: ").Append(streetSuffix).Append("\n");
            sb.Append("  streetPostdirection: ").Append(streetPostdirection).Append("\n");
            sb.Append("  secondaryDesignator: ").Append(secondaryDesignator).Append("\n");
            sb.Append("  secondaryNumber: ").Append(secondaryNumber).Append("\n");
            sb.Append("  pmbDesignator: ").Append(pmbDesignator).Append("\n");
            sb.Append("  pmbNumber: ").Append(pmbNumber).Append("\n");
            sb.Append("  extraSecondaryDesignator: ").Append(extraSecondaryDesignator).Append("\n");
            sb.Append("  extraSecondaryNumber: ").Append(extraSecondaryNumber).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  zipCode: ").Append(zipCode).Append("\n");
            sb.Append("  zipCodePlus4: ").Append(zipCodePlus4).Append("\n");
            sb.Append("  zipCodeType: ").Append(zipCodeType).Append("\n");
            sb.Append("  deliveryPointBarcode: ").Append(deliveryPointBarcode).Append("\n");
            sb.Append("  addressType: ").Append(addressType).Append("\n");
            sb.Append("  recordType: ").Append(recordType).Append("\n");
            sb.Append("  defaultBuildingAddress: ").Append(defaultBuildingAddress).Append("\n");
            sb.Append("  county: ").Append(county).Append("\n");
            sb.Append("  countyFips: ").Append(countyFips).Append("\n");
            sb.Append("  carrierRoute: ").Append(carrierRoute).Append("\n");
            sb.Append("  carrierRouteType: ").Append(carrierRouteType).Append("\n");
            sb.Append("  latitude: ").Append(latitude).Append("\n");
            sb.Append("  longitude: ").Append(longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsComponents);
        }

        /// <summary>
        /// Returns true if UsComponents instances are equal
        /// </summary>
        /// <param name="input">Instance of UsComponents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsComponents input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.primaryNumber == input.getPrimaryNumber() ||
                    (this.primaryNumber != null &&
                    this.primaryNumber.Equals(input.getPrimaryNumber()))
                ) && 
                (
                    this.streetPredirection == input.getStreetPredirection() ||
                    this.streetPredirection.Equals(input.getStreetPredirection())
                ) && 
                (
                    this.streetName == input.getStreetName() ||
                    (this.streetName != null &&
                    this.streetName.Equals(input.getStreetName()))
                ) && 
                (
                    this.streetSuffix == input.getStreetSuffix() ||
                    (this.streetSuffix != null &&
                    this.streetSuffix.Equals(input.getStreetSuffix()))
                ) && 
                (
                    this.streetPostdirection == input.getStreetPostdirection() ||
                    this.streetPostdirection.Equals(input.getStreetPostdirection())
                ) && 
                (
                    this.secondaryDesignator == input.getSecondaryDesignator() ||
                    (this.secondaryDesignator != null &&
                    this.secondaryDesignator.Equals(input.getSecondaryDesignator()))
                ) && 
                (
                    this.secondaryNumber == input.getSecondaryNumber() ||
                    (this.secondaryNumber != null &&
                    this.secondaryNumber.Equals(input.getSecondaryNumber()))
                ) && 
                (
                    this.pmbDesignator == input.getPmbDesignator() ||
                    (this.pmbDesignator != null &&
                    this.pmbDesignator.Equals(input.getPmbDesignator()))
                ) && 
                (
                    this.pmbNumber == input.getPmbNumber() ||
                    (this.pmbNumber != null &&
                    this.pmbNumber.Equals(input.getPmbNumber()))
                ) && 
                (
                    this.extraSecondaryDesignator == input.getExtraSecondaryDesignator() ||
                    (this.extraSecondaryDesignator != null &&
                    this.extraSecondaryDesignator.Equals(input.getExtraSecondaryDesignator()))
                ) && 
                (
                    this.extraSecondaryNumber == input.getExtraSecondaryNumber() ||
                    (this.extraSecondaryNumber != null &&
                    this.extraSecondaryNumber.Equals(input.getExtraSecondaryNumber()))
                ) && 
                (
                    this.city == input.getCity() ||
                    (this.city != null &&
                    this.city.Equals(input.getCity()))
                ) && 
                (
                    this.state == input.getState() ||
                    (this.state != null &&
                    this.state.Equals(input.getState()))
                ) && 
                (
                    this.zipCode == input.getZipCode() ||
                    (this.zipCode != null &&
                    this.zipCode.Equals(input.getZipCode()))
                ) && 
                (
                    this.zipCodePlus4 == input.getZipCodePlus4() ||
                    (this.zipCodePlus4 != null &&
                    this.zipCodePlus4.Equals(input.getZipCodePlus4()))
                ) && 
                (
                    this.zipCodeType == input.getZipCodeType() ||
                    (this.zipCodeType != null &&
                    this.zipCodeType.Equals(input.getZipCodeType()))
                ) && 
                (
                    this.deliveryPointBarcode == input.getDeliveryPointBarcode() ||
                    (this.deliveryPointBarcode != null &&
                    this.deliveryPointBarcode.Equals(input.getDeliveryPointBarcode()))
                ) && 
                (
                    this.addressType == input.getAddressType() ||
                    this.addressType.Equals(input.getAddressType())
                ) && 
                (
                    this.recordType == input.getRecordType() ||
                    this.recordType.Equals(input.getRecordType())
                ) && 
                (
                    this.defaultBuildingAddress == input.getDefaultBuildingAddress() ||
                    this.defaultBuildingAddress.Equals(input.getDefaultBuildingAddress())
                ) && 
                (
                    this.county == input.getCounty() ||
                    (this.county != null &&
                    this.county.Equals(input.getCounty()))
                ) && 
                (
                    this.countyFips == input.getCountyFips() ||
                    (this.countyFips != null &&
                    this.countyFips.Equals(input.getCountyFips()))
                ) && 
                (
                    this.carrierRoute == input.getCarrierRoute() ||
                    (this.carrierRoute != null &&
                    this.carrierRoute.Equals(input.getCarrierRoute()))
                ) && 
                (
                    this.carrierRouteType == input.getCarrierRouteType() ||
                    this.carrierRouteType.Equals(input.getCarrierRouteType())
                ) && 
                (
                    this.latitude == input.getLatitude() ||
                    (this.latitude != null &&
                    this.latitude.Equals(input.getLatitude()))
                ) && 
                (
                    this.longitude == input.getLongitude() ||
                    (this.longitude != null &&
                    this.longitude.Equals(input.getLongitude()))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.primaryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.primaryNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.streetPredirection.GetHashCode();
                if (this.streetName != null)
                {
                    hashCode = (hashCode * 59) + this.streetName.GetHashCode();
                }
                if (this.streetSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.streetSuffix.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.streetPostdirection.GetHashCode();
                if (this.secondaryDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.secondaryDesignator.GetHashCode();
                }
                if (this.secondaryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.secondaryNumber.GetHashCode();
                }
                if (this.pmbDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.pmbDesignator.GetHashCode();
                }
                if (this.pmbNumber != null)
                {
                    hashCode = (hashCode * 59) + this.pmbNumber.GetHashCode();
                }
                if (this.extraSecondaryDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.extraSecondaryDesignator.GetHashCode();
                }
                if (this.extraSecondaryNumber != null)
                {
                    hashCode = (hashCode * 59) + this.extraSecondaryNumber.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.zipCode != null)
                {
                    hashCode = (hashCode * 59) + this.zipCode.GetHashCode();
                }
                if (this.zipCodePlus4 != null)
                {
                    hashCode = (hashCode * 59) + this.zipCodePlus4.GetHashCode();
                }
                if (this.zipCodeType != null)
                {
                    hashCode = (hashCode * 59) + this.zipCodeType.GetHashCode();
                }
                if (this.deliveryPointBarcode != null)
                {
                    hashCode = (hashCode * 59) + this.deliveryPointBarcode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.addressType.GetHashCode();
                hashCode = (hashCode * 59) + this.recordType.GetHashCode();
                hashCode = (hashCode * 59) + this.defaultBuildingAddress.GetHashCode();
                if (this.county != null)
                {
                    hashCode = (hashCode * 59) + this.county.GetHashCode();
                }
                if (this.countyFips != null)
                {
                    hashCode = (hashCode * 59) + this.countyFips.GetHashCode();
                }
                if (this.carrierRoute != null)
                {
                    hashCode = (hashCode * 59) + this.carrierRoute.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.carrierRouteType.GetHashCode();
                if (this.latitude != null)
                {
                    hashCode = (hashCode * 59) + this.latitude.GetHashCode();
                }
                if (this.longitude != null)
                {
                    hashCode = (hashCode * 59) + this.longitude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // city (string) maxLength
            if (this.city != null && this.city.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for city, length must be less than 200.", new [] { "city" });
            }

            // state (string) maxLength
            if (this.state != null && this.state.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for state, length must be less than 2.", new [] { "state" });
            }

            // zipCode (string) pattern
            Regex regexzipCode = new Regex(@"^\\d{5}$", RegexOptions.CultureInvariant);
            if (false == regexzipCode.Match(this.zipCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for zipCode, must match a pattern of " + regexzipCode, new [] { "zipCode" });
            }

            // zipCodePlus4 (string) pattern
            Regex regexzipCodePlus4 = new Regex(@"^\\d{4}$", RegexOptions.CultureInvariant);
            if (false == regexzipCodePlus4.Match(this.zipCodePlus4).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for zipCodePlus4, must match a pattern of " + regexzipCodePlus4, new [] { "zipCodePlus4" });
            }

            yield break;
        }
    }

}
