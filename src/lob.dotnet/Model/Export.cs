/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Export
    /// </summary>
    [DataContract(Name = "export")]
    public partial class Export : IEquatable<Export>, IValidatableObject
    {
        /// <summary>
        /// The state of the export file, which can be &#x60;in_progress&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;.
        /// </summary>
        /// <value>The state of the export file, which can be &#x60;in_progress&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 1,
            

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 2,
            

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 3
            

        }


        /// <summary>
        /// The state of the export file, which can be &#x60;in_progress&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;.
        /// </summary>
        /// <value>The state of the export file, which can be &#x60;in_progress&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// The export file type, which can be &#x60;all&#x60;, &#x60;failures&#x60; or &#x60;successes&#x60;.
        /// </summary>
        /// <value>The export file type, which can be &#x60;all&#x60;, &#x60;failures&#x60; or &#x60;successes&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            

            /// <summary>
            /// Enum Failures for value: failures
            /// </summary>
            [EnumMember(Value = "failures")]
            Failures = 2,
            

            /// <summary>
            /// Enum Successes for value: successes
            /// </summary>
            [EnumMember(Value = "successes")]
            Successes = 3
            

        }


        /// <summary>
        /// The export file type, which can be &#x60;all&#x60;, &#x60;failures&#x60; or &#x60;successes&#x60;.
        /// </summary>
        /// <value>The export file type, which can be &#x60;all&#x60;, &#x60;failures&#x60; or &#x60;successes&#x60;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Export" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Export() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Export" /> class.
        /// </summary>
        /// <param name="id">Unique identifier prefixed with &#x60;ex_&#x60;. (required).</param>
        /// <param name="dateCreated">A timestamp in ISO 8601 format of the date the export was created (required).</param>
        /// <param name="dateModified">A timestamp in ISO 8601 format of the date the export was last modified (required).</param>
        /// <param name="deleted">Returns as &#x60;true&#x60; if the resource has been successfully deleted. (required).</param>
        /// <param name="s3Url">The URL for the generated export file..</param>
        /// <param name="state">The state of the export file, which can be &#x60;in_progress&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (required).</param>
        /// <param name="type">The export file type, which can be &#x60;all&#x60;, &#x60;failures&#x60; or &#x60;successes&#x60;. (required).</param>
        /// <param name="uploadId">Unique identifier prefixed with &#x60;upl_&#x60;. (required).</param>
        public Export(string id = default(string), DateTime dateCreated = default(DateTime), DateTime dateModified = default(DateTime), bool deleted = default(bool), string s3Url = default(string), StateEnum state = default(StateEnum), TypeEnum type = default(TypeEnum), string uploadId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Export and cannot be null");
            }
            this.Id = id;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            this.Deleted = deleted;
            this.State = state;
            this.Type = type;
            // to ensure "uploadId" is required (not null)
            if (uploadId == null)
            {
                throw new ArgumentNullException("uploadId is a required property for Export and cannot be null");
            }
            this.UploadId = uploadId;
            this.S3Url = s3Url;
        }

        /// <summary>
        /// Unique identifier prefixed with &#x60;ex_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;ex_&#x60;.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the export was created
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the export was created</value>
        [DataMember(Name = "dateCreated", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// A timestamp in ISO 8601 format of the date the export was last modified
        /// </summary>
        /// <value>A timestamp in ISO 8601 format of the date the export was last modified</value>
        [DataMember(Name = "dateModified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime DateModified { get; set; }

        /// <summary>
        /// Returns as &#x60;true&#x60; if the resource has been successfully deleted.
        /// </summary>
        /// <value>Returns as &#x60;true&#x60; if the resource has been successfully deleted.</value>
        [DataMember(Name = "deleted", IsRequired = true, EmitDefaultValue = false)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The URL for the generated export file.
        /// </summary>
        /// <value>The URL for the generated export file.</value>
        [DataMember(Name = "s3Url", EmitDefaultValue = false)]
        public string S3Url { get; set; }

        /// <summary>
        /// Unique identifier prefixed with &#x60;upl_&#x60;.
        /// </summary>
        /// <value>Unique identifier prefixed with &#x60;upl_&#x60;.</value>
        [DataMember(Name = "uploadId", IsRequired = true, EmitDefaultValue = false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Export {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  S3Url: ").Append(S3Url).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Export);
        }

        /// <summary>
        /// Returns true if Export instances are equal
        /// </summary>
        /// <param name="input">Instance of Export to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Export input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.S3Url == input.S3Url ||
                    (this.S3Url != null &&
                    this.S3Url.Equals(input.S3Url))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.DateCreated != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreated.GetHashCode();
                }
                if (this.DateModified != null)
                {
                    hashCode = (hashCode * 59) + this.DateModified.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.S3Url != null)
                {
                    hashCode = (hashCode * 59) + this.S3Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.UploadId != null)
                {
                    hashCode = (hashCode * 59) + this.UploadId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) pattern
            Regex regexId = new Regex(@"^ex_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // UploadId (string) pattern
            Regex regexUploadId = new Regex(@"^upl_[a-zA-Z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexUploadId.Match(this.UploadId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UploadId, must match a pattern of " + regexUploadId, new [] { "UploadId" });
            }

            yield break;
        }
    }

}
