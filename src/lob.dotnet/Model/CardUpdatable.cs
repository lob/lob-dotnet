/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// CardUpdatable
    /// </summary>
    [DataContract(Name = "card_updatable")]
    public partial class CardUpdatable : IEquatable<CardUpdatable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardUpdatable" /> class.
        /// </summary>
        /// <param name="description">Description of the card..</param>
        /// <param name="autoReorder">Allows for auto reordering.</param>
        /// <param name="reorderQuantity">The quantity of items to be reordered (only required when auto_reorder is true)..</param>

        /// <summary>
        /// Description of the card.
        /// </summary>
        /// <value>Description of the card.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        private string description;
        public string getDescription() {
            return description;
        }
        public void setDescription(string value) {
            description = value;
        }

        /// <summary>
        /// Allows for auto reordering
        /// </summary>
        /// <value>Allows for auto reordering</value>
        [DataMember(Name = "auto_reorder", EmitDefaultValue = true)]
        private bool autoReorder;
        public bool getAutoReorder() {
            return autoReorder;
        }
        public void setAutoReorder(bool value) {
            autoReorder = value;
        }

        /// <summary>
        /// The quantity of items to be reordered (only required when auto_reorder is true).
        /// </summary>
        /// <value>The quantity of items to be reordered (only required when auto_reorder is true).</value>
        [DataMember(Name = "reorder_quantity", EmitDefaultValue = false)]
        private decimal reorderQuantity;
        public decimal getReorderQuantity() {
            return reorderQuantity;
        }
        public void setReorderQuantity(decimal value) {
            reorderQuantity = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardUpdatable {\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  autoReorder: ").Append(autoReorder).Append("\n");
            sb.Append("  reorderQuantity: ").Append(reorderQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardUpdatable);
        }

        /// <summary>
        /// Returns true if CardUpdatable instances are equal
        /// </summary>
        /// <param name="input">Instance of CardUpdatable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardUpdatable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.description == input.getDescription() ||
                    (this.description != null &&
                    this.description.Equals(input.getDescription()))
                ) && 
                (
                    this.autoReorder == input.getAutoReorder() ||
                    this.autoReorder.Equals(input.getAutoReorder())
                ) && 
                (
                    this.reorderQuantity == input.getReorderQuantity() ||
                    this.reorderQuantity.Equals(input.getReorderQuantity())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.description != null)
                {
                    hashCode = (hashCode * 59) + this.description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.autoReorder.GetHashCode();
                hashCode = (hashCode * 59) + this.reorderQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // description (string) maxLength
            if (this.description != null && this.description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for description, length must be less than 255.", new [] { "description" });
            }

            // reorderQuantity (decimal) maximum
            if (this.reorderQuantity > (decimal)10000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for reorderQuantity, must be a value less than or equal to 10000000.", new [] { "reorderQuantity" });
            }

            // reorderQuantity (decimal) minimum
            if (this.reorderQuantity < (decimal)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for reorderQuantity, must be a value greater than or equal to 10000.", new [] { "reorderQuantity" });
            }

            yield break;
        }
    }

}
