/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// Lob uses RESTful HTTP response codes to indicate success or failure of an API request.
    /// </summary>
    [DataContract(Name = "lob_error")]
    public partial class LobError : IEquatable<LobError>, IValidatableObject
    {
        /// <summary>
        /// A conventional HTTP status code.
        /// </summary>
        /// <value>A conventional HTTP status code.</value>
        public enum StatusCodeEnum
        {
            /// <summary>
            /// Enum NUMBER_401 for value: 401
            /// </summary>
            NUMBER_401 = 401,
            

            /// <summary>
            /// Enum NUMBER_403 for value: 403
            /// </summary>
            NUMBER_403 = 403,
            

            /// <summary>
            /// Enum NUMBER_404 for value: 404
            /// </summary>
            NUMBER_404 = 404,
            

            /// <summary>
            /// Enum NUMBER_413 for value: 413
            /// </summary>
            NUMBER_413 = 413,
            

            /// <summary>
            /// Enum NUMBER_422 for value: 422
            /// </summary>
            NUMBER_422 = 422,
            

            /// <summary>
            /// Enum NUMBER_429 for value: 429
            /// </summary>
            NUMBER_429 = 429,
            

            /// <summary>
            /// Enum NUMBER_500 for value: 500
            /// </summary>
            NUMBER_500 = 500
            

        }


        /// <summary>
        /// A conventional HTTP status code.
        /// </summary>
        /// <value>A conventional HTTP status code.</value>
        [DataMember(Name = "status_code", EmitDefaultValue = false)]
        public StatusCodeEnum? StatusCode { get; set; }
        /// <summary>
        /// A pre-defined string identifying an error.
        /// </summary>
        /// <value>A pre-defined string identifying an error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum BadRequest for value: bad_request
            /// </summary>
            [EnumMember(Value = "bad_request")]
            BadRequest = 1,
            

            /// <summary>
            /// Enum Conflict for value: conflict
            /// </summary>
            [EnumMember(Value = "conflict")]
            Conflict = 2,
            

            /// <summary>
            /// Enum FeatureLimitReached for value: feature_limit_reached
            /// </summary>
            [EnumMember(Value = "feature_limit_reached")]
            FeatureLimitReached = 3,
            

            /// <summary>
            /// Enum InternalServerError for value: internal_server_error
            /// </summary>
            [EnumMember(Value = "internal_server_error")]
            InternalServerError = 4,
            

            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 5,
            

            /// <summary>
            /// Enum NotDeletable for value: not_deletable
            /// </summary>
            [EnumMember(Value = "not_deletable")]
            NotDeletable = 6,
            

            /// <summary>
            /// Enum NotFound for value: not_found
            /// </summary>
            [EnumMember(Value = "not_found")]
            NotFound = 7,
            

            /// <summary>
            /// Enum RequestTimeout for value: request_timeout
            /// </summary>
            [EnumMember(Value = "request_timeout")]
            RequestTimeout = 8,
            

            /// <summary>
            /// Enum ServiceUnavailable for value: service_unavailable
            /// </summary>
            [EnumMember(Value = "service_unavailable")]
            ServiceUnavailable = 9,
            

            /// <summary>
            /// Enum UnrecognizedEndpoint for value: unrecognized_endpoint
            /// </summary>
            [EnumMember(Value = "unrecognized_endpoint")]
            UnrecognizedEndpoint = 10,
            

            /// <summary>
            /// Enum UnsupportedLobVersion for value: unsupported_lob_version
            /// </summary>
            [EnumMember(Value = "unsupported_lob_version")]
            UnsupportedLobVersion = 11,
            

            /// <summary>
            /// Enum AddressLengthExceedsLimit for value: address_length_exceeds_limit
            /// </summary>
            [EnumMember(Value = "address_length_exceeds_limit")]
            AddressLengthExceedsLimit = 12,
            

            /// <summary>
            /// Enum BankAccountAlreadyVerified for value: bank_account_already_verified
            /// </summary>
            [EnumMember(Value = "bank_account_already_verified")]
            BankAccountAlreadyVerified = 13,
            

            /// <summary>
            /// Enum BankError for value: bank_error
            /// </summary>
            [EnumMember(Value = "bank_error")]
            BankError = 14,
            

            /// <summary>
            /// Enum CustomEnvelopeInventoryDepleted for value: custom_envelope_inventory_depleted
            /// </summary>
            [EnumMember(Value = "custom_envelope_inventory_depleted")]
            CustomEnvelopeInventoryDepleted = 15,
            

            /// <summary>
            /// Enum DeletedBankAccount for value: deleted_bank_account
            /// </summary>
            [EnumMember(Value = "deleted_bank_account")]
            DeletedBankAccount = 16,
            

            /// <summary>
            /// Enum FailedDeliverabilityStrictness for value: failed_deliverability_strictness
            /// </summary>
            [EnumMember(Value = "failed_deliverability_strictness")]
            FailedDeliverabilityStrictness = 17,
            

            /// <summary>
            /// Enum FilePagesBelowMin for value: file_pages_below_min
            /// </summary>
            [EnumMember(Value = "file_pages_below_min")]
            FilePagesBelowMin = 18,
            

            /// <summary>
            /// Enum FilePagesExceedMax for value: file_pages_exceed_max
            /// </summary>
            [EnumMember(Value = "file_pages_exceed_max")]
            FilePagesExceedMax = 19,
            

            /// <summary>
            /// Enum FileSizeExceedsLimit for value: file_size_exceeds_limit
            /// </summary>
            [EnumMember(Value = "file_size_exceeds_limit")]
            FileSizeExceedsLimit = 20,
            

            /// <summary>
            /// Enum ForeignReturnAddress for value: foreign_return_address
            /// </summary>
            [EnumMember(Value = "foreign_return_address")]
            ForeignReturnAddress = 21,
            

            /// <summary>
            /// Enum InconsistentPageDimensions for value: inconsistent_page_dimensions
            /// </summary>
            [EnumMember(Value = "inconsistent_page_dimensions")]
            InconsistentPageDimensions = 22,
            

            /// <summary>
            /// Enum InvalidBankAccount for value: invalid_bank_account
            /// </summary>
            [EnumMember(Value = "invalid_bank_account")]
            InvalidBankAccount = 23,
            

            /// <summary>
            /// Enum InvalidBankAccountVerification for value: invalid_bank_account_verification
            /// </summary>
            [EnumMember(Value = "invalid_bank_account_verification")]
            InvalidBankAccountVerification = 24,
            

            /// <summary>
            /// Enum InvalidCheckInternational for value: invalid_check_international
            /// </summary>
            [EnumMember(Value = "invalid_check_international")]
            InvalidCheckInternational = 25,
            

            /// <summary>
            /// Enum InvalidCountryCovid for value: invalid_country_covid
            /// </summary>
            [EnumMember(Value = "invalid_country_covid")]
            InvalidCountryCovid = 26,
            

            /// <summary>
            /// Enum InvalidFile for value: invalid_file
            /// </summary>
            [EnumMember(Value = "invalid_file")]
            InvalidFile = 27,
            

            /// <summary>
            /// Enum InvalidFileDimensions for value: invalid_file_dimensions
            /// </summary>
            [EnumMember(Value = "invalid_file_dimensions")]
            InvalidFileDimensions = 28,
            

            /// <summary>
            /// Enum InvalidFileDownloadTime for value: invalid_file_download_time
            /// </summary>
            [EnumMember(Value = "invalid_file_download_time")]
            InvalidFileDownloadTime = 29,
            

            /// <summary>
            /// Enum InvalidFileUrl for value: invalid_file_url
            /// </summary>
            [EnumMember(Value = "invalid_file_url")]
            InvalidFileUrl = 30,
            

            /// <summary>
            /// Enum InvalidImageDpi for value: invalid_image_dpi
            /// </summary>
            [EnumMember(Value = "invalid_image_dpi")]
            InvalidImageDpi = 31,
            

            /// <summary>
            /// Enum InvalidInternationalFeature for value: invalid_international_feature
            /// </summary>
            [EnumMember(Value = "invalid_international_feature")]
            InvalidInternationalFeature = 32,
            

            /// <summary>
            /// Enum InvalidPerforationReturnEnvelope for value: invalid_perforation_return_envelope
            /// </summary>
            [EnumMember(Value = "invalid_perforation_return_envelope")]
            InvalidPerforationReturnEnvelope = 33,
            

            /// <summary>
            /// Enum InvalidTemplateHtml for value: invalid_template_html
            /// </summary>
            [EnumMember(Value = "invalid_template_html")]
            InvalidTemplateHtml = 34,
            

            /// <summary>
            /// Enum MergeVariableRequired for value: merge_variable_required
            /// </summary>
            [EnumMember(Value = "merge_variable_required")]
            MergeVariableRequired = 35,
            

            /// <summary>
            /// Enum MergeVariableWhitespace for value: merge_variable_whitespace
            /// </summary>
            [EnumMember(Value = "merge_variable_whitespace")]
            MergeVariableWhitespace = 36,
            

            /// <summary>
            /// Enum PaymentMethodUnverified for value: payment_method_unverified
            /// </summary>
            [EnumMember(Value = "payment_method_unverified")]
            PaymentMethodUnverified = 37,
            

            /// <summary>
            /// Enum PdfEncrypted for value: pdf_encrypted
            /// </summary>
            [EnumMember(Value = "pdf_encrypted")]
            PdfEncrypted = 38,
            

            /// <summary>
            /// Enum SpecialCharactersRestricted for value: special_characters_restricted
            /// </summary>
            [EnumMember(Value = "special_characters_restricted")]
            SpecialCharactersRestricted = 39,
            

            /// <summary>
            /// Enum UnembeddedFonts for value: unembedded_fonts
            /// </summary>
            [EnumMember(Value = "unembedded_fonts")]
            UnembeddedFonts = 40,
            

            /// <summary>
            /// Enum EmailRequired for value: email_required
            /// </summary>
            [EnumMember(Value = "email_required")]
            EmailRequired = 41,
            

            /// <summary>
            /// Enum InvalidApiKey for value: invalid_api_key
            /// </summary>
            [EnumMember(Value = "invalid_api_key")]
            InvalidApiKey = 42,
            

            /// <summary>
            /// Enum PublishableKeyNotAllowed for value: publishable_key_not_allowed
            /// </summary>
            [EnumMember(Value = "publishable_key_not_allowed")]
            PublishableKeyNotAllowed = 43,
            

            /// <summary>
            /// Enum RateLimitExceeded for value: rate_limit_exceeded
            /// </summary>
            [EnumMember(Value = "rate_limit_exceeded")]
            RateLimitExceeded = 44,
            

            /// <summary>
            /// Enum Unauthorized for value: unauthorized
            /// </summary>
            [EnumMember(Value = "unauthorized")]
            Unauthorized = 45,
            

            /// <summary>
            /// Enum UnauthorizedToken for value: unauthorized_token
            /// </summary>
            [EnumMember(Value = "unauthorized_token")]
            UnauthorizedToken = 46,
            

            /// <summary>
            /// Enum CardQuantityBelowMin for value: card_quantity_below_min
            /// </summary>
            [EnumMember(Value = "card_quantity_below_min")]
            CardQuantityBelowMin = 47
            

        }


        /// <summary>
        /// A pre-defined string identifying an error.
        /// </summary>
        /// <value>A pre-defined string identifying an error.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public CodeEnum? Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LobError" /> class.
        /// </summary>
        /// <param name="message">A human-readable message with more details about the error.</param>
        /// <param name="statusCode">A conventional HTTP status code..</param>
        /// <param name="code">A pre-defined string identifying an error..</param>
        public LobError(string message = default(string), StatusCodeEnum? statusCode = default(StatusCodeEnum?), CodeEnum? code = default(CodeEnum?))
        {
            this.Message = message;
            this.StatusCode = statusCode;
            this.Code = code;
        }

        /// <summary>
        /// A human-readable message with more details about the error
        /// </summary>
        /// <value>A human-readable message with more details about the error</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LobError {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LobError);
        }

        /// <summary>
        /// Returns true if LobError instances are equal
        /// </summary>
        /// <param name="input">Instance of LobError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LobError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
