/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// ZipLookupCity
    /// </summary>
    [DataContract(Name = "zip_lookup_city")]
    public partial class ZipLookupCity : IEquatable<ZipLookupCity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipLookupCity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ZipLookupCity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipLookupCity" /> class.
        /// </summary>
        /// <param name="city">city (required).</param>
        /// <param name="state">The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state.  (required).</param>
        /// <param name="county">County name of the address city. (required).</param>
        /// <param name="countyFips">A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code.  (required).</param>
        /// <param name="preferred">Indicates whether or not the city is the [USPS default city](https://en.wikipedia.org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines) (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be in position 0 in the array of cities.  (required).</param>

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = false)]
        private string city;
        public string getCity() {
            return city;
        }
        public void setCity(string value) {
            city = value;
        }

        /// <summary>
        /// The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. 
        /// </summary>
        /// <value>The [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) two letter code for the state. </value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        private string state;
        public string getState() {
            return state;
        }
        public void setState(string value) {
            state = value;
        }

        /// <summary>
        /// County name of the address city.
        /// </summary>
        /// <value>County name of the address city.</value>
        [DataMember(Name = "county", IsRequired = true, EmitDefaultValue = false)]
        private string county;
        public string getCounty() {
            return county;
        }
        public void setCounty(string value) {
            county = value;
        }

        /// <summary>
        /// A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. 
        /// </summary>
        /// <value>A 5-digit [FIPS county code](https://en.wikipedia.org/wiki/FIPS_county_code) which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. </value>
        [DataMember(Name = "county_fips", IsRequired = true, EmitDefaultValue = false)]
        private string countyFips;
        public string getCountyFips() {
            return countyFips;
        }
        public void setCountyFips(string value) {
            countyFips = value;
        }

        /// <summary>
        /// Indicates whether or not the city is the [USPS default city](https://en.wikipedia.org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines) (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be in position 0 in the array of cities. 
        /// </summary>
        /// <value>Indicates whether or not the city is the [USPS default city](https://en.wikipedia.org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines) (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be in position 0 in the array of cities. </value>
        [DataMember(Name = "preferred", IsRequired = true, EmitDefaultValue = true)]
        private bool preferred;
        public bool getPreferred() {
            return preferred;
        }
        public void setPreferred(bool value) {
            preferred = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZipLookupCity {\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  county: ").Append(county).Append("\n");
            sb.Append("  countyFips: ").Append(countyFips).Append("\n");
            sb.Append("  preferred: ").Append(preferred).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZipLookupCity);
        }

        /// <summary>
        /// Returns true if ZipLookupCity instances are equal
        /// </summary>
        /// <param name="input">Instance of ZipLookupCity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipLookupCity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.city == input.getCity() ||
                    (this.city != null &&
                    this.city.Equals(input.getCity()))
                ) && 
                (
                    this.state == input.getState() ||
                    (this.state != null &&
                    this.state.Equals(input.getState()))
                ) && 
                (
                    this.county == input.getCounty() ||
                    (this.county != null &&
                    this.county.Equals(input.getCounty()))
                ) && 
                (
                    this.countyFips == input.getCountyFips() ||
                    (this.countyFips != null &&
                    this.countyFips.Equals(input.getCountyFips()))
                ) && 
                (
                    this.preferred == input.getPreferred() ||
                    this.preferred.Equals(input.getPreferred())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.county != null)
                {
                    hashCode = (hashCode * 59) + this.county.GetHashCode();
                }
                if (this.countyFips != null)
                {
                    hashCode = (hashCode * 59) + this.countyFips.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.preferred.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // city (string) maxLength
            if (this.city != null && this.city.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for city, length must be less than 200.", new [] { "city" });
            }

            // state (string) maxLength
            if (this.state != null && this.state.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for state, length must be less than 2.", new [] { "state" });
            }

            yield break;
        }
    }

}
