/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lob.dotnet.Client.OpenAPIDateConverter;

namespace lob.dotnet.Model
{
    /// <summary>
    /// UsAutocompletionsWritable
    /// </summary>
    [DataContract(Name = "us_autocompletions_writable")]
    public partial class UsAutocompletionsWritable : IEquatable<UsAutocompletionsWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsAutocompletionsWritable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public UsAutocompletionsWritable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsAutocompletionsWritable" /> class.
        /// </summary>
        /// <param name="addressPrefix">Only accepts numbers and street names in an alphanumeric format.  (required).</param>
        /// <param name="city">An optional city input used to filter suggestions. Case insensitive and does not match partial abbreviations. .</param>
        /// <param name="state">An optional state input used to filter suggestions. Case insensitive and does not match partial abbreviations. .</param>
        /// <param name="zipCode">An optional ZIP Code input used to filter suggestions. Matches partial entries. .</param>
        /// <param name="geoIpSort">If &#x60;true&#x60;, sort suggestions by proximity to the IP set in the &#x60;X-Forwarded-For&#x60; header. .</param>

        /// <summary>
        /// Only accepts numbers and street names in an alphanumeric format. 
        /// </summary>
        /// <value>Only accepts numbers and street names in an alphanumeric format. </value>
        [DataMember(Name = "address_prefix", IsRequired = true, EmitDefaultValue = false)]
        private string addressPrefix;
        public string getAddressPrefix() {
            return addressPrefix;
        }
        public void setAddressPrefix(string value) {
            addressPrefix = value;
        }

        /// <summary>
        /// An optional city input used to filter suggestions. Case insensitive and does not match partial abbreviations. 
        /// </summary>
        /// <value>An optional city input used to filter suggestions. Case insensitive and does not match partial abbreviations. </value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        private string city;
        public string getCity() {
            return city;
        }
        public void setCity(string value) {
            city = value;
        }

        /// <summary>
        /// An optional state input used to filter suggestions. Case insensitive and does not match partial abbreviations. 
        /// </summary>
        /// <value>An optional state input used to filter suggestions. Case insensitive and does not match partial abbreviations. </value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        private string state;
        public string getState() {
            return state;
        }
        public void setState(string value) {
            state = value;
        }

        /// <summary>
        /// An optional ZIP Code input used to filter suggestions. Matches partial entries. 
        /// </summary>
        /// <value>An optional ZIP Code input used to filter suggestions. Matches partial entries. </value>
        [DataMember(Name = "zip_code", EmitDefaultValue = false)]
        private string zipCode;
        public string getZipCode() {
            return zipCode;
        }
        public void setZipCode(string value) {
            zipCode = value;
        }

        /// <summary>
        /// If &#x60;true&#x60;, sort suggestions by proximity to the IP set in the &#x60;X-Forwarded-For&#x60; header. 
        /// </summary>
        /// <value>If &#x60;true&#x60;, sort suggestions by proximity to the IP set in the &#x60;X-Forwarded-For&#x60; header. </value>
        [DataMember(Name = "geo_ip_sort", EmitDefaultValue = true)]
        private bool geoIpSort;
        public bool getGeoIpSort() {
            return geoIpSort;
        }
        public void setGeoIpSort(bool value) {
            geoIpSort = value;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsAutocompletionsWritable {\n");
            sb.Append("  addressPrefix: ").Append(addressPrefix).Append("\n");
            sb.Append("  city: ").Append(city).Append("\n");
            sb.Append("  state: ").Append(state).Append("\n");
            sb.Append("  zipCode: ").Append(zipCode).Append("\n");
            sb.Append("  geoIpSort: ").Append(geoIpSort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsAutocompletionsWritable);
        }

        /// <summary>
        /// Returns true if UsAutocompletionsWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of UsAutocompletionsWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsAutocompletionsWritable input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.addressPrefix == input.getAddressPrefix() ||
                    (this.addressPrefix != null &&
                    this.addressPrefix.Equals(input.getAddressPrefix()))
                ) && 
                (
                    this.city == input.getCity() ||
                    (this.city != null &&
                    this.city.Equals(input.getCity()))
                ) && 
                (
                    this.state == input.getState() ||
                    (this.state != null &&
                    this.state.Equals(input.getState()))
                ) && 
                (
                    this.zipCode == input.getZipCode() ||
                    (this.zipCode != null &&
                    this.zipCode.Equals(input.getZipCode()))
                ) && 
                (
                    this.geoIpSort == input.getGeoIpSort() ||
                    this.geoIpSort.Equals(input.getGeoIpSort())
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.addressPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.addressPrefix.GetHashCode();
                }
                if (this.city != null)
                {
                    hashCode = (hashCode * 59) + this.city.GetHashCode();
                }
                if (this.state != null)
                {
                    hashCode = (hashCode * 59) + this.state.GetHashCode();
                }
                if (this.zipCode != null)
                {
                    hashCode = (hashCode * 59) + this.zipCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.geoIpSort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
