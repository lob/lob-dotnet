/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using lob.dotnet.Client;
using lob.dotnet.Model;

namespace lob.dotnet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Creates a new address given information
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Address</returns>
        Address AddressCreate(AddressEditable addressEditable, int operationIndex = 0);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Creates a new address given information
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddressCreateWithHttpInfo(AddressEditable addressEditable, int operationIndex = 0);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Deletes the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDeletion</returns>
        AddressDeletion AddressDelete(string adrId, int operationIndex = 0);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Deletes the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDeletion</returns>
        ApiResponse<AddressDeletion> AddressDeleteWithHttpInfo(string adrId, int operationIndex = 0);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Address</returns>
        Address AddressRetrieve(string adrId, int operationIndex = 0);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddressRetrieveWithHttpInfo(string adrId, int operationIndex = 0);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Returns a list of your addresses.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressList</returns>
        AddressList AddressesList(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Returns a list of your addresses.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressList</returns>
        ApiResponse<AddressList> AddressesListWithHttpInfo(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Creates a new address given information
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AddressCreateAsync(AddressEditable addressEditable, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// Creates a new address given information
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AddressCreateWithHttpInfoAsync(AddressEditable addressEditable, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Deletes the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDeletion</returns>
        System.Threading.Tasks.Task<AddressDeletion> AddressDeleteAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// Deletes the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDeletion)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressDeletion>> AddressDeleteWithHttpInfoAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AddressRetrieveAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing address.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AddressRetrieveWithHttpInfoAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Returns a list of your addresses.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressList</returns>
        System.Threading.Tasks.Task<AddressList> AddressesListAsync(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// Returns a list of your addresses.
        /// </remarks>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressList>> AddressesListWithHttpInfoAsync(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApi : IAddressesApiSync, IAddressesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressesApi : IAddressesApi
    {
        private lob.dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressesApi(string basePath)
        {
            this.Configuration = lob.dotnet.Client.Configuration.MergeConfigurations(
                lob.dotnet.Client.GlobalConfiguration.Instance,
                new lob.dotnet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new lob.dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new lob.dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = lob.dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressesApi(lob.dotnet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = lob.dotnet.Client.Configuration.MergeConfigurations(
                lob.dotnet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new lob.dotnet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new lob.dotnet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = lob.dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddressesApi(lob.dotnet.Client.ISynchronousClient client, lob.dotnet.Client.IAsynchronousClient asyncClient, lob.dotnet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = lob.dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public lob.dotnet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public lob.dotnet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public lob.dotnet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public lob.dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// create Creates a new address given information
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Address</returns>
        public Address AddressCreate(AddressEditable addressEditable, int operationIndex = 0)
        {
            lob.dotnet.Client.ApiResponse<Address> localVarResponse = AddressCreateWithHttpInfo(addressEditable);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Creates a new address given information
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Address</returns>
        public lob.dotnet.Client.ApiResponse<Address> AddressCreateWithHttpInfo(AddressEditable addressEditable, int operationIndex = 0)
        {
            // verify the required parameter 'addressEditable' is set
            if (addressEditable == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'addressEditable' when calling AddressesApi->AddressCreate");
            }

            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addressEditable;

            localVarRequestOptions.Operation = "AddressesApi.AddressCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Address>("/addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create Creates a new address given information
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AddressCreateAsync(AddressEditable addressEditable, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            lob.dotnet.Client.ApiResponse<Address> localVarResponse = await AddressCreateWithHttpInfoAsync(addressEditable, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create Creates a new address given information
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addressEditable"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<lob.dotnet.Client.ApiResponse<Address>> AddressCreateWithHttpInfoAsync(AddressEditable addressEditable, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addressEditable' is set
            if (addressEditable == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'addressEditable' when calling AddressesApi->AddressCreate");
            }


            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addressEditable;

            localVarRequestOptions.Operation = "AddressesApi.AddressCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Address>("/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete Deletes the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDeletion</returns>
        public AddressDeletion AddressDelete(string adrId, int operationIndex = 0)
        {
            lob.dotnet.Client.ApiResponse<AddressDeletion> localVarResponse = AddressDeleteWithHttpInfo(adrId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete Deletes the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDeletion</returns>
        public lob.dotnet.Client.ApiResponse<AddressDeletion> AddressDeleteWithHttpInfo(string adrId, int operationIndex = 0)
        {
            // verify the required parameter 'adrId' is set
            if (adrId == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'adrId' when calling AddressesApi->AddressDelete");
            }

            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adr_id", lob.dotnet.Client.ClientUtils.ParameterToString(adrId)); // path parameter

            localVarRequestOptions.Operation = "AddressesApi.AddressDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AddressDeletion>("/addresses/{adr_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete Deletes the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDeletion</returns>
        public async System.Threading.Tasks.Task<AddressDeletion> AddressDeleteAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            lob.dotnet.Client.ApiResponse<AddressDeletion> localVarResponse = await AddressDeleteWithHttpInfoAsync(adrId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete Deletes the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDeletion)</returns>
        public async System.Threading.Tasks.Task<lob.dotnet.Client.ApiResponse<AddressDeletion>> AddressDeleteWithHttpInfoAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'adrId' is set
            if (adrId == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'adrId' when calling AddressesApi->AddressDelete");
            }


            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adr_id", lob.dotnet.Client.ClientUtils.ParameterToString(adrId)); // path parameter

            localVarRequestOptions.Operation = "AddressesApi.AddressDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AddressDeletion>("/addresses/{adr_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Retrieves the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Address</returns>
        public Address AddressRetrieve(string adrId, int operationIndex = 0)
        {
            lob.dotnet.Client.ApiResponse<Address> localVarResponse = AddressRetrieveWithHttpInfo(adrId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Retrieves the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Address</returns>
        public lob.dotnet.Client.ApiResponse<Address> AddressRetrieveWithHttpInfo(string adrId, int operationIndex = 0)
        {
            // verify the required parameter 'adrId' is set
            if (adrId == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'adrId' when calling AddressesApi->AddressRetrieve");
            }

            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adr_id", lob.dotnet.Client.ClientUtils.ParameterToString(adrId)); // path parameter

            localVarRequestOptions.Operation = "AddressesApi.AddressRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Address>("/addresses/{adr_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get Retrieves the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AddressRetrieveAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            lob.dotnet.Client.ApiResponse<Address> localVarResponse = await AddressRetrieveWithHttpInfoAsync(adrId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get Retrieves the details of an existing address.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adrId">id of the address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<lob.dotnet.Client.ApiResponse<Address>> AddressRetrieveWithHttpInfoAsync(string adrId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'adrId' is set
            if (adrId == null)
            {
                throw new lob.dotnet.Client.ApiException(400, "Missing required parameter 'adrId' when calling AddressesApi->AddressRetrieve");
            }


            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("adr_id", lob.dotnet.Client.ClientUtils.ParameterToString(adrId)); // path parameter

            localVarRequestOptions.Operation = "AddressesApi.AddressRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Address>("/addresses/{adr_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list Returns a list of your addresses.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressList</returns>
        public AddressList AddressesList(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0)
        {
            lob.dotnet.Client.ApiResponse<AddressList> localVarResponse = AddressesListWithHttpInfo(limit, before, after, include, dateCreated, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list Returns a list of your addresses.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressList</returns>
        public lob.dotnet.Client.ApiResponse<AddressList> AddressesListWithHttpInfo(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0)
        {
            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "date_created", dateCreated));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("deepObject", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "AddressesApi.AddressesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressList>("/addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list Returns a list of your addresses.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressList</returns>
        public async System.Threading.Tasks.Task<AddressList> AddressesListAsync(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            lob.dotnet.Client.ApiResponse<AddressList> localVarResponse = await AddressesListWithHttpInfoAsync(limit, before, after, include, dateCreated, metadata, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list Returns a list of your addresses.
        /// </summary>
        /// <exception cref="lob.dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return. (optional, default to 10)</param>
        /// <param name="before">A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response.  (optional)</param>
        /// <param name="after">A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response.  (optional)</param>
        /// <param name="include">Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;.  (optional)</param>
        /// <param name="dateCreated">Filter by date created. (optional)</param>
        /// <param name="metadata">Filter by metadata key-value pair&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressList)</returns>
        public async System.Threading.Tasks.Task<lob.dotnet.Client.ApiResponse<AddressList>> AddressesListWithHttpInfoAsync(int? limit = default(int?), string before = default(string), string after = default(string), List<string> include = default(List<string>), Dictionary<string, DateTime> dateCreated = default(Dictionary<string, DateTime>), Dictionary<string, string> metadata = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            lob.dotnet.Client.RequestOptions localVarRequestOptions = new lob.dotnet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = lob.dotnet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = lob.dotnet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("multi", "include", include));
            }
            if (dateCreated != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("", "date_created", dateCreated));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(lob.dotnet.Client.ClientUtils.ParameterToMultiMap("deepObject", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "AddressesApi.AddressesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + lob.dotnet.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressList>("/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddressesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
