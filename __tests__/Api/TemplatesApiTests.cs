/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class TemplatesApiTests : IDisposable
    {
        private Mock<ITemplatesApi> templatesApiMock;
        private TemplateList fakeTemplateList;
        private Template fakeTemplate;

        public TemplatesApiTests()
        {
            templatesApiMock = new Mock<ITemplatesApi>();

            TemplateVersion fakeTemplateVersion = new TemplateVersion(
                "vrsn_fakeId", // id
                default(string), // description
                "fake html", // html
                default(EngineHtml), // engine
                default(bool), // suggestJsonEditor
                default(Object), // mergeVariables
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                TemplateVersion.ObjectEnum.Version // _object
            );

            fakeTemplate = new Template(
                default(string), // description
                "tmpl_fakeId", // id
                new List<TemplateVersion>(), // versions
                fakeTemplateVersion, // publishedVersion
                Template.ObjectEnum.Template, // _object
                default(Dictionary<string, string>), // metadata
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool) // deleted
            );

            List<Template> listOfTemplates = new List<Template>();
            Template data1 = new Template(
                default(string), // description
                "tmpl_fakeId1", // id
                new List<TemplateVersion>(), // versions
                fakeTemplateVersion, // publishedVersion
                Template.ObjectEnum.Template, // _object
                default(Dictionary<string, string>), // metadata
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool) // deleted
            );
            Template data2 = new Template(
                default(string), // description
                "tmpl_fakeId2", // id
                new List<TemplateVersion>(), // versions
                fakeTemplateVersion, // publishedVersion
                Template.ObjectEnum.Template, // _object
                default(Dictionary<string, string>), // metadata
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool) // deleted
            );

            listOfTemplates.Add(data1);
            listOfTemplates.Add(data2);

            fakeTemplateList = new TemplateList();

            fakeTemplateList.Data = listOfTemplates;
            fakeTemplateList.Object = "list";
            fakeTemplateList.Count = listOfTemplates.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test create
        /// </summary>
        [Test]
        public void createTest()
        {
            TemplateWritable templateWritable = new TemplateWritable(
                "C# unit test description", // description
                "<html>Updated HTML</html>", // html
                default(Dictionary<string, string>), // metadata
                default(EngineHtml) // engine
            );

            templatesApiMock.Setup(x => x.create(templateWritable, It.IsAny<int>())).Returns(fakeTemplate);
            Template response = templatesApiMock.Object.create(templateWritable);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, "tmpl_fakeId");
        }

        /// <summary>
        /// Test createHandlesException
        /// </summary>
        [Test]
        public void createTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templatesApiMock.Setup(x => x.create(null, It.IsAny<int>())).Throws(fakeException);
            try {
                Template response = templatesApiMock.Object.create(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test delete
        /// </summary>
        [Test]
        public void deleteTest()
        {
            TemplateDeletion fakeTemplate = new TemplateDeletion();

            fakeTemplate.Id = "tmpl_fakeId";
            fakeTemplate.Deleted = true;

            templatesApiMock.Setup(x => x.delete(fakeTemplate.Id, It.IsAny<int>())).Returns(fakeTemplate);

            var response = templatesApiMock.Object.delete(fakeTemplate.Id);

            Assert.IsInstanceOf<TemplateDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeTemplate.Deleted);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test deleteHandlesException
        /// </summary>
        [Test]
        public void deleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templatesApiMock.Setup(x => x.delete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = templatesApiMock.Object.delete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test get
        /// </summary>
        [Test]
        public void getTest()
        {
            templatesApiMock.Setup(x => x.get(fakeTemplate.Id, It.IsAny<int>())).Returns(fakeTemplate);
            Template response = templatesApiMock.Object.get(fakeTemplate.Id);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test getHandlesException
        /// </summary>
        [Test]
        public void getTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.get(null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.get(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateList
        /// </summary>
        [Test]
        public void TemplateListTest()
        {
            templatesApiMock.Setup(x => x.list(null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, null, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListHandlesException
        /// </summary>
        [Test]
        public void TemplateListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.list(null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.list(null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateListWithLimitParam
        /// </summary>
        [Test]
        public void TemplateListTestWithLimitParam()
        {
            int limit = 2;

            templatesApiMock.Setup(x => x.list(limit, null, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(limit, null, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithBeforeParam
        /// </summary>
        [Test]
        public void TemplateListTestWithBeforeParam()
        {
            string before = "before";

            templatesApiMock.Setup(x => x.list(null, before, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, before, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithAfterParam
        /// </summary>
        [Test]
        public void TemplateListTestWithAfterParam()
        {
            string after = "after";

            templatesApiMock.Setup(x => x.list(null, null, after, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, null, after, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithIncludeParam
        /// </summary>
        [Test]
        public void TemplateListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            templatesApiMock.Setup(x => x.list(null, null, null, include, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, null, null, include, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithDateCreatedParam
        /// </summary>
        [Test]
        public void TemplateListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            dateCreated.Add("gt", DateTime.Now);
            dateCreated.Add("lt", DateTime.Now);

            templatesApiMock.Setup(x => x.list(null, null, null, null, dateCreated, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, null, null, null, dateCreated, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithMetadataParam
        /// </summary>
        [Test]
        public void TemplateListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            templatesApiMock.Setup(x => x.list(null, null, null, null, null, metadata, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.list(null, null, null, null, null, metadata);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test update
        /// </summary>
        [Test]
        public void updateTest()
        {
            update update = new update("C# unit test template update description", "vrsn_fakeId");

            templatesApiMock.Setup(x => x.update(fakeTemplate.Id, update, It.IsAny<int>())).Returns(fakeTemplate);

            Template response = templatesApiMock.Object.update(fakeTemplate.Id, update);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test updateHandlesException
        /// </summary>
        [Test]
        public void updateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.update(null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.update(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
