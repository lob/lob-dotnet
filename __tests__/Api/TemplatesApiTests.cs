/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class TemplatesApiTests : IDisposable
    {
        private Mock<ITemplatesApi> templatesApiMock;
        private TemplateList fakeTemplateList;

        public TemplatesApiTests()
        {
            templatesApiMock = new Mock<ITemplatesApi>();

            List<Template> listOfTemplates = new List<Template>();
            Template data1 = new Template();
            Template data2 = new Template();

            data1.Id = "tmpl_fakeId1";
            data2.Id = "tmpl_fakeId2";
            listOfTemplates.Add(data1);
            listOfTemplates.Add(data2);

            fakeTemplateList = new TemplateList();

            fakeTemplateList.Data = listOfTemplates;
            fakeTemplateList.Object = "list";
            fakeTemplateList.Count = listOfTemplates.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            Template fakeTemplate = new Template();
            fakeTemplate.Id = "tmpl_fakeId";

            TemplateWritable templateWritable = new TemplateWritable(
                "C# unit test description", // description
                "<html>Updated HTML</html>", // html
                default(Dictionary<string, string>), // metadata
                default(EngineHtml) // engine
            );

            templatesApiMock.Setup(x => x.CreateTemplate(templateWritable, It.IsAny<int>())).Returns(fakeTemplate);
            Template response = templatesApiMock.Object.CreateTemplate(templateWritable);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, "tmpl_fakeId");
        }

        /// <summary>
        /// Test CreateTemplateHandlesException
        /// </summary>
        [Test]
        public void CreateTemplateTestHandlesException()
        {
            Template fakeTemplate = new Template();
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templatesApiMock.Setup(x => x.CreateTemplate(null, It.IsAny<int>())).Throws(fakeException);
            try {
                Template response = templatesApiMock.Object.CreateTemplate(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateDelete
        /// </summary>
        [Test]
        public void TemplateDeleteTest()
        {
            TemplateDeletion fakeTemplate = new TemplateDeletion();

            fakeTemplate.Id = "tmpl_fakeId";
            fakeTemplate.Deleted = true;

            templatesApiMock.Setup(x => x.TemplateDelete(fakeTemplate.Id, It.IsAny<int>())).Returns(fakeTemplate);

            var response = templatesApiMock.Object.TemplateDelete(fakeTemplate.Id);

            Assert.IsInstanceOf<TemplateDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeTemplate.Deleted);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test TemplateDeleteHandlesException
        /// </summary>
        [Test]
        public void TemplateDeleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templatesApiMock.Setup(x => x.TemplateDelete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = templatesApiMock.Object.TemplateDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateRetrieve
        /// </summary>
        [Test]
        public void TemplateRetrieveTest()
        {
            Template fakeTemplate = new Template();

            fakeTemplate.Id = "tmpl_fakeId";
            templatesApiMock.Setup(x => x.TemplateRetrieve(fakeTemplate.Id, It.IsAny<int>())).Returns(fakeTemplate);
            Template response = templatesApiMock.Object.TemplateRetrieve(fakeTemplate.Id);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test TemplateRetrieveHandlesException
        /// </summary>
        [Test]
        public void TemplateRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.TemplateRetrieve(null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.TemplateRetrieve(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateList
        /// </summary>
        [Test]
        public void TemplateListTest()
        {
            templatesApiMock.Setup(x => x.TemplatesList(null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, null, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListHandlesException
        /// </summary>
        [Test]
        public void TemplateListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.TemplatesList(null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.TemplatesList(null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateListWithLimitParam
        /// </summary>
        [Test]
        public void TemplateListTestWithLimitParam()
        {
            int limit = 2;

            templatesApiMock.Setup(x => x.TemplatesList(limit, null, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(limit, null, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithBeforeParam
        /// </summary>
        [Test]
        public void TemplateListTestWithBeforeParam()
        {
            string before = "before";

            templatesApiMock.Setup(x => x.TemplatesList(null, before, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, before, null, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithAfterParam
        /// </summary>
        [Test]
        public void TemplateListTestWithAfterParam()
        {
            string after = "after";

            templatesApiMock.Setup(x => x.TemplatesList(null, null, after, null, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, null, after, null, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithIncludeParam
        /// </summary>
        [Test]
        public void TemplateListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            templatesApiMock.Setup(x => x.TemplatesList(null, null, null, include, null, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, null, null, include, null, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithDateCreatedParam
        /// </summary>
        [Test]
        public void TemplateListTestWithDateCreatedParam()
        {
            Dictionary<String, String> dateCreated = new Dictionary<String, String>();
            dateCreated.Add("gt", "2020-01-01");
            dateCreated.Add("lt", "2020-01-31T12");

            templatesApiMock.Setup(x => x.TemplatesList(null, null, null, null, dateCreated, null, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, null, null, null, dateCreated, null);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateListWithMetadataParam
        /// </summary>
        [Test]
        public void TemplateListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            templatesApiMock.Setup(x => x.TemplatesList(null, null, null, null, null, metadata, It.IsAny<int>())).Returns(fakeTemplateList);

            var response = templatesApiMock.Object.TemplatesList(null, null, null, null, null, metadata);

            Assert.IsInstanceOf<TemplateList>(response);
            Assert.AreEqual(response.Count, fakeTemplateList.Count);
        }

        /// <summary>
        /// Test TemplateUpdate
        /// </summary>
        [Test]
        public void TemplateUpdateTest()
        {
            TemplateUpdate templateUpdate = new TemplateUpdate("C# unit test template update description", "vrsn_fakeId");

            Template fakeTemplate = new Template();
            fakeTemplate.Id = "tmpl_fakeId";

            templatesApiMock.Setup(x => x.TemplateUpdate(fakeTemplate.Id, templateUpdate, It.IsAny<int>())).Returns(fakeTemplate);

            Template response = templatesApiMock.Object.TemplateUpdate(fakeTemplate.Id, templateUpdate);

            Assert.IsInstanceOf<Template>(response);
            Assert.AreEqual(response.Id, fakeTemplate.Id);
        }

        /// <summary>
        /// Test TemplateUpdateHandlesException
        /// </summary>
        [Test]
        public void TemplateUpdateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templatesApiMock.Setup(x => x.TemplateUpdate(null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templatesApiMock.Object.TemplateUpdate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
