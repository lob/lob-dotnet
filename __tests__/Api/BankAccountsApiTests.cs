/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing BankAccountsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class BankAccountsApiTests : IDisposable
    {
        private Mock<IBankAccountsApi> bankAccountsApiMock;
        private BankAccountList fakeBankAccountList;
        private BankAccount fakeBankAccount;

        public BankAccountsApiTests()
        {
            bankAccountsApiMock = new Mock<IBankAccountsApi>();

            fakeBankAccount = new BankAccount(
                default(string), // description
                "fake routing number", // routingNumber
                "fake account number", // accountNumber
                default(BankAccount.AccountTypeEnum), // accountType
                "fake signatory", // signatory
                default(Dictionary<string, string>), // metadata
                "bank_fakeId", // id
                default(string), // signatureUrl
                default(string), // bankName
                false, // verified
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                BankAccount.ObjectEnum.BankAccount // _object
            );

            List<BankAccount> listOfBankAccounts = new List<BankAccount>();
            BankAccount data1 = new BankAccount(
                default(string), // description
                "fake routing number", // routingNumber
                "fake account number", // accountNumber
                default(BankAccount.AccountTypeEnum), // accountType
                "fake signatory", // signatory
                default(Dictionary<string, string>), // metadata
                "bank_fakeId1", // id
                default(string), // signatureUrl
                default(string), // bankName
                false, // verified
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                BankAccount.ObjectEnum.BankAccount // _object
            );
            BankAccount data2 = new BankAccount(
                default(string), // description
                "fake routing number", // routingNumber
                "fake account number", // accountNumber
                default(BankAccount.AccountTypeEnum), // accountType
                "fake signatory", // signatory
                default(Dictionary<string, string>), // metadata
                "bank_fakeId2", // id
                default(string), // signatureUrl
                default(string), // bankName
                false, // verified
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                BankAccount.ObjectEnum.BankAccount // _object
            );

            listOfBankAccounts.Add(data1);
            listOfBankAccounts.Add(data2);

            fakeBankAccountList = new BankAccountList();

            fakeBankAccountList.Data = listOfBankAccounts;
            fakeBankAccountList.Object = "list";
            fakeBankAccountList.Count = listOfBankAccounts.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test BankAccountCreate
        /// </summary>
        [Test]
        public void BankAccountCreateTest()
        {
            BankAccountWritable bankAccountWritable = new BankAccountWritable(
                null,
                "123456789",
                "fake account",
                BankTypeEnum.Individual,
                "fake signatory",
                null
            );

            bankAccountsApiMock.Setup(x => x.BankAccountCreate(bankAccountWritable, It.IsAny<int>())).Returns(fakeBankAccount);
            BankAccount response = bankAccountsApiMock.Object.BankAccountCreate(bankAccountWritable);

            Assert.IsInstanceOf<BankAccount>(response);
            Assert.AreEqual(response.Id, fakeBankAccount.Id);
        }

        /// <summary>
        /// Test BankAccountCreateHandlesException
        /// </summary>
        [Test]
        public void BankAccountCreateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            bankAccountsApiMock.Setup(x => x.BankAccountCreate(null, It.IsAny<int>())).Throws(fakeException);
            try {
                BankAccount response = bankAccountsApiMock.Object.BankAccountCreate(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test BankAccountDelete
        /// </summary>
        [Test]
        public void BankAccountDeleteTest()
        {
            BankAccountDeletion fakeBankAccount = new BankAccountDeletion();

            fakeBankAccount.Id = "bank_fakeId";
            fakeBankAccount.Deleted = true;

            bankAccountsApiMock.Setup(x => x.BankAccountDelete(fakeBankAccount.Id, It.IsAny<int>())).Returns(fakeBankAccount);

            var response = bankAccountsApiMock.Object.BankAccountDelete(fakeBankAccount.Id);

            Assert.IsInstanceOf<BankAccountDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeBankAccount.Deleted);
            Assert.AreEqual(response.Id, fakeBankAccount.Id);
        }

        /// <summary>
        /// Test BankAccountDeleteHandlesException
        /// </summary>
        [Test]
        public void BankAccountDeleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            bankAccountsApiMock.Setup(x => x.BankAccountDelete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = bankAccountsApiMock.Object.BankAccountDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test BankAccountRetrieve
        /// </summary>
        [Test]
        public void BankAccountRetrieveTest()
        {
            fakeBankAccount.Id = "bank_fakeId";
            bankAccountsApiMock.Setup(x => x.BankAccountRetrieve(fakeBankAccount.Id, It.IsAny<int>())).Returns(fakeBankAccount);
            BankAccount response = bankAccountsApiMock.Object.BankAccountRetrieve(fakeBankAccount.Id);

            Assert.IsInstanceOf<BankAccount>(response);
            Assert.AreEqual(response.Id, fakeBankAccount.Id);
        }

        /// <summary>
        /// Test BankAccountRetrieveHandlesException
        /// </summary>
        [Test]
        public void BankAccountRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            bankAccountsApiMock.Setup(x => x.BankAccountRetrieve("bank_fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = bankAccountsApiMock.Object.BankAccountRetrieve("bank_fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test BankAccountList
        /// </summary>
        [Test]
        public void BankAccountListTest()
        {
            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, null, null, null, null, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListHandlesException
        /// </summary>
        [Test]
        public void BankAccountListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = bankAccountsApiMock.Object.BankAccountsList(null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test BankAccountListWithLimitParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithLimitParam()
        {
            int limit = 2;

            bankAccountsApiMock.Setup(x => x.BankAccountsList(limit, null, null, null, null, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(limit, null, null, null, null, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListWithBeforeParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithBeforeParam()
        {
            string before = "before";

            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, before, null, null, null, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, before, null, null, null, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListWithAfterParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithAfterParam()
        {
            string after = "after";

            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, after, null, null, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, null, after, null, null, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListWithIncludeParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, null, include, null, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, null, null, include, null, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListWithDateCreatedParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, null, null, dateCreated, null, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, null, null, null, dateCreated, null);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountListWithMetadataParam
        /// </summary>
        [Test]
        public void BankAccountListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            bankAccountsApiMock.Setup(x => x.BankAccountsList(null, null, null, null, null, metadata, It.IsAny<int>())).Returns(fakeBankAccountList);

            var response = bankAccountsApiMock.Object.BankAccountsList(null, null, null, null, null, metadata);

            Assert.IsInstanceOf<BankAccountList>(response);
            Assert.AreEqual(response.Count, fakeBankAccountList.Count);
        }

        /// <summary>
        /// Test BankAccountVerify
        /// </summary>
        [Test]
        public void BankAccountVerifyTest()
        {
            List<int> amounts = new List<int>();
            amounts.Add(1);
            amounts.Add(2);

            BankAccountVerify bankAccountVerify = new BankAccountVerify(amounts);

            bankAccountsApiMock.Setup(x => x.BankAccountVerify(fakeBankAccount.Id, bankAccountVerify, It.IsAny<int>())).Returns(fakeBankAccount);

            BankAccount response = bankAccountsApiMock.Object.BankAccountVerify(fakeBankAccount.Id, bankAccountVerify);

            Assert.IsInstanceOf<BankAccount>(response);
            Assert.AreEqual(response.Id, fakeBankAccount.Id);
        }

        /// <summary>
        /// Test BankAccountVerifyHandlesException
        /// </summary>
        [Test]
        public void BankAccountVerifyTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            bankAccountsApiMock.Setup(x => x.BankAccountVerify("bank_fakeId", null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = bankAccountsApiMock.Object.BankAccountVerify("bank_fakeId", null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
