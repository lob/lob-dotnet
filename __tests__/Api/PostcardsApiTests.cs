/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing PostcardsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class PostcardsApiTests : IDisposable
    {
        private Mock<IPostcardsApi> PostcardsApiMock;
        private PostcardList fakePostcardList;
        private Postcard fakePostcard;

        public PostcardsApiTests()
        {
            PostcardsApiMock = new Mock<IPostcardsApi>();

            List<Postcard> listOfPostcards = new List<Postcard>();
            fakePostcard = new Postcard();
            fakePostcard.setId("psc_fakeId");
            fakePostcard.setTo(default(Address));
            fakePostcard.setFrom(default(AddressDomesticExpanded));
            fakePostcard.setCarrier(Postcard.CarrierEnum.USPS);
            fakePostcard.setThumbnails(default(List<Thumbnail>));
            fakePostcard.setSize(default(PostcardSize));
            fakePostcard.setExpectedDeliveryDate(default(DateTime));
            fakePostcard.setDateCreated(default(DateTime));
            fakePostcard.setDateModified(default(DateTime));
            fakePostcard.setDeleted(default(bool));
            fakePostcard.setFrontTemplateId(default(string));
            fakePostcard.setBackTemplateId(default(string));
            fakePostcard.setFrontTemplateVersionId(default(string));
            fakePostcard.setBackTemplateVersionId(default(string));
            fakePostcard.setTrackingEvents(default(List<TrackingEventNormal>));
            fakePostcard.setObject(Postcard.ObjectEnum.Postcard);
            fakePostcard.setUrl("fake url");
            fakePostcard.setDescription(default(string));
            fakePostcard.setMetadata(default(Dictionary<string, string>));
            fakePostcard.setMailType(default(MailType));
            fakePostcard.setMergeVariables(default(Object));
            fakePostcard.setSendDate(default(DateTime));

            Postcard data1 = new Postcard();
            data1.setId("psc_fakeId1");
            data1.setTo(default(Address));
            data1.setFrom(default(AddressDomesticExpanded));
            data1.setCarrier(Postcard.CarrierEnum.USPS);
            data1.setThumbnails(default(List<Thumbnail>));
            data1.setSize(default(PostcardSize));
            data1.setExpectedDeliveryDate(default(DateTime));
            data1.setDateCreated(default(DateTime));
            data1.setDateModified(default(DateTime));
            data1.setDeleted(default(bool));
            data1.setFrontTemplateId(default(string));
            data1.setBackTemplateId(default(string));
            data1.setFrontTemplateVersionId(default(string));
            data1.setBackTemplateVersionId(default(string));
            data1.setTrackingEvents(default(List<TrackingEventNormal>));
            data1.setObject(Postcard.ObjectEnum.Postcard);
            data1.setUrl("fake url");
            data1.setDescription(default(string));
            data1.setMetadata(default(Dictionary<string, string>));
            data1.setMailType(default(MailType));
            data1.setMergeVariables(default(Object));
            data1.setSendDate(default(DateTime));
            Postcard data2 = new Postcard();
            data2.setId("psc_fakeId2");
            data2.setTo(default(Address));
            data2.setFrom(default(AddressDomesticExpanded));
            data2.setCarrier(Postcard.CarrierEnum.USPS);
            data2.setThumbnails(default(List<Thumbnail>));
            data2.setSize(default(PostcardSize));
            data2.setExpectedDeliveryDate(default(DateTime));
            data2.setDateCreated(default(DateTime));
            data2.setDateModified(default(DateTime));
            data2.setDeleted(default(bool));
            data2.setFrontTemplateId(default(string));
            data2.setBackTemplateId(default(string));
            data2.setFrontTemplateVersionId(default(string));
            data2.setBackTemplateVersionId(default(string));
            data2.setTrackingEvents(default(List<TrackingEventNormal>));
            data2.setObject(Postcard.ObjectEnum.Postcard);
            data2.setUrl("fake url");
            data2.setDescription(default(string));
            data2.setMetadata(default(Dictionary<string, string>));
            data2.setMailType(default(MailType));
            data2.setMergeVariables(default(Object));
            data2.setSendDate(default(DateTime));

            listOfPostcards.Add(data1);
            listOfPostcards.Add(data2);

            fakePostcardList = new PostcardList();

            fakePostcardList.setData(listOfPostcards);
            fakePostcardList.setObject("list");
            fakePostcardList.setCount(listOfPostcards.Count);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test PostcardCreate
        /// </summary>
        [Test]
        public void PostcardCreateTest()
        {
            PostcardEditable postcardEditable = new PostcardEditable();
            postcardEditable.setTo("adr_fakeId");
            postcardEditable.setFrom("adr_fakeId");
            postcardEditable.setSize(default(PostcardSize));
            postcardEditable.setDescription("C# unit test postcard");
            postcardEditable.setMetadata(default(Dictionary<string, string>));
            postcardEditable.setMailType(default(MailType));
            postcardEditable.setMergeVariables(default(Object));
            postcardEditable.setSendDate(default(DateTime));
            postcardEditable.setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf");
            postcardEditable.setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf");
            postcardEditable.setBillingGroupId(default(string));

            PostcardsApiMock.Setup(x => x.PostcardCreate(postcardEditable, null, It.IsAny<int>())).Returns(fakePostcard);
            Postcard response = PostcardsApiMock.Object.PostcardCreate(postcardEditable);
            Assert.IsInstanceOf<Postcard>(response);
            Assert.AreEqual(response.getId(), fakePostcard.getId());
        }

        /// <summary>
        /// Test PostcardCreateHandlesException
        /// </summary>
        [Test]
        public void PostcardCreateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            PostcardsApiMock.Setup(x => x.PostcardCreate(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                Postcard response = PostcardsApiMock.Object.PostcardCreate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardDelete
        /// </summary>
        [Test]
        public void PostcardDeleteTest()
        {
            PostcardDeletion fakePostcard = new PostcardDeletion();

            fakePostcard.setId("psc_fakeId");
            fakePostcard.setDeleted(true);

            PostcardsApiMock.Setup(x => x.PostcardDelete(fakePostcard.getId(), It.IsAny<int>())).Returns(fakePostcard);

            var response = PostcardsApiMock.Object.PostcardDelete(fakePostcard.getId());

            Assert.IsInstanceOf<PostcardDeletion>(response);
            Assert.AreEqual(response.getDeleted(), fakePostcard.getDeleted());
            Assert.AreEqual(response.getId(), fakePostcard.getId());
        }

        /// <summary>
        /// Test PostcardDeleteHandlesException
        /// </summary>
        [Test]
        public void PostcardDeleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            PostcardsApiMock.Setup(x => x.PostcardDelete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = PostcardsApiMock.Object.PostcardDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardRetrieve
        /// </summary>
        [Test]
        public void PostcardRetrieveTest()
        {
            PostcardsApiMock.Setup(x => x.PostcardRetrieve(fakePostcard.getId(), It.IsAny<int>())).Returns(fakePostcard);
            Postcard response = PostcardsApiMock.Object.PostcardRetrieve(fakePostcard.getId());

            Assert.IsInstanceOf<Postcard>(response);
            Assert.AreEqual(response.getId(), fakePostcard.getId());
        }

        /// <summary>
        /// Test PostcardRetrieveHandlesException
        /// </summary>
        [Test]
        public void PostcardRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            PostcardsApiMock.Setup(x => x.PostcardRetrieve("psc_fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = PostcardsApiMock.Object.PostcardRetrieve("psc_fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardList
        /// </summary>
        [Test]
        public void PostcardListTest()
        {
            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListHandlesException
        /// </summary>
        [Test]
        public void PostcardListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardListWithLimitParam
        /// </summary>
        [Test]
        public void PostcardListTestWithLimitParam()
        {
            int limit = 2;

            PostcardsApiMock.Setup(x => x.PostcardsList(limit, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(limit, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithBeforeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithBeforeParam()
        {
            string before = "before";

            PostcardsApiMock.Setup(x => x.PostcardsList(null, before, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, before, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithAfterParam
        /// </summary>
        [Test]
        public void PostcardListTestWithAfterParam()
        {
            string after = "after";

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, after, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, after, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithIncludeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, include, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, include, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithDateCreatedParam
        /// </summary>
        [Test]
        public void PostcardListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            dateCreated.Add("gt", DateTime.Now);
            dateCreated.Add("lt", DateTime.Now);

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, dateCreated, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, dateCreated, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithMetadataParam
        /// </summary>
        [Test]
        public void PostcardListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, metadata, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, metadata, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithSizeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSizeParam()
        {
            List<PostcardSize> size = new List<PostcardSize>{PostcardSize._4x6};

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, size, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, size, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithScheduledParam
        /// </summary>
        [Test]
        public void PostcardListTestWithScheduledParam()
        {
            Boolean scheduled = true;

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, scheduled, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, scheduled, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithSendDateParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSendDateParam()
        {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            sendDate.Add("gt", "2020-01-01");
            sendDate.Add("lt", "2020-01-31T12");

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, null, sendDate, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, null, sendDate, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithMailTypeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithMailTypeParam()
        {
            MailType mailType = MailType.FirstClass;

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, null, null, mailType, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, null, null, mailType, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }

        /// <summary>
        /// Test PostcardListWithSortByParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSortByParam()
        {
            SortBy5 sortBy = new SortBy5();
            sortBy.setSendDate(SortBy5.SendDateEnum.Asc);

            PostcardsApiMock.Setup(x => x.PostcardsList(null, null, null, null, null, null, null, null, null, null, sortBy, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.PostcardsList(null, null, null, null, null, null, null, null, null, null, sortBy);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.getCount(), fakePostcardList.getCount());
        }
    }
}
