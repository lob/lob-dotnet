/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using static lob.dotnet.Model.Postcard;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing PostcardsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class PostcardsApiTests : IDisposable
    {
        private Mock<IPostcardsApi> PostcardsApiMock;
        private PostcardList fakePostcardList;
        private Postcard fakePostcard;

        public PostcardsApiTests()
        {
            PostcardsApiMock = new Mock<IPostcardsApi>();

            List<Postcard> listOfPostcards = new List<Postcard>();
            fakePostcard = new Postcard(
                "psc_fakeId",
                default(Address),
                default(AddressDomesticExpanded),
                CarrierEnum.USPS,
                default(List<Thumbnail>),
                default(PostcardSize),
                default(DateTime),
                default(DateTime),
                default(DateTime),
                default(bool),
                default(string),
                default(string),
                default(string),
                default(string),
                default(List<TrackingEventNormal>),
                ObjectEnum.Postcard,
                "fake url",
                default(string),
                default(Dictionary<string, string>),
                default(MailType),
                default(Object),
                default(DateTime)
            );
            Postcard data1 = new Postcard(
                "psc_fakeId1",
                default(Address),
                default(AddressDomesticExpanded),
                CarrierEnum.USPS,
                default(List<Thumbnail>),
                default(PostcardSize),
                default(DateTime),
                default(DateTime),
                default(DateTime),
                default(bool),
                default(string),
                default(string),
                default(string),
                default(string),
                default(List<TrackingEventNormal>),
                ObjectEnum.Postcard,
                "fake url",
                default(string),
                default(Dictionary<string, string>),
                default(MailType),
                default(Object),
                default(DateTime)
            );
            Postcard data2 = new Postcard(
                "psc_fakeId2",
                default(Address),
                default(AddressDomesticExpanded),
                CarrierEnum.USPS,
                default(List<Thumbnail>),
                default(PostcardSize),
                default(DateTime),
                default(DateTime),
                default(DateTime),
                default(bool),
                default(string),
                default(string),
                default(string),
                default(string),
                default(List<TrackingEventNormal>),
                ObjectEnum.Postcard,
                "fake url",
                default(string),
                default(Dictionary<string, string>),
                default(MailType),
                default(Object),
                default(DateTime)
            );

            listOfPostcards.Add(data1);
            listOfPostcards.Add(data2);

            fakePostcardList = new PostcardList();

            fakePostcardList.Data = listOfPostcards;
            fakePostcardList.Object = "list";
            fakePostcardList.Count = listOfPostcards.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test create
        /// </summary>
        [Test]
        public void createTest()
        {
            PostcardEditable postcardEditable = new PostcardEditable(
                "adr_fakeId", // to
                "adr_fakeId", // from
                default(PostcardSize), // size
                "C# unit test postcard", // description
                default(Dictionary<string, string>), // metadata
                default(MailType), // mailType
                default(Object), // mergeVariables
                default(DateTime), // sendDate
                "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf", // front
                "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf", // back
                default(string) // billingGroupId
            );

            PostcardsApiMock.Setup(x => x.create(postcardEditable, null, It.IsAny<int>())).Returns(fakePostcard);
            Postcard response = PostcardsApiMock.Object.create(postcardEditable);
            Assert.IsInstanceOf<Postcard>(response);
            Assert.AreEqual(response.Id, fakePostcard.Id);
        }

        /// <summary>
        /// Test createHandlesException
        /// </summary>
        [Test]
        public void createTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            PostcardsApiMock.Setup(x => x.create(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                Postcard response = PostcardsApiMock.Object.create(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test delete
        /// </summary>
        [Test]
        public void deleteTest()
        {
            PostcardDeletion fakePostcard = new PostcardDeletion();

            fakePostcard.Id = "psc_fakeId";
            fakePostcard.Deleted = true;

            PostcardsApiMock.Setup(x => x.cancel(fakePostcard.Id, It.IsAny<int>())).Returns(fakePostcard);

            var response = PostcardsApiMock.Object.cancel(fakePostcard.Id);

            Assert.IsInstanceOf<PostcardDeletion>(response);
            Assert.AreEqual(response.Deleted, fakePostcard.Deleted);
            Assert.AreEqual(response.Id, fakePostcard.Id);
        }

        /// <summary>
        /// Test deleteHandlesException
        /// </summary>
        [Test]
        public void deleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            PostcardsApiMock.Setup(x => x.cancel(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = PostcardsApiMock.Object.cancel(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test get
        /// </summary>
        [Test]
        public void getTest()
        {
            PostcardsApiMock.Setup(x => x.get(fakePostcard.Id, It.IsAny<int>())).Returns(fakePostcard);
            Postcard response = PostcardsApiMock.Object.get(fakePostcard.Id);

            Assert.IsInstanceOf<Postcard>(response);
            Assert.AreEqual(response.Id, fakePostcard.Id);
        }

        /// <summary>
        /// Test getHandlesException
        /// </summary>
        [Test]
        public void getTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            PostcardsApiMock.Setup(x => x.get("psc_fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = PostcardsApiMock.Object.get("psc_fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardList
        /// </summary>
        [Test]
        public void PostcardListTest()
        {
            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListHandlesException
        /// </summary>
        [Test]
        public void PostcardListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test PostcardListWithLimitParam
        /// </summary>
        [Test]
        public void PostcardListTestWithLimitParam()
        {
            int limit = 2;

            PostcardsApiMock.Setup(x => x.list(limit, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(limit, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithBeforeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithBeforeParam()
        {
            string before = "before";

            PostcardsApiMock.Setup(x => x.list(null, before, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, before, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithAfterParam
        /// </summary>
        [Test]
        public void PostcardListTestWithAfterParam()
        {
            string after = "after";

            PostcardsApiMock.Setup(x => x.list(null, null, after, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, after, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithIncludeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            PostcardsApiMock.Setup(x => x.list(null, null, null, include, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, include, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithDateCreatedParam
        /// </summary>
        [Test]
        public void PostcardListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            dateCreated.Add("gt", DateTime.Now);
            dateCreated.Add("lt", DateTime.Now);

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, dateCreated, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, dateCreated, null, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithMetadataParam
        /// </summary>
        [Test]
        public void PostcardListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, metadata, null, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, metadata, null, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithSizeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSizeParam()
        {
            List<PostcardSize> size = new List<PostcardSize>{PostcardSize._4x6};

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, size, null, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, size, null, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithScheduledParam
        /// </summary>
        [Test]
        public void PostcardListTestWithScheduledParam()
        {
            Boolean scheduled = true;

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, scheduled, null, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, scheduled, null, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithSendDateParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSendDateParam()
        {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            sendDate.Add("gt", "2020-01-01");
            sendDate.Add("lt", "2020-01-31T12");

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, sendDate, null, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, null, sendDate, null, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithMailTypeParam
        /// </summary>
        [Test]
        public void PostcardListTestWithMailTypeParam()
        {
            MailType mailType = MailType.FirstClass;

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, mailType, null, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, null, null, mailType, null);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }

        /// <summary>
        /// Test PostcardListWithSortByParam
        /// </summary>
        [Test]
        public void PostcardListTestWithSortByParam()
        {
            SortBy3 sortBy = new SortBy3(null, SortBy3.SendDateEnum.Asc);

            PostcardsApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, null, sortBy, It.IsAny<int>())).Returns(fakePostcardList);

            var response = PostcardsApiMock.Object.list(null, null, null, null, null, null, null, null, null, null, sortBy);

            Assert.IsInstanceOf<PostcardList>(response);
            Assert.AreEqual(response.Count, fakePostcardList.Count);
        }
    }
}
