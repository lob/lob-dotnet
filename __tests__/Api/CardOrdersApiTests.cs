/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing CardOrdersApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class CardOrdersApiTests : IDisposable
    {
        private Mock<ICardOrdersApi> cardOrdersApiMock;

        public CardOrdersApiTests()
        {
            cardOrdersApiMock = new Mock<ICardOrdersApi>();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test CardOrderCreate
        /// </summary>
        [Test]
        public void CardOrderCreateTest()
        {
            CardOrder fakeCardOrder = new CardOrder();
            fakeCardOrder.Id = "co_fakeId";

            CardOrderEditable cardOrderEditable = new CardOrderEditable(10000);

            cardOrdersApiMock.Setup(x => x.CardOrderCreate("card_fakeId", cardOrderEditable, It.IsAny<int>())).Returns(fakeCardOrder);
            CardOrder response = cardOrdersApiMock.Object.CardOrderCreate("card_fakeId", cardOrderEditable);

            Assert.IsInstanceOf<CardOrder>(response);
            Assert.AreEqual(response.Id, "co_fakeId");
        }

        /// <summary>
        /// Test CardOrderCreateHandlesException
        /// </summary>
        [Test]
        public void CardOrderCreateTestHandlesException()
        {
            CardOrder fakeCardOrder = new CardOrder();
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            cardOrdersApiMock.Setup(x => x.CardOrderCreate(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                CardOrder response = cardOrdersApiMock.Object.CardOrderCreate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardOrdersRetrieve
        /// </summary>
        [Test]
        public void CardOrdersRetrieveTest()
        {
            Card fakeCard = new Card();
            fakeCard.Id = "card_fakeId";

            CardOrder fakeCardOrder = new CardOrder();
            fakeCardOrder.CardId = fakeCard.Id;

            CardOrderList fakeCardOrderList = new CardOrderList();
            List<CardOrder> cardOrders = new List<CardOrder>();
            cardOrders.Add(fakeCardOrder);
            fakeCardOrderList.Data = cardOrders;

            cardOrdersApiMock.Setup(x => x.CardOrdersRetrieve(fakeCard.Id, null, null, It.IsAny<int>())).Returns(fakeCardOrderList);
            CardOrderList response = cardOrdersApiMock.Object.CardOrdersRetrieve(fakeCard.Id);

            Assert.IsInstanceOf<CardOrderList>(response);

            Boolean retrievedCardOrder = false;
            foreach(var cardOrder in response.Data) {
                if (cardOrder.CardId == fakeCard.Id)
                    retrievedCardOrder = true;
            }
            Assert.True(retrievedCardOrder);
        }

        /// <summary>
        /// Test CardOrdersRetrieveHandlesException
        /// </summary>
        [Test]
        public void CardOrdersRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardOrdersApiMock.Setup(x => x.CardOrdersRetrieve(null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardOrdersApiMock.Object.CardOrdersRetrieve(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
