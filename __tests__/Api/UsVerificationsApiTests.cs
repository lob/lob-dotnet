/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing UsVerificationsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class UsVerificationsApiTests : IDisposable
    {
        private Mock<IUsVerificationsApi> usVerificationsApiMock;
        private UsVerificationsWritable usVerificationsWritable;
        private MultipleComponentsList addressList;
        private List<MultipleComponents> addresses;

        public UsVerificationsApiTests()
        {
            usVerificationsApiMock = new Mock<IUsVerificationsApi>();
            usVerificationsWritable = new UsVerificationsWritable();
            usVerificationsWritable.setPrimaryLine("370 WATER ST");
            usVerificationsWritable.setZipCode("07090");

            MultipleComponents address1 = new MultipleComponents();
            address1.setPrimaryLine("370 WATER ST");
            address1.setZipCode("12345");

            MultipleComponents address2 = new MultipleComponents();
            address2.setPrimaryLine("012 PLACEHOLDER ST");
            address2.setZipCode("12345");

            addresses = new List<MultipleComponents>();
            addresses.Add(address1);
            addresses.Add(address2);

            addressList = new MultipleComponentsList();
            addressList.setAddresses(addresses);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test UsVerificationVerifySingle
        /// </summary>
        [Test]
        public void UsVerificationVerifySingleTest()
        {
            UsVerification fakeUsVerification = new UsVerification();
            fakeUsVerification.setDeliverability(UsVerification.DeliverabilityEnum.Deliverable);

            usVerificationsApiMock.Setup(x => x.UsVerification(usVerificationsWritable, null, It.IsAny<int>())).Returns(fakeUsVerification);
            UsVerification response = usVerificationsApiMock.Object.UsVerification(usVerificationsWritable, null);

            Assert.IsInstanceOf<UsVerification>(response);
            Assert.AreEqual(response.getDeliverability(), fakeUsVerification.getDeliverability());
        }

        /// <summary>
        /// Test UsVerificationVerifySingleWithCase
        /// </summary>
        [Test]
        public void UsVerificationVerifySingleTestWithCase()
        {
            UsVerification fakeUsVerification = new UsVerification();
            fakeUsVerification.setDeliverability(UsVerification.DeliverabilityEnum.Deliverable);

            usVerificationsApiMock.Setup(x => x.UsVerification(usVerificationsWritable, "upper", It.IsAny<int>())).Returns(fakeUsVerification);
            UsVerification response = usVerificationsApiMock.Object.UsVerification(usVerificationsWritable, "upper");

            Assert.IsInstanceOf<UsVerification>(response);
            Assert.AreEqual(response.getDeliverability(), fakeUsVerification.getDeliverability());
        }

        /// <summary>
        /// Test UsVerificationVerifySingleHandlesException
        /// </summary>
        [Test]
        public void UsVerificationVerifySingleTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            usVerificationsApiMock.Setup(x => x.UsVerification(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                UsVerification response = usVerificationsApiMock.Object.UsVerification(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test UsVerificationVerifyBulk
        /// </summary>
        [Test]
        public void UsVerificationVerifyBulkTest()
        {
            List<UsVerificationOrError> fakeAddresses = new List<UsVerificationOrError>();
            UsVerificationOrError fakeAddress = new UsVerificationOrError();
            fakeAddress.setId("us_ver_fakeId");
            fakeAddress.setDeliverability(UsVerificationOrError.DeliverabilityEnum.Deliverable);
            fakeAddresses.Add(fakeAddress);
            fakeAddresses.Add(fakeAddress);

            UsVerifications fakeUsVerifications = new UsVerifications();
            fakeUsVerifications.setAddresses(fakeAddresses);
            fakeUsVerifications.setErrors(true);

            usVerificationsApiMock.Setup(x => x.BulkUsVerifications(addressList, null, It.IsAny<int>())).Returns(fakeUsVerifications);
            UsVerifications response = usVerificationsApiMock.Object.BulkUsVerifications(addressList, null);

            Assert.IsInstanceOf<UsVerifications>(response);
            Assert.AreEqual(response.getAddresses().Count, addresses.Count);
        }

        /// <summary>
        /// Test UsVerificationVerifyBulkWithCase
        /// </summary>
        [Test]
        public void UsVerificationVerifyBulkTestWithCase()
        {
            List<UsVerificationOrError> fakeAddresses = new List<UsVerificationOrError>();
            UsVerificationOrError fakeAddress = new UsVerificationOrError();
            fakeAddress.setId("us_ver_fakeId");
            fakeAddress.setDeliverability(UsVerificationOrError.DeliverabilityEnum.Deliverable);

            fakeAddresses.Add(fakeAddress);
            fakeAddresses.Add(fakeAddress);

            UsVerifications fakeUsVerifications = new UsVerifications();
            fakeUsVerifications.setAddresses(fakeAddresses);
            fakeUsVerifications.setErrors(true);

            usVerificationsApiMock.Setup(x => x.BulkUsVerifications(addressList, "upper", It.IsAny<int>())).Returns(fakeUsVerifications);
            UsVerifications response = usVerificationsApiMock.Object.BulkUsVerifications(addressList, "upper");

            Assert.IsInstanceOf<UsVerifications>(response);
            Assert.AreEqual(response.getAddresses().Count, addresses.Count);
        }

        /// <summary>
        /// Test UsVerificationVerifyBulkHandlesException
        /// </summary>
        [Test]
        public void UsVerificationVerifyBulkTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            usVerificationsApiMock.Setup(x => x.BulkUsVerifications(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                UsVerifications response = usVerificationsApiMock.Object.BulkUsVerifications(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
