/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing IntlVerificationsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class IntlVerificationsApiTests : IDisposable
    {
        private Mock<IIntlVerificationsApi> intlVerificationsApiMock;
        private IntlVerificationWritable mockVerificationWritable;
        private IntlVerification mockIntlVerificationResponse;
        private IntlVerificationsPayload mockMultipleComponentsList;
        private IntlVerifications mockIntlVerificationBulkResponse;
        private List<MultipleComponentsIntl> addresses;

        public IntlVerificationsApiTests()
        {
            intlVerificationsApiMock = new Mock<IIntlVerificationsApi>();
            mockIntlVerificationResponse = new IntlVerification("intl_ver_fakeId");
            mockVerificationWritable = new IntlVerificationWritable();

            MultipleComponentsIntl item1 = new MultipleComponentsIntl(null, "123 street");
            MultipleComponentsIntl item2 = new MultipleComponentsIntl(null, "456 street");
            MultipleComponentsIntl item3 = new MultipleComponentsIntl(null, "789 street");

            addresses = new List<MultipleComponentsIntl>();
            addresses.Add(item1);
            addresses.Add(item2);
            addresses.Add(item3);

            mockMultipleComponentsList = new IntlVerificationsPayload(addresses);

            IntlVerificationOrError resp1 = new IntlVerificationOrError(null, null, "123 street");
            IntlVerificationOrError resp2 = new IntlVerificationOrError(null, null, "456 street");
            IntlVerificationOrError resp3 = new IntlVerificationOrError(null, null, "789 street");
            List<IntlVerificationOrError> intlVersList = new List<IntlVerificationOrError>();
            intlVersList.Add(resp1);
            intlVersList.Add(resp2);
            intlVersList.Add(resp3);

            mockIntlVerificationBulkResponse = new IntlVerifications(intlVersList);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test IntlVerificationVerifySingle
        /// </summary>
        [Test]
        public void IntlVerificationVerifySingleTest()
        {
            intlVerificationsApiMock.Setup(x => x.IntlVerification(mockVerificationWritable, null, It.IsAny<int>())).Returns(mockIntlVerificationResponse);
            IntlVerification response = intlVerificationsApiMock.Object.IntlVerification(mockVerificationWritable, null);

            Assert.IsInstanceOf<IntlVerification>(response);
            Assert.AreEqual(response.Id, mockIntlVerificationResponse.Id);
        }

        /// <summary>
        /// Test IntlVerificationVerifySingleWithXLangOutput
        /// </summary>
        [Test]
        public void IntlVerificationVerifySingleTestWithXLangOutput()
        {
            intlVerificationsApiMock.Setup(x => x.IntlVerification(mockVerificationWritable, "native", It.IsAny<int>())).Returns(mockIntlVerificationResponse);
            IntlVerification response = intlVerificationsApiMock.Object.IntlVerification(mockVerificationWritable, "native");

            Assert.IsInstanceOf<IntlVerification>(response);
            Assert.AreEqual(response.Id, mockIntlVerificationResponse.Id);
        }

        /// <summary>
        /// Test IntlVerificationVerifySingleHandlesException
        /// </summary>
        [Test]
        public void IntlVerificationVerifySingleTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            intlVerificationsApiMock.Setup(x => x.IntlVerification(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                IntlVerification response = intlVerificationsApiMock.Object.IntlVerification(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test IntlVerificationVerifyBulk
        /// </summary>
        [Test]
        public void IntlVerificationVerifyBulkTest()
        {
            intlVerificationsApiMock.Setup(x => x.BulkIntlVerifications(mockMultipleComponentsList, It.IsAny<int>())).Returns(mockIntlVerificationBulkResponse);
            IntlVerifications response = intlVerificationsApiMock.Object.BulkIntlVerifications(mockMultipleComponentsList);

            Assert.IsInstanceOf<IntlVerifications>(response);
            Assert.AreEqual(response.Addresses.Count, addresses.Count);
            Assert.AreEqual(response.Addresses[0].PrimaryLine, "123 street");
            Assert.AreEqual(response.Addresses[1].PrimaryLine, "456 street");
            Assert.AreEqual(response.Addresses[2].PrimaryLine, "789 street");
        }

        /// <summary>
        /// Test IntlVerificationVerifyBulkHandlesException
        /// </summary>
        [Test]
        public void IntlVerificationVerifyBulkTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            intlVerificationsApiMock.Setup(x => x.BulkIntlVerifications(null, It.IsAny<int>())).Throws(fakeException);
            try {
                IntlVerifications response = intlVerificationsApiMock.Object.BulkIntlVerifications(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
