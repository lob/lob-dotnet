/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing TemplateVersionsApi
    /// </summary>
    [TestFixture]
    [Category("Unit")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class TemplateVersionsApiTests : IDisposable
    {
        private Mock<ITemplateVersionsApi> templateVersionsApiMock;
        private TemplateVersionList fakeTemplateVersionList;
        private TemplateVersion fakeTemplateVersion;

        public TemplateVersionsApiTests()
        {
            templateVersionsApiMock = new Mock<ITemplateVersionsApi>();
            fakeTemplateVersion = new TemplateVersion(
                "vrsn_fakeId", // id
                default(string), // description
                "fake html", // html
                default(EngineHtml), // engine
                default(bool), // suggestJsonEditor
                default(Object), // mergeVariables
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                TemplateVersion.ObjectEnum.Version // _object
            );

            List<TemplateVersion> listOfTemplateVersions = new List<TemplateVersion>();
            TemplateVersion data1 = new TemplateVersion(
                "vrsn_fakeId1", // id
                default(string), // description
                "fake html", // html
                default(EngineHtml), // engine
                default(bool), // suggestJsonEditor
                default(Object), // mergeVariables
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                TemplateVersion.ObjectEnum.Version // _object
            );
            TemplateVersion data2 = new TemplateVersion(
                "vrsn_fakeId2", // id
                default(string), // description
                "fake html", // html
                default(EngineHtml), // engine
                default(bool), // suggestJsonEditor
                default(Object), // mergeVariables
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                TemplateVersion.ObjectEnum.Version // _object
            );

            listOfTemplateVersions.Add(data1);
            listOfTemplateVersions.Add(data2);

            fakeTemplateVersionList = new TemplateVersionList();

            fakeTemplateVersionList.Data = listOfTemplateVersions;
            fakeTemplateVersionList.Object = "list";
            fakeTemplateVersionList.Count = listOfTemplateVersions.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test create
        /// </summary>
        [Test]
        public void createTest()
        {
            TemplateVersionWritable templateVersionWritable = new TemplateVersionWritable(
                "C# templateVersions unit test description", // description
                "<html>Template Versions HTML</html>", // html
                default(EngineHtml) // engine
            );

            templateVersionsApiMock.Setup(x => x.create("tmpl_fakeId", templateVersionWritable, It.IsAny<int>())).Returns(fakeTemplateVersion);
            TemplateVersion response = templateVersionsApiMock.Object.create("tmpl_fakeId", templateVersionWritable);

            Assert.IsInstanceOf<TemplateVersion>(response);
            Assert.AreEqual(response.Id, "vrsn_fakeId");
        }

        /// <summary>
        /// Test createHandlesException
        /// </summary>
        [Test]
        public void createTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templateVersionsApiMock.Setup(x => x.create(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                TemplateVersion response = templateVersionsApiMock.Object.create(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test delete
        /// </summary>
        [Test]
        public void deleteTest()
        {
            TemplateVersionDeletion fakeTemplateVersion = new TemplateVersionDeletion();

            fakeTemplateVersion.Id = "vrsn_fakeId";
            fakeTemplateVersion.Deleted = true;

            templateVersionsApiMock.Setup(x => x.delete("tmpl_fakeId", fakeTemplateVersion.Id, It.IsAny<int>())).Returns(fakeTemplateVersion);

            var response = templateVersionsApiMock.Object.delete("tmpl_fakeId", fakeTemplateVersion.Id);

            Assert.IsInstanceOf<TemplateVersionDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeTemplateVersion.Deleted);
            Assert.AreEqual(response.Id, fakeTemplateVersion.Id);
        }

        /// <summary>
        /// Test deleteHandlesException
        /// </summary>
        [Test]
        public void deleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            templateVersionsApiMock.Setup(x => x.delete(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = templateVersionsApiMock.Object.delete(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test get
        /// </summary>
        [Test]
        public void getTest()
        {
            templateVersionsApiMock.Setup(x => x.get("tmpl_fakeId", fakeTemplateVersion.Id, It.IsAny<int>())).Returns(fakeTemplateVersion);
            TemplateVersion response = templateVersionsApiMock.Object.get("tmpl_fakeId", fakeTemplateVersion.Id);

            Assert.IsInstanceOf<TemplateVersion>(response);
            Assert.AreEqual(response.Id, fakeTemplateVersion.Id);
        }

        /// <summary>
        /// Test getHandlesException
        /// </summary>
        [Test]
        public void getTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templateVersionsApiMock.Setup(x => x.get(null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templateVersionsApiMock.Object.get(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateVersionList
        /// </summary>
        [Test]
        public void TemplateVersionListTest()
        {
            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", null, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", null, null, null, null, null);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test TemplateVersionListHandlesException
        /// </summary>
        [Test]
        public void TemplateVersionListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templateVersionsApiMock.Setup(x => x.list(null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templateVersionsApiMock.Object.list(null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test TemplateVersionListWithLimitParam
        /// </summary>
        [Test]
        public void TemplateVersionListTestWithLimitParam()
        {
            int limit = 2;

            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", limit, null, null, null, null, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", limit, null, null, null, null);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test TemplateVersionListWithBeforeParam
        /// </summary>
        [Test]
        public void TemplateVersionListTestWithBeforeParam()
        {
            string before = "before";

            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", null, before, null, null, null, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", null, before, null, null, null);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test TemplateVersionListWithAfterParam
        /// </summary>
        [Test]
        public void TemplateVersionListTestWithAfterParam()
        {
            string after = "after";

            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", null, null, after, null, null, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", null, null, after, null, null);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test TemplateVersionListWithIncludeParam
        /// </summary>
        [Test]
        public void TemplateVersionListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", null, null, null, include, null, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", null, null, null, include, null);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test TemplateVersionListWithDateCreatedParam
        /// </summary>
        [Test]
        public void TemplateVersionListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            dateCreated.Add("gt", DateTime.Now);
            dateCreated.Add("lt", DateTime.Now);

            templateVersionsApiMock.Setup(x => x.list("tmpl_fakeId", null, null, null, null, dateCreated, It.IsAny<int>())).Returns(fakeTemplateVersionList);

            var response = templateVersionsApiMock.Object.list("tmpl_fakeId", null, null, null, null, dateCreated);

            Assert.IsInstanceOf<TemplateVersionList>(response);
            Assert.AreEqual(response.Count, fakeTemplateVersionList.Count);
        }

        /// <summary>
        /// Test update
        /// </summary>
        [Test]
        public void updateTest()
        {
            TemplateVersionUpdatable update = new TemplateVersionUpdatable("C# unit test templateVersion update description");

            templateVersionsApiMock.Setup(x => x.update("tmpl_fakeId", fakeTemplateVersion.Id, update, It.IsAny<int>())).Returns(fakeTemplateVersion);

            TemplateVersion response = templateVersionsApiMock.Object.update("tmpl_fakeId", fakeTemplateVersion.Id, update);

            Assert.IsInstanceOf<TemplateVersion>(response);
            Assert.AreEqual(response.Description, fakeTemplateVersion.Description);
        }

        /// <summary>
        /// Test updateHandlesException
        /// </summary>
        [Test]
        public void updateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            templateVersionsApiMock.Setup(x => x.update(null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = templateVersionsApiMock.Object.update(null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
