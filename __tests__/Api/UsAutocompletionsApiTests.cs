/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing UsAutocompletionsApi
    /// </summary>
    [TestFixture]
    [Category("Unit")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class UsAutocompletionsApiTests : IDisposable
    {
        private Mock<IUsAutocompletionsApi> usAutocompletionsApiMock;
        private UsAutocompletionsWritable usAutocompletionsWritable;

        public UsAutocompletionsApiTests()
        {
            usAutocompletionsApiMock = new Mock<IUsAutocompletionsApi>();
            usAutocompletionsWritable = new UsAutocompletionsWritable(
                "fake prefix", // addressPrefix
                "fake city", // city
                "XX", // state
                "12345", // zipCode
                false // geoIpSort
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test UsAutocompletion
        /// </summary>
        [Test]
        public void UsAutocompletionTest()
        {
            UsAutocompletions fakeUsAutocompletions = new UsAutocompletions("us_auto_fakeId", new List<Suggestions>());

            usAutocompletionsApiMock.Setup(x => x.autocomplete(usAutocompletionsWritable, It.IsAny<int>())).Returns(fakeUsAutocompletions);
            UsAutocompletions response = usAutocompletionsApiMock.Object.autocomplete(usAutocompletionsWritable);

            Assert.IsInstanceOf<UsAutocompletions>(response);
            Assert.NotNull(response.Suggestions);
            Assert.AreEqual(response.Suggestions.Count, 0);
        }

        /// <summary>
        /// Test UsAutocompletionHandlesException
        /// </summary>
        [Test]
        public void UsAutocompletionTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            usAutocompletionsApiMock.Setup(x => x.autocomplete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                UsAutocompletions response = usAutocompletionsApiMock.Object.autocomplete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
