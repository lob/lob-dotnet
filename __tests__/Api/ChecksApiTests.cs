/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing ChecksApi
    /// </summary>
    [TestFixture]
    public class ChecksApiTests : IDisposable
    {
        private Mock<IChecksApi> ChecksApiMock;
        private CheckList fakeCheckList;
        private Check fakeCheck;

        public ChecksApiTests()
        {
            ChecksApiMock = new Mock<IChecksApi>();

            BankAccount fakeBankAccount = new BankAccount();
            fakeBankAccount.setDescription(default(string));
            fakeBankAccount.setRoutingNumber("fake routing number");
            fakeBankAccount.setAccountNumber("fake account number");
            fakeBankAccount.setAccountType(default(BankAccount.AccountTypeEnum));
            fakeBankAccount.setSignatory("fake signatory");
            fakeBankAccount.setMetadata(default(Dictionary<string, string>));
            fakeBankAccount.setId("bank_fakeId");
            fakeBankAccount.setSignatureUrl(default(string));
            fakeBankAccount.setBankName(default(string));
            fakeBankAccount.setVerified(false);
            fakeBankAccount.setDateCreated(default(DateTime));
            fakeBankAccount.setDateModified(default(DateTime));
            fakeBankAccount.setDeleted(default(bool));
            fakeBankAccount.setObject(BankAccount.ObjectEnum.BankAccount);

            fakeCheck = new Check();
            fakeCheck.setId("chk_fakeId");
            fakeCheck.setTo(new Address());
            fakeCheck.setFrom(default(Address));
            fakeCheck.setDescription(default(string));
            fakeCheck.setMetadata(default(Dictionary<string, string>));
            fakeCheck.setMergeVariables(default(Object));
            fakeCheck.setSendDate(default(DateTime));
            fakeCheck.setMailType(Check.MailTypeEnum.UspsFirstClass);
            fakeCheck.setMemo(default(string));
            fakeCheck.setCheckNumber(default(int));
            fakeCheck.setMessage(default(string));
            fakeCheck.setAmount(default(float));
            fakeCheck.setBankAccount(fakeBankAccount);
            fakeCheck.setCheckBottomTemplateId(default(string));
            fakeCheck.setAttachmentTemplateId(default(string));
            fakeCheck.setCheckBottomTemplateVersionId(default(string));
            fakeCheck.setAttachmentTemplateVersionId(default(string));
            fakeCheck.setUrl("fake url");
            fakeCheck.setCarrier(Check.CarrierEnum.USPS);
            fakeCheck.setThumbnails(default(List<Thumbnail>));
            fakeCheck.setExpectedDeliveryDate(default(DateTime));
            fakeCheck.setTrackingEvents(default(List<TrackingEventNormal>));
            fakeCheck.setObject(Check.ObjectEnum.Check);
            fakeCheck.setDateCreated(default(DateTime));
            fakeCheck.setDateModified(default(DateTime));
            fakeCheck.setDeleted(default(bool));

            List<Check> listOfChecks = new List<Check>();
            Check data1 = new Check();
            data1.setId("chk_fakeId1");
            data1.setTo(new Address());
            data1.setFrom(default(Address));
            data1.setDescription(default(string));
            data1.setMetadata(default(Dictionary<string, string>));
            data1.setMergeVariables(default(Object));
            data1.setSendDate(default(DateTime));
            data1.setMailType(Check.MailTypeEnum.UspsFirstClass);
            data1.setMemo(default(string));
            data1.setCheckNumber(default(int));
            data1.setMessage(default(string));
            data1.setAmount(default(float));
            data1.setBankAccount(fakeBankAccount);
            data1.setCheckBottomTemplateId(default(string));
            data1.setAttachmentTemplateId(default(string));
            data1.setCheckBottomTemplateVersionId(default(string));
            data1.setAttachmentTemplateVersionId(default(string));
            data1.setUrl("fake url");
            data1.setCarrier(Check.CarrierEnum.USPS);
            data1.setThumbnails(default(List<Thumbnail>));
            data1.setExpectedDeliveryDate(default(DateTime));
            data1.setTrackingEvents(default(List<TrackingEventNormal>));
            data1.setObject(Check.ObjectEnum.Check);
            data1.setDateCreated(default(DateTime));
            data1.setDateModified(default(DateTime));
            data1.setDeleted(default(bool));
            Check data2 = new Check();
            data2.setId("chk_fakeId2");
            data2.setTo(new Address());
            data2.setFrom(default(Address));
            data2.setDescription(default(string));
            data2.setMetadata(default(Dictionary<string, string>));
            data2.setMergeVariables(default(Object));
            data2.setSendDate(default(DateTime));
            data2.setMailType(Check.MailTypeEnum.UspsFirstClass);
            data2.setMemo(default(string));
            data2.setCheckNumber(default(int));
            data2.setMessage(default(string));
            data2.setAmount(default(float));
            data2.setBankAccount(fakeBankAccount);
            data2.setCheckBottomTemplateId(default(string));
            data2.setAttachmentTemplateId(default(string));
            data2.setCheckBottomTemplateVersionId(default(string));
            data2.setAttachmentTemplateVersionId(default(string));
            data2.setUrl("fake url");
            data2.setCarrier(Check.CarrierEnum.USPS);
            data2.setThumbnails(default(List<Thumbnail>));
            data2.setExpectedDeliveryDate(default(DateTime));
            data2.setTrackingEvents(default(List<TrackingEventNormal>));
            data2.setObject(Check.ObjectEnum.Check);
            data2.setDateCreated(default(DateTime));
            data2.setDateModified(default(DateTime));
            data2.setDeleted(default(bool));

            listOfChecks.Add(data1);
            listOfChecks.Add(data2);

            fakeCheckList = new CheckList();

            fakeCheckList.setData(listOfChecks);
            fakeCheckList.setObject("list");
            fakeCheckList.setCount(listOfChecks.Count);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test CheckCreate
        /// </summary>
        [Test]
        public void CheckCreateTest()
        {
            CheckEditable checkEditable = new CheckEditable();
            checkEditable.setFrom("adr_fakeId1");
            checkEditable.setTo("adr_fakeId2");
            checkEditable.setBankAccount("bank_fakeId");
            checkEditable.setAmount(100);
            checkEditable.setSendDate(default(DateTime));
            checkEditable.setMailType(default(int));
            checkEditable.setCheckNumber(default(int));
            checkEditable.setMessage("fake message");

            ChecksApiMock.Setup(x => x.CheckCreate(checkEditable, null, It.IsAny<int>())).Returns(fakeCheck);
            Check response = ChecksApiMock.Object.CheckCreate(checkEditable);

            Assert.IsInstanceOf<Check>(response);
            Assert.AreEqual(response.getId(), "chk_fakeId");
        }

        /// <summary>
        /// Test CheckCreateHandlesException
        /// </summary>
        [Test]
        public void CheckCreateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            ChecksApiMock.Setup(x => x.CheckCreate(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                Check response = ChecksApiMock.Object.CheckCreate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckCancel
        /// </summary>
        [Test]
        public void CheckCancelTest()
        {
            CheckDeletion fakeCheck = new CheckDeletion();

            fakeCheck.setId("chk_fakeId");
            fakeCheck.setDeleted(true);

            ChecksApiMock.Setup(x => x.CheckCancel(fakeCheck.getId(), It.IsAny<int>())).Returns(fakeCheck);

            var response = ChecksApiMock.Object.CheckCancel(fakeCheck.getId());

            Assert.IsInstanceOf<CheckDeletion>(response);
            Assert.AreEqual(response.getDeleted(), fakeCheck.getDeleted());
            Assert.AreEqual(response.getId(), fakeCheck.getId());
        }

        /// <summary>
        /// Test CheckCancelHandlesException
        /// </summary>
        [Test]
        public void CheckCancelHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            ChecksApiMock.Setup(x => x.CheckCancel(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = ChecksApiMock.Object.CheckCancel(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckRetrieve
        /// </summary>
        [Test]
        public void CheckRetrieveTest()
        {
            ChecksApiMock.Setup(x => x.CheckRetrieve(fakeCheck.getId(), It.IsAny<int>())).Returns(fakeCheck);
            Check response = ChecksApiMock.Object.CheckRetrieve(fakeCheck.getId());

            Assert.IsInstanceOf<Check>(response);
            Assert.AreEqual(response.getId(), fakeCheck.getId());
        }

        /// <summary>
        /// Test CheckRetrieveHandlesException
        /// </summary>
        [Test]
        public void CheckRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            ChecksApiMock.Setup(x => x.CheckRetrieve("fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = ChecksApiMock.Object.CheckRetrieve("fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckList
        /// </summary>
        [Test]
        public void CheckListTest()
        {
            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListHandlesException
        /// </summary>
        [Test]
        public void CheckListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckListWithLimitParam
        /// </summary>
        [Test]
        public void CheckListTestWithLimitParam()
        {
            int limit = 2;

            ChecksApiMock.Setup(x => x.ChecksList(limit, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(limit, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithBeforeParam
        /// </summary>
        [Test]
        public void CheckListTestWithBeforeParam()
        {
            string before = "before";

            ChecksApiMock.Setup(x => x.ChecksList(null, before, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, before, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithAfterParam
        /// </summary>
        [Test]
        public void CheckListTestWithAfterParam()
        {
            string after = "after";

            ChecksApiMock.Setup(x => x.ChecksList(null, null, after, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, after, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithIncludeParam
        /// </summary>
        [Test]
        public void CheckListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, include, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, include, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithDateCreatedParam
        /// </summary>
        [Test]
        public void CheckListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, dateCreated, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, dateCreated, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithMetadataParam
        /// </summary>
        [Test]
        public void CheckListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, metadata, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, metadata, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithScheduledParam
        /// </summary>
        [Test]
        public void CheckListTestWithScheduledParam()
        {
            Boolean scheduled = true;

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, scheduled, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, scheduled, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithSendDateParam
        /// </summary>
        [Test]
        public void CheckListTestWithSendDateParam()
        {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            sendDate.Add("gt", "2020-01-01");
            sendDate.Add("lt", "2020-01-31T12");

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, null, sendDate, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, null, sendDate, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithMailTypeParam
        /// </summary>
        [Test]
        public void CheckListTestWithMailTypeParam()
        {
            MailType mailType = MailType.FirstClass;

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, null, null, mailType, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, null, null, mailType, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }

        /// <summary>
        /// Test CheckListWithSortByParam
        /// </summary>
        [Test]
        public void CheckListTestWithSortByParam()
        {
            SortBy5 sortBy = new SortBy5();
            sortBy.setSendDate(SortBy5.SendDateEnum.Asc);

            ChecksApiMock.Setup(x => x.ChecksList(null, null, null, null, null, null, null, null, null, sortBy, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.ChecksList(null, null, null, null, null, null, null, null, null, sortBy);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.getCount(), fakeCheckList.getCount());
        }
    }
}
