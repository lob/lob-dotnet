/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing ChecksApi
    /// </summary>
    [TestFixture]
    [Category("Unit")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class ChecksApiTests : IDisposable
    {
        private Mock<IChecksApi> ChecksApiMock;
        private CheckList fakeCheckList;
        private Check fakeCheck;

        public ChecksApiTests()
        {
            ChecksApiMock = new Mock<IChecksApi>();

            BankAccount fakeBankAccount = new BankAccount(
                default(string), // description
                "fake routing number", // routingNumber
                "fake account number", // accountNumber
                default(BankAccount.AccountTypeEnum), // accountType
                "fake signatory", // signatory
                default(Dictionary<string, string>), // metadata
                "bank_fakeId", // id
                default(string), // signatureUrl
                default(string), // bankName
                false, // verified
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                BankAccount.ObjectEnum.BankAccount // _object
            );

            fakeCheck = new Check(
              "chk_fakeId", // id
              new Address(), // to
              default(Address), // from
              default(string), // description
              default(Dictionary<string, string>), // metadata
              default(Object), // mergeVariables
              default(DateTime), // sendDate
              Check.MailTypeEnum.UspsFirstClass, // mailType
              default(string), // memo
              default(int), // checkNumber
              default(string), // message
              default(float), // amount
              fakeBankAccount, // bankAccount
              default(string), // checkBottomTemplateId
              default(string), // attachmentTemplateId
              default(string), // checkBottomTemplateVersionId
              default(string), // attachmentTemplateVersionId
              "fake url", // url
              Check.CarrierEnum.USPS, // carrier
              default(List<Thumbnail>), // thumbnails
              default(DateTime), // expectedDeliveryDate
              default(List<TrackingEventNormal>), // trackingEvents
              Check.ObjectEnum.Check, // _object
              default(DateTime), // dateCreated
              default(DateTime), // dateModified
              default(bool) // deleted
            );

            List<Check> listOfChecks = new List<Check>();
            Check data1 = new Check(
              "chk_fakeId1", // id
              new Address(), // to
              default(Address), // from
              default(string), // description
              default(Dictionary<string, string>), // metadata
              default(Object), // mergeVariables
              default(DateTime), // sendDate
              Check.MailTypeEnum.UspsFirstClass, // mailType
              default(string), // memo
              default(int), // checkNumber
              default(string), // message
              default(float), // amount
              fakeBankAccount, // bankAccount
              default(string), // checkBottomTemplateId
              default(string), // attachmentTemplateId
              default(string), // checkBottomTemplateVersionId
              default(string), // attachmentTemplateVersionId
              "fake url", // url
              Check.CarrierEnum.USPS, // carrier
              default(List<Thumbnail>), // thumbnails
              default(DateTime), // expectedDeliveryDate
              default(List<TrackingEventNormal>), // trackingEvents
              Check.ObjectEnum.Check, // _object
              default(DateTime), // dateCreated
              default(DateTime), // dateModified
              default(bool) // deleted
            );
            Check data2 = new Check(
              "chk_fakeId2", // id
              new Address(), // to
              default(Address), // from
              default(string), // description
              default(Dictionary<string, string>), // metadata
              default(Object), // mergeVariables
              default(DateTime), // sendDate
              Check.MailTypeEnum.UspsFirstClass, // mailType
              default(string), // memo
              default(int), // checkNumber
              default(string), // message
              default(float), // amount
              fakeBankAccount, // bankAccount
              default(string), // checkBottomTemplateId
              default(string), // attachmentTemplateId
              default(string), // checkBottomTemplateVersionId
              default(string), // attachmentTemplateVersionId
              "fake url", // url
              Check.CarrierEnum.USPS, // carrier
              default(List<Thumbnail>), // thumbnails
              default(DateTime), // expectedDeliveryDate
              default(List<TrackingEventNormal>), // trackingEvents
              Check.ObjectEnum.Check, // _object
              default(DateTime), // dateCreated
              default(DateTime), // dateModified
              default(bool) // deleted
            );

            listOfChecks.Add(data1);
            listOfChecks.Add(data2);

            fakeCheckList = new CheckList();

            fakeCheckList.Data = listOfChecks;
            fakeCheckList.Object = "list";
            fakeCheckList.Count = listOfChecks.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test create
        /// </summary>
        [Test]
        public void createTest()
        {
            CheckEditable checkEditable = new CheckEditable(
                "adr_fakeId1", // from
                "adr_fakeId2", // to
                "bank_fakeId", // bankAccount
                100, // amount
                null, // logo
                null, // checkBottom
                null, // attachment
                null, // description
                null, // metadata
                null, // mergeVariables
                default(DateTime), // sendDate
                default(int), // mailType
                null, // memo
                default(int), // checkNumber
                "fake message" // message
            );

            ChecksApiMock.Setup(x => x.create(checkEditable, null, It.IsAny<int>())).Returns(fakeCheck);
            Check response = ChecksApiMock.Object.create(checkEditable);

            Assert.IsInstanceOf<Check>(response);
            Assert.AreEqual(response.Id, "chk_fakeId");
        }

        /// <summary>
        /// Test createHandlesException
        /// </summary>
        [Test]
        public void createTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            ChecksApiMock.Setup(x => x.create(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                Check response = ChecksApiMock.Object.create(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test cancel
        /// </summary>
        [Test]
        public void cancelTest()
        {
            CheckDeletion fakeCheck = new CheckDeletion();

            fakeCheck.Id = "chk_fakeId";
            fakeCheck.Deleted = true;

            ChecksApiMock.Setup(x => x.cancel(fakeCheck.Id, It.IsAny<int>())).Returns(fakeCheck);

            var response = ChecksApiMock.Object.cancel(fakeCheck.Id);

            Assert.IsInstanceOf<CheckDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeCheck.Deleted);
            Assert.AreEqual(response.Id, fakeCheck.Id);
        }

        /// <summary>
        /// Test cancelHandlesException
        /// </summary>
        [Test]
        public void cancelHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            ChecksApiMock.Setup(x => x.cancel(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = ChecksApiMock.Object.cancel(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test get
        /// </summary>
        [Test]
        public void getTest()
        {
            ChecksApiMock.Setup(x => x.get(fakeCheck.Id, It.IsAny<int>())).Returns(fakeCheck);
            Check response = ChecksApiMock.Object.get(fakeCheck.Id);

            Assert.IsInstanceOf<Check>(response);
            Assert.AreEqual(response.Id, fakeCheck.Id);
        }

        /// <summary>
        /// Test getHandlesException
        /// </summary>
        [Test]
        public void getTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            ChecksApiMock.Setup(x => x.get("fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = ChecksApiMock.Object.get("fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckList
        /// </summary>
        [Test]
        public void CheckListTest()
        {
            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListHandlesException
        /// </summary>
        [Test]
        public void CheckListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = ChecksApiMock.Object.list(null, null, null, null, null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CheckListWithLimitParam
        /// </summary>
        [Test]
        public void CheckListTestWithLimitParam()
        {
            int limit = 2;

            ChecksApiMock.Setup(x => x.list(limit, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(limit, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithBeforeParam
        /// </summary>
        [Test]
        public void CheckListTestWithBeforeParam()
        {
            string before = "before";

            ChecksApiMock.Setup(x => x.list(null, before, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, before, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithAfterParam
        /// </summary>
        [Test]
        public void CheckListTestWithAfterParam()
        {
            string after = "after";

            ChecksApiMock.Setup(x => x.list(null, null, after, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, after, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithIncludeParam
        /// </summary>
        [Test]
        public void CheckListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            ChecksApiMock.Setup(x => x.list(null, null, null, include, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, include, null, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithDateCreatedParam
        /// </summary>
        [Test]
        public void CheckListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            ChecksApiMock.Setup(x => x.list(null, null, null, null, dateCreated, null, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, dateCreated, null, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithMetadataParam
        /// </summary>
        [Test]
        public void CheckListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, metadata, null, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, metadata, null, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithScheduledParam
        /// </summary>
        [Test]
        public void CheckListTestWithScheduledParam()
        {
            Boolean scheduled = true;

            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, scheduled, null, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, null, scheduled, null, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithSendDateParam
        /// </summary>
        [Test]
        public void CheckListTestWithSendDateParam()
        {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            sendDate.Add("gt", "2020-01-01");
            sendDate.Add("lt", "2020-01-31T12");

            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, null, sendDate, null, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, null, null, sendDate, null, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithMailTypeParam
        /// </summary>
        [Test]
        public void CheckListTestWithMailTypeParam()
        {
            MailType mailType = MailType.FirstClass;

            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, mailType, null, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, null, null, null, mailType, null);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }

        /// <summary>
        /// Test CheckListWithSortByParam
        /// </summary>
        [Test]
        public void CheckListTestWithSortByParam()
        {
            SortBy3 sortBy = new SortBy3(null, SortBy3.SendDateEnum.Asc);

            ChecksApiMock.Setup(x => x.list(null, null, null, null, null, null, null, null, null, sortBy, It.IsAny<int>())).Returns(fakeCheckList);

            var response = ChecksApiMock.Object.list(null, null, null, null, null, null, null, null, null, sortBy);

            Assert.IsInstanceOf<CheckList>(response);
            Assert.AreEqual(response.Count, fakeCheckList.Count);
        }
    }
}
