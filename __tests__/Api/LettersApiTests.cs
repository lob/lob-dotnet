/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing LettersApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class LettersApiTests : IDisposable
    {
        private Mock<ILettersApi> LettersApiMock;
        private LetterList fakeLetterList;
        private Letter fakeLetter;

        public LettersApiTests()
        {
            LettersApiMock = new Mock<ILettersApi>();
            fakeLetter = new Letter();
            fakeLetter.setTo(new Address());
            fakeLetter.setFrom(new Address());
            fakeLetter.setCarrier(Letter.CarrierEnum.USPS);
            fakeLetter.setThumbnails(default(List<Thumbnail>));
            fakeLetter.setExpectedDeliveryDate(default(DateTime));
            fakeLetter.setDateCreated(default(DateTime));
            fakeLetter.setDateModified(default(DateTime));
            fakeLetter.setDeleted(default(bool));
            fakeLetter.setId("ltr_fakeId");
            fakeLetter.setTemplateId(default(string));
            fakeLetter.setTemplateVersionId(default(string));
            fakeLetter.setObject(Letter.ObjectEnum.Letter);
            fakeLetter.setDescription(default(string));
            fakeLetter.setMetadata(default(Dictionary<string, string>));
            fakeLetter.setMergeVariables(default(Object));
            fakeLetter.setSendDate(default(DateTime));
            fakeLetter.setExtraService(default(string));
            fakeLetter.setTrackingNumber(default(string));
            fakeLetter.setTrackingEvents(default(List<TrackingEventNormal>));
            fakeLetter.setReturnAddress(default(string));
            fakeLetter.setMailType(default(MailType));
            fakeLetter.setColor(default(bool));
            fakeLetter.setDoubleSided(true);
            fakeLetter.setAddressPlacement(Letter.AddressPlacementEnum.TopFirstPage);
            fakeLetter.setReturnEnvelope(default(bool));
            fakeLetter.setCustomEnvelope(default(LetterCustomEnvelope));

            List<Letter> listOfLetters = new List<Letter>();
            Letter data1 = new Letter();
            data1.setTo(new Address());
            data1.setFrom(new Address());
            data1.setCarrier(Letter.CarrierEnum.USPS);
            data1.setThumbnails(default(List<Thumbnail>));
            data1.setExpectedDeliveryDate(default(DateTime));
            data1.setDateCreated(default(DateTime));
            data1.setDateModified(default(DateTime));
            data1.setDeleted(default(bool));
            data1.setId("ltr_fakeId1");
            data1.setTemplateId(default(string));
            data1.setTemplateVersionId(default(string));
            data1.setObject(Letter.ObjectEnum.Letter);
            data1.setDescription(default(string));
            data1.setMetadata(default(Dictionary<string, string>));
            data1.setMergeVariables(default(Object));
            data1.setSendDate(default(DateTime));
            data1.setExtraService(default(string));
            data1.setTrackingNumber(default(string));
            data1.setTrackingEvents(default(List<TrackingEventNormal>));
            data1.setReturnAddress(default(string));
            data1.setMailType(default(MailType));
            data1.setColor(default(bool));
            data1.setDoubleSided(true);
            data1.setAddressPlacement(Letter.AddressPlacementEnum.TopFirstPage);
            data1.setReturnEnvelope(default(bool));
            data1.setCustomEnvelope(default(LetterCustomEnvelope));
            Letter data2 = new Letter();
            data2.setTo(new Address());
            data2.setFrom(new Address());
            data2.setCarrier(Letter.CarrierEnum.USPS);
            data2.setThumbnails(default(List<Thumbnail>));
            data2.setExpectedDeliveryDate(default(DateTime));
            data2.setDateCreated(default(DateTime));
            data2.setDateModified(default(DateTime));
            data2.setDeleted(default(bool));
            data2.setId("ltr_fakeId2");
            data2.setTemplateId(default(string));
            data2.setTemplateVersionId(default(string));
            data2.setObject(Letter.ObjectEnum.Letter);
            data2.setDescription(default(string));
            data2.setMetadata(default(Dictionary<string, string>));
            data2.setMergeVariables(default(Object));
            data2.setSendDate(default(DateTime));
            data2.setExtraService(default(string));
            data2.setTrackingNumber(default(string));
            data2.setTrackingEvents(default(List<TrackingEventNormal>));
            data2.setReturnAddress(default(string));
            data2.setMailType(default(MailType));
            data2.setColor(default(bool));
            data2.setDoubleSided(true);
            data2.setAddressPlacement(Letter.AddressPlacementEnum.TopFirstPage);
            data2.setReturnEnvelope(default(bool));
            data2.setCustomEnvelope(default(LetterCustomEnvelope));

            listOfLetters.Add(data1);
            listOfLetters.Add(data2);

            fakeLetterList = new LetterList();

            fakeLetterList.setData(listOfLetters);
            fakeLetterList.setObject("list");
            fakeLetterList.setCount(listOfLetters.Count);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test LetterCreate
        /// </summary>
        [Test]
        public void LetterCreateTest()
        {
            LetterEditable letterEditable = new LetterEditable();
            letterEditable.setMailType(default(MailType));
            letterEditable.setSendDate(default(DateTime));
            letterEditable.setColor(default(bool));
            letterEditable.setDoubleSided(true);
            letterEditable.setAddressPlacement(LetterEditable.AddressPlacementEnum.TopFirstPage);
            letterEditable.setReturnEnvelope(default(bool));
            letterEditable.setTo("adr_fakeId");
            letterEditable.setFrom("adr_fakeId");
            letterEditable.setFile("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/us_letter_1pg.pdf");

            LettersApiMock.Setup(x => x.LetterCreate(letterEditable, null, It.IsAny<int>())).Returns(fakeLetter);
            Letter response = LettersApiMock.Object.LetterCreate(letterEditable);

            Assert.IsInstanceOf<Letter>(response);
            Assert.AreEqual(response.getId(), "ltr_fakeId");
        }

        /// <summary>
        /// Test LetterCreateHandlesException
        /// </summary>
        [Test]
        public void LetterCreateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            LettersApiMock.Setup(x => x.LetterCreate(null, null, It.IsAny<int>())).Throws(fakeException);
            try {
                Letter response = LettersApiMock.Object.LetterCreate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test LetterCancel
        /// </summary>
        [Test]
        public void LetterCancelTest()
        {
            LetterDeletion fakeLetter = new LetterDeletion();

            fakeLetter.setId("ltr_fakeId");
            fakeLetter.setDeleted(true);

            LettersApiMock.Setup(x => x.LetterCancel(fakeLetter.getId(), It.IsAny<int>())).Returns(fakeLetter);

            var response = LettersApiMock.Object.LetterCancel(fakeLetter.getId());

            Assert.IsInstanceOf<LetterDeletion>(response);
            Assert.AreEqual(response.getDeleted(), fakeLetter.getDeleted());
            Assert.AreEqual(response.getId(), fakeLetter.getId());
        }

        /// <summary>
        /// Test LetterCancelHandlesException
        /// </summary>
        [Test]
        public void LetterCancelHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            LettersApiMock.Setup(x => x.LetterCancel(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = LettersApiMock.Object.LetterCancel(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test LetterRetrieve
        /// </summary>
        [Test]
        public void LetterRetrieveTest()
        {
            LettersApiMock.Setup(x => x.LetterRetrieve(fakeLetter.getId(), It.IsAny<int>())).Returns(fakeLetter);
            Letter response = LettersApiMock.Object.LetterRetrieve(fakeLetter.getId());

            Assert.IsInstanceOf<Letter>(response);
            Assert.AreEqual(response.getId(), fakeLetter.getId());
        }

        /// <summary>
        /// Test LetterRetrieveHandlesException
        /// </summary>
        [Test]
        public void LetterRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            LettersApiMock.Setup(x => x.LetterRetrieve("ltr_fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = LettersApiMock.Object.LetterRetrieve("ltr_fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test LetterList
        /// </summary>
        [Test]
        public void LetterListTest()
        {
            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListHandlesException
        /// </summary>
        [Test]
        public void LetterListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test LetterListWithLimitParam
        /// </summary>
        [Test]
        public void LetterListTestWithLimitParam()
        {
            int limit = 2;

            LettersApiMock.Setup(x => x.LettersList(limit, null, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(limit, null, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithBeforeParam
        /// </summary>
        [Test]
        public void LetterListTestWithBeforeParam()
        {
            string before = "before";

            LettersApiMock.Setup(x => x.LettersList(null, before, null, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, before, null, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithAfterParam
        /// </summary>
        [Test]
        public void LetterListTestWithAfterParam()
        {
            string after = "after";

            LettersApiMock.Setup(x => x.LettersList(null, null, after, null, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, after, null, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithIncludeParam
        /// </summary>
        [Test]
        public void LetterListTestWithIncludeParam()
        {
            List<string> include = new List<string>();
            include.Add("total_count");

            LettersApiMock.Setup(x => x.LettersList(null, null, null, include, null, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, include, null, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithDateCreatedParam
        /// </summary>
        [Test]
        public void LetterListTestWithDateCreatedParam()
        {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, dateCreated, null, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, dateCreated, null, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithMetadataParam
        /// </summary>
        [Test]
        public void LetterListTestWithMetadataParam()
        {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, metadata, null, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, metadata, null, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithColorParam
        /// </summary>
        [Test]
        public void LetterListTestWithColorParam()
        {
            Boolean color = true;

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, color, null, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, color, null, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithScheduledParam
        /// </summary>
        [Test]
        public void LetterListTestWithScheduledParam()
        {
            Boolean scheduled = true;

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, scheduled, null, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, scheduled, null, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithSendDateParam
        /// </summary>
        [Test]
        public void LetterListTestWithSendDateParam()
        {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            sendDate.Add("gt", "2020-01-01");
            sendDate.Add("lt", "2020-01-31T12");

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, null, sendDate, null, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, null, sendDate, null, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithMailTypeParam
        /// </summary>
        [Test]
        public void LetterListTestWithMailTypeParam()
        {
            MailType mailType = MailType.FirstClass;

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, null, null, mailType, null, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, null, null, mailType, null);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }

        /// <summary>
        /// Test LetterListWithSortByParam
        /// </summary>
        [Test]
        public void LetterListTestWithSortByParam()
        {
            SortBy5 sortBy = new SortBy5();
            sortBy.setSendDate(SortBy5.SendDateEnum.Asc);

            LettersApiMock.Setup(x => x.LettersList(null, null, null, null, null, null, null, null, null, null, sortBy, It.IsAny<int>())).Returns(fakeLetterList);

            var response = LettersApiMock.Object.LettersList(null, null, null, null, null, null, null, null, null, null, sortBy);

            Assert.IsInstanceOf<LetterList>(response);
            Assert.AreEqual(response.getCount(), fakeLetterList.getCount());
        }
    }
}