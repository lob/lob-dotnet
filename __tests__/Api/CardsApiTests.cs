/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing CardsApi
    /// </summary>
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class CardsApiTests : IDisposable
    {
        private Mock<ICardsApi> cardsApiMock;
        private CardList fakeCardList;
        private Card fakeCard;

        public CardsApiTests()
        {
            cardsApiMock = new Mock<ICardsApi>();
            fakeCard = new Card();
            fakeCard.setId("card_fakeId");
            fakeCard.setUrl("fake url");
            fakeCard.setAutoReorder(false);
            fakeCard.setRawUrl("fake raw url");
            fakeCard.setFrontOriginalUrl("fake front original url");
            fakeCard.setBackOriginalUrl("fake back original url");
            fakeCard.setThumbnails(new List<Thumbnail>());
            fakeCard.setAvailableQuantity(0);
            fakeCard.setPendingQuantity(0);
            fakeCard.setStatus(default(Card.StatusEnum));
            fakeCard.setOrientation(Card.OrientationEnum.Horizontal);
            fakeCard.setThresholdAmount(0);
            fakeCard.setDateCreated(default(DateTime));
            fakeCard.setDateModified(default(DateTime));
            fakeCard.setDeleted(default(bool));
            fakeCard.setObject(Card.ObjectEnum.Card);
            fakeCard.setDescription(default(string));
            fakeCard.setSize(Card.SizeEnum._2125x3375);

            List<Card> listOfCards = new List<Card>();
            Card data1 = new Card();
            data1.setId("card_fakeId1");
            data1.setUrl("fake url");
            data1.setAutoReorder(false);
            data1.setRawUrl("fake raw url");
            data1.setFrontOriginalUrl("fake front original url");
            data1.setBackOriginalUrl("fake back original url");
            data1.setThumbnails(new List<Thumbnail>());
            data1.setAvailableQuantity(0);
            data1.setPendingQuantity(0);
            data1.setStatus(default(Card.StatusEnum));
            data1.setOrientation(Card.OrientationEnum.Horizontal);
            data1.setThresholdAmount(0);
            data1.setDateCreated(default(DateTime));
            data1.setDateModified(default(DateTime));
            data1.setDeleted(default(bool));
            data1.setObject(Card.ObjectEnum.Card);
            data1.setDescription(default(string));
            data1.setSize(Card.SizeEnum._2125x3375);
            Card data2 = new Card();
            data2.setId("card_fakeId2");
            data2.setUrl("fake url");
            data2.setAutoReorder(false);
            data2.setRawUrl("fake raw url");
            data2.setFrontOriginalUrl("fake front original url");
            data2.setBackOriginalUrl("fake back original url");
            data2.setThumbnails(new List<Thumbnail>());
            data2.setAvailableQuantity(0);
            data2.setPendingQuantity(0);
            data2.setStatus(default(Card.StatusEnum));
            data2.setOrientation(Card.OrientationEnum.Horizontal);
            data2.setThresholdAmount(0);
            data2.setDateCreated(default(DateTime));
            data2.setDateModified(default(DateTime));
            data2.setDeleted(default(bool));
            data2.setObject(Card.ObjectEnum.Card);
            data2.setDescription(default(string));
            data2.setSize(Card.SizeEnum._2125x3375);

            listOfCards.Add(data1);
            listOfCards.Add(data2);

            fakeCardList = new CardList();

            fakeCardList.setData(listOfCards);
            fakeCardList.setObject("list");
            fakeCardList.setCount(listOfCards.Count);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test CardCreate
        /// </summary>
        [Test]
        public void CardCreateTest()
        {
            CardEditable cardEditable = new CardEditable();
            cardEditable.setFront("fake front");
            cardEditable.setBack("fake back");
            cardEditable.setSize(CardEditable.SizeEnum._2125x3375);
            cardEditable.setDescription("fake description");

            cardsApiMock.Setup(x => x.CardCreate(cardEditable, It.IsAny<int>())).Returns(fakeCard);
            Card response = cardsApiMock.Object.CardCreate(cardEditable);

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.getId(), "card_fakeId");
        }

        /// <summary>
        /// Test CardCreateHandlesException
        /// </summary>
        [Test]
        public void CardCreateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            cardsApiMock.Setup(x => x.CardCreate(null, It.IsAny<int>())).Throws(fakeException);
            try {
                Card response = cardsApiMock.Object.CardCreate(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardDelete
        /// </summary>
        [Test]
        public void CardDeleteTest()
        {
            CardDeletion fakeCard = new CardDeletion();

            fakeCard.setId("card_fakeId");
            fakeCard.setDeleted(true);

            cardsApiMock.Setup(x => x.CardDelete(fakeCard.getId(), It.IsAny<int>())).Returns(fakeCard);

            var response = cardsApiMock.Object.CardDelete(fakeCard.getId());

            Assert.IsInstanceOf<CardDeletion>(response);
            Assert.AreEqual(response.getDeleted(), fakeCard.getDeleted());
            Assert.AreEqual(response.getId(), fakeCard.getId());
        }

        /// <summary>
        /// Test CardDeleteHandlesException
        /// </summary>
        [Test]
        public void CardDeleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            cardsApiMock.Setup(x => x.CardDelete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = cardsApiMock.Object.CardDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardRetrieve
        /// </summary>
        [Test]
        public void CardRetrieveTest()
        {
            cardsApiMock.Setup(x => x.CardRetrieve(fakeCard.getId(), It.IsAny<int>())).Returns(fakeCard);
            Card response = cardsApiMock.Object.CardRetrieve(fakeCard.getId());

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.getId(), fakeCard.getId());
        }

        /// <summary>
        /// Test CardRetrieveHandlesException
        /// </summary>
        [Test]
        public void CardRetrieveTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.CardRetrieve("fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.CardRetrieve("fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardList
        /// </summary>
        [Test]
        public void CardListTest()
        {
            cardsApiMock.Setup(x => x.CardsList(null, null, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.CardsList(null, null, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.getCount(), fakeCardList.getCount());
        }

        /// <summary>
        /// Test CardListHandlesException
        /// </summary>
        [Test]
        public void CardListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.CardsList(null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.CardsList(null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardListWithLimitParam
        /// </summary>
        [Test]
        public void CardListTestWithLimitParam()
        {
            int limit = 2;

            cardsApiMock.Setup(x => x.CardsList(limit, null, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.CardsList(limit, null, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.getCount(), fakeCardList.getCount());
        }

        /// <summary>
        /// Test CardListWithBeforeParam
        /// </summary>
        [Test]
        public void CardListTestWithBeforeParam()
        {
            string before = "before";

            cardsApiMock.Setup(x => x.CardsList(null, before, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.CardsList(null, before, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.getCount(), fakeCardList.getCount());
        }

        /// <summary>
        /// Test CardListWithAfterParam
        /// </summary>
        [Test]
        public void CardListTestWithAfterParam()
        {
            string after = "after";

            cardsApiMock.Setup(x => x.CardsList(null, null, after, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.CardsList(null, null, after, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.getCount(), fakeCardList.getCount());
        }

        /// <summary>
        /// Test CardUpdate
        /// </summary>
        [Test]
        public void CardUpdateTest()
        {
            CardUpdatable cardUpdatable = new CardUpdatable();
            cardUpdatable.setDescription("Awesome card");
            cardUpdatable.setAutoReorder(true);
            cardUpdatable.setReorderQuantity(10000);

            cardsApiMock.Setup(x => x.CardUpdate(fakeCard.getId(), cardUpdatable, It.IsAny<int>())).Returns(fakeCard);

            Card response = cardsApiMock.Object.CardUpdate(fakeCard.getId(), cardUpdatable);

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.getId(), fakeCard.getId());
            Assert.AreEqual(response.getDescription(), fakeCard.getDescription());
        }

        /// <summary>
        /// Test CardUpdateHandlesException
        /// </summary>
        [Test]
        public void CardUpdateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.CardUpdate(null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.CardUpdate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
