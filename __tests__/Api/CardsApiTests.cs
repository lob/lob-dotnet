/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using NUnit.Framework;

using Moq;

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;

namespace __tests__.Api
{
    /// <summary>
    ///  Class for testing CardsApi
    /// </summary>
    [TestFixture]
    [Category("Unit")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class CardsApiTests : IDisposable
    {
        private Mock<ICardsApi> cardsApiMock;
        private CardList fakeCardList;
        private Card fakeCard;

        public CardsApiTests()
        {
            cardsApiMock = new Mock<ICardsApi>();
            fakeCard = new Card(
                "card_fakeId", // id
                "fake url", // url
                false, // autoReorder
                null, // reorderQuantity
                "fake raw url", // rawUrl
                "fake front original url", // frontOriginalUrl
                "fake back original url", // backOriginalUrl
                new List<Thumbnail>(), // thumbnails
                0, // availableQuantity
                0, // pendingQuantity
                default(Card.StatusEnum), // status
                Card.OrientationEnum.Horizontal, // orientation
                0, // thresholdAmount
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                Card.ObjectEnum.Card, // _object
                default(string), // description
                Card.SizeEnum._2125x3375 // size
            );

            List<Card> listOfCards = new List<Card>();
            Card data1 = new Card(
                "card_fakeId1", // id
                "fake url", // url
                false, // autoReorder
                null, // reorderQuantity
                "fake raw url", // rawUrl
                "fake front original url", // frontOriginalUrl
                "fake back original url", // backOriginalUrl
                new List<Thumbnail>(), // thumbnails
                0, // availableQuantity
                0, // pendingQuantity
                default(Card.StatusEnum), // status
                Card.OrientationEnum.Horizontal, // orientation
                0, // thresholdAmount
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                Card.ObjectEnum.Card, // _object
                default(string), // description
                Card.SizeEnum._2125x3375 // size
            );
            Card data2 = new Card(
                "card_fakeId2", // id
                "fake url", // url
                false, // autoReorder
                null, // reorderQuantity
                "fake raw url", // rawUrl
                "fake front original url", // frontOriginalUrl
                "fake back original url", // backOriginalUrl
                new List<Thumbnail>(), // thumbnails
                0, // availableQuantity
                0, // pendingQuantity
                default(Card.StatusEnum), // status
                Card.OrientationEnum.Horizontal, // orientation
                0, // thresholdAmount
                default(DateTime), // dateCreated
                default(DateTime), // dateModified
                default(bool), // deleted
                Card.ObjectEnum.Card, // _object
                default(string), // description
                Card.SizeEnum._2125x3375 // size
            );

            listOfCards.Add(data1);
            listOfCards.Add(data2);

            fakeCardList = new CardList();

            fakeCardList.Data = listOfCards;
            fakeCardList.Object = "list";
            fakeCardList.Count = listOfCards.Count;
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test create
        /// </summary>
        [Test]
        public void createTest()
        {
            CardEditable cardEditable = new CardEditable(
                "fake front", // front
                "fake back", // back
                CardEditable.SizeEnum._2125x3375, // size
                "fake description" // description
            );

            cardsApiMock.Setup(x => x.create(cardEditable, It.IsAny<int>())).Returns(fakeCard);
            Card response = cardsApiMock.Object.create(cardEditable);

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.Id, "card_fakeId");
        }

        /// <summary>
        /// Test createHandlesException
        /// </summary>
        [Test]
        public void createTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            cardsApiMock.Setup(x => x.create(null, It.IsAny<int>())).Throws(fakeException);
            try {
                Card response = cardsApiMock.Object.create(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test delete
        /// </summary>
        [Test]
        public void deleteTest()
        {
            CardDeletion fakeCard = new CardDeletion();

            fakeCard.Id = "card_fakeId";
            fakeCard.Deleted = true;

            cardsApiMock.Setup(x => x.delete(fakeCard.Id, It.IsAny<int>())).Returns(fakeCard);

            var response = cardsApiMock.Object.delete(fakeCard.Id);

            Assert.IsInstanceOf<CardDeletion>(response);
            Assert.AreEqual(response.Deleted, fakeCard.Deleted);
            Assert.AreEqual(response.Id, fakeCard.Id);
        }

        /// <summary>
        /// Test deleteHandlesException
        /// </summary>
        [Test]
        public void deleteHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );

            cardsApiMock.Setup(x => x.delete(null, It.IsAny<int>())).Throws(fakeException);
            try {
                var response = cardsApiMock.Object.delete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test get
        /// </summary>
        [Test]
        public void getTest()
        {
            cardsApiMock.Setup(x => x.get(fakeCard.Id, It.IsAny<int>())).Returns(fakeCard);
            Card response = cardsApiMock.Object.get(fakeCard.Id);

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.Id, fakeCard.Id);
        }

        /// <summary>
        /// Test getHandlesException
        /// </summary>
        [Test]
        public void getTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.get("fakeId", It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.get("fakeId");
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardList
        /// </summary>
        [Test]
        public void CardListTest()
        {
            cardsApiMock.Setup(x => x.list(null, null, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.list(null, null, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.Count, fakeCardList.Count);
        }

        /// <summary>
        /// Test CardListHandlesException
        /// </summary>
        [Test]
        public void CardListTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.list(null, null, null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.list(null, null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }

        /// <summary>
        /// Test CardListWithLimitParam
        /// </summary>
        [Test]
        public void CardListTestWithLimitParam()
        {
            int limit = 2;

            cardsApiMock.Setup(x => x.list(limit, null, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.list(limit, null, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.Count, fakeCardList.Count);
        }

        /// <summary>
        /// Test CardListWithBeforeParam
        /// </summary>
        [Test]
        public void CardListTestWithBeforeParam()
        {
            string before = "before";

            cardsApiMock.Setup(x => x.list(null, before, null, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.list(null, before, null, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.Count, fakeCardList.Count);
        }

        /// <summary>
        /// Test CardListWithAfterParam
        /// </summary>
        [Test]
        public void CardListTestWithAfterParam()
        {
            string after = "after";

            cardsApiMock.Setup(x => x.list(null, null, after, null, It.IsAny<int>())).Returns(fakeCardList);

            var response = cardsApiMock.Object.list(null, null, after, null);

            Assert.IsInstanceOf<CardList>(response);
            Assert.AreEqual(response.Count, fakeCardList.Count);
        }

        /// <summary>
        /// Test update
        /// </summary>
        [Test]
        public void updateTest()
        {
            CardUpdatable cardUpdatable = new CardUpdatable(
                "Awesome card",
                true,
                10000
            );

            cardsApiMock.Setup(x => x.update(fakeCard.Id, cardUpdatable, It.IsAny<int>())).Returns(fakeCard);

            Card response = cardsApiMock.Object.update(fakeCard.Id, cardUpdatable);

            Assert.IsInstanceOf<Card>(response);
            Assert.AreEqual(response.Id, fakeCard.Id);
            Assert.AreEqual(response.Description, fakeCard.Description);
        }

        /// <summary>
        /// Test updateHandlesException
        /// </summary>
        [Test]
        public void updateTestHandlesException()
        {
            ApiException fakeException = new ApiException(
                402,
                "This is an error"
            );
            cardsApiMock.Setup(x => x.update(null, null, It.IsAny<int>())).Throws(fakeException);

            try {
                var response = cardsApiMock.Object.update(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.AreEqual(e.Message, fakeException.Message);
            }
        }
    }
}
