/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class IntlVerificationsApiTests : IDisposable
    {
        private IntlVerificationsApi validApi;
        private IntlVerificationsApi invalidApi;
        private IntlVerificationWritable intlVerificationWritable;
        private IntlVerificationWritable undeliverableIntlVerificationWritable;
        private List<MultipleComponentsIntl> addresses;
        private IntlVerificationsPayload addressList;

        public IntlVerificationsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new IntlVerificationsApi(config);
            invalidApi = new IntlVerificationsApi(invalidConfig);

            intlVerificationWritable = new IntlVerificationWritable();
            intlVerificationWritable.setPrimaryLine("10 DOWNING ST");
            intlVerificationWritable.setCity("LONDON");
            intlVerificationWritable.setPostalCode("SW1A 2AA");
            intlVerificationWritable.setCountry(CountryExtended.GB);

            undeliverableIntlVerificationWritable = new IntlVerificationWritable();
            undeliverableIntlVerificationWritable.setPrimaryLine("1 CEMETERY ST");
            undeliverableIntlVerificationWritable.setCity("POTATOFIELD");
            undeliverableIntlVerificationWritable.setPostalCode("EC3N 40R");
            undeliverableIntlVerificationWritable.setCountry(CountryExtended.GB);

            MultipleComponentsIntl address1 = new MultipleComponentsIntl();
            address1.setPrimaryLine("10 DOWNING ST");
            address1.setCity("LONDON");
            address1.setPostalCode("SW1A 2AA");
            address1.setCountry(CountryExtended.GB);

            MultipleComponentsIntl address2 = new MultipleComponentsIntl();
            address2.setPrimaryLine("1 FAKE POTATO LANE");
            address2.setCity("LONDON");
            address2.setPostalCode("ZC4Z 46Z");
            address2.setCountry(CountryExtended.GB);

            addresses = new List<MultipleComponentsIntl>();
            addresses.Add(address1);
            addresses.Add(address2);

            addressList = new IntlVerificationsPayload();
            addressList.setAddresses(addresses);
        }

        public void Dispose() {}

        [Test]
        public void IntlVerificationVerifySingleTest() {
            IntlVerification response = validApi.IntlVerification(intlVerificationWritable);
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Deliverable, response.getDeliverability());
        }

        [Test]
        public void IntlVerificationVerifySingleTestWithXLangOutput() {
            IntlVerification response = validApi.IntlVerification(intlVerificationWritable, "match");
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Deliverable, response.getDeliverability());
        }

        [Test]
        public void IntlVerificationVerifySingleUndeliverableTest() {
            IntlVerification response = validApi.IntlVerification(undeliverableIntlVerificationWritable);
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Undeliverable, response.getDeliverability());
        }

        [Test]
        public void IntlVerificationVerifySingleTestBadParameter() {
            try {
                IntlVerification response = validApi.IntlVerification(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'intlVerificationWritable'"));
            }
        }

        [Test]
        public void IntlVerificationVerifySingleTestBadUsername() {
            try {
                IntlVerification response = invalidApi.IntlVerification(intlVerificationWritable);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void IntlVerificationVerifyBulkTest() {
            IntlVerifications response = validApi.BulkIntlVerifications(addressList);
            Assert.NotNull(response);
            Assert.AreEqual(IntlVerificationOrError.DeliverabilityEnum.Deliverable, response.getAddresses()[0].getDeliverability());
            Assert.AreEqual(IntlVerificationOrError.DeliverabilityEnum.Undeliverable, response.getAddresses()[1].getDeliverability());
        }

        [Test]
        public void IntlVerificationVerifyBulkTestBadParameter() {
            try {
                IntlVerifications response = validApi.BulkIntlVerifications(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'intlVerificationsPayload'"));
            }
        }

        [Test]
        public void IntlVerificationVerifyBulkTestBadUsername() {
            try {
                IntlVerifications response = invalidApi.BulkIntlVerifications(addressList);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}