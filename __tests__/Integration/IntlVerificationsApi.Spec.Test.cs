/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Category("Integration")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class IntlVerificationsApiTests : IDisposable
    {
        private IntlVerificationsApi validApi;
        private IntlVerificationsApi invalidApi;
        private IntlVerificationWritable intlVerificationWritable;
        private IntlVerificationWritable undeliverableIntlVerificationWritable;
        private List<MultipleComponentsIntl> addresses;
        private IntlVerificationsPayload addressList;

        public IntlVerificationsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new IntlVerificationsApi(config);
            invalidApi = new IntlVerificationsApi(invalidConfig);

            intlVerificationWritable = new IntlVerificationWritable(
                null, // recipient
                "10 DOWNING ST", // primaryLine
                null, // secondaryLine
                "LONDON", // city
                null, // state
                "SW1A 2AA", // postalCode
                CountryExtended.GB, // country
                null // address
            );

            undeliverableIntlVerificationWritable = new IntlVerificationWritable(
                null, // recipient
                "1 CEMETERY ST", // primaryLine
                null, // secondaryLine
                "POTATOFIELD", // city
                null, // state
                "EC3N 40R", // postalCode
                CountryExtended.GB, // country
                null // address
            );

            MultipleComponentsIntl address1 = new MultipleComponentsIntl(
                null, // recipient
                "10 DOWNING ST", // primaryLine
                null, // secondaryLine
                "LONDON", // city
                null, // state
                "SW1A 2AA", // postalCode
                CountryExtended.GB // country
            );

            MultipleComponentsIntl address2 = new MultipleComponentsIntl(
                null, // recipient
                "1 FAKE POTATO LANE", // primaryLine
                null, // secondaryLine
                "LONDON", // city
                null, // state
                "ZC4Z 46Z", // postalCode
                CountryExtended.GB // country
            );

            addresses = new List<MultipleComponentsIntl>();
            addresses.Add(address1);
            addresses.Add(address2);

            addressList = new IntlVerificationsPayload(addresses);
        }

        public void Dispose() {}

        [Test]
        public void IntlVerificationVerifySingleTest() {
            IntlVerification response = validApi.verifySingle(intlVerificationWritable);
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Deliverable, response.Deliverability);
        }

        [Test]
        public void IntlVerificationVerifySingleTestWithXLangOutput() {
            IntlVerification response = validApi.verifySingle(intlVerificationWritable, "match");
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Deliverable, response.Deliverability);
        }

        [Test]
        public void IntlVerificationVerifySingleUndeliverableTest() {
            IntlVerification response = validApi.verifySingle(undeliverableIntlVerificationWritable);
            Assert.AreEqual(IntlVerification.DeliverabilityEnum.Undeliverable, response.Deliverability);
        }

        [Test]
        public void IntlVerificationVerifySingleTestBadParameter() {
            try {
                IntlVerification response = validApi.verifySingle(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'intlVerificationWritable'"));
            }
        }

        [Test]
        public void IntlVerificationVerifySingleTestBadUsername() {
            try {
                IntlVerification response = invalidApi.verifySingle(intlVerificationWritable);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void IntlVerificationVerifyBulkTest() {
            IntlVerifications response = validApi.verifyBulk(addressList);
            Assert.NotNull(response);
            Assert.AreEqual(IntlVerificationOrError.DeliverabilityEnum.Deliverable, response.Addresses[0].Deliverability);
            Assert.AreEqual(IntlVerificationOrError.DeliverabilityEnum.Undeliverable, response.Addresses[1].Deliverability);
        }

        [Test]
        public void IntlVerificationVerifyBulkTestBadParameter() {
            try {
                IntlVerifications response = validApi.verifyBulk(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'intlVerificationsPayload'"));
            }
        }

        [Test]
        public void IntlVerificationVerifyBulkTestBadUsername() {
            try {
                IntlVerifications response = invalidApi.verifyBulk(addressList);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}