/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class UsVerificationsApiTests : IDisposable
    {
        private UsVerificationsApi testValidApi;
        private UsVerificationsApi liveValidApi;
        private UsVerificationsApi invalidApi;
        private UsVerificationsWritable usVerificationWritable;
        private MultipleComponentsList addressList;

        public UsVerificationsApiTests()
        {
            Configuration testConfig = new Configuration();
            Configuration liveConfig = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            testConfig.Username = System.Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            liveConfig.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            testValidApi = new UsVerificationsApi(testConfig);
            liveValidApi = new UsVerificationsApi(liveConfig);
            invalidApi = new UsVerificationsApi(invalidConfig);

            usVerificationWritable = new UsVerificationsWritable();
            usVerificationWritable.setPrimaryLine("deliverable");
            usVerificationWritable.setCity("WESTFIELD");
            usVerificationWritable.setState("NJ");
            usVerificationWritable.setZipCode("11111");

            MultipleComponents address1 = new MultipleComponents();
            address1.setPrimaryLine("1313 CEMETERY LANE");
            address1.setCity("WESTFIELD");
            address1.setState("NJ");

            MultipleComponents address2 = new MultipleComponents();
            address2.setPrimaryLine("1212 CEMETERY LANE");
            address2.setCity("WESTFIELD");

            List<MultipleComponents> addresses = new List<MultipleComponents>();
            addresses.Add(address1);
            addresses.Add(address2);

            addressList = new MultipleComponentsList();
            addressList.setAddresses(addresses);
        }

        public void Dispose() {}

        [Test]
        public void UsVerificationVerifySingleMultiLineUSAddressTest() {
            UsVerification response = testValidApi.UsVerification(usVerificationWritable);
            Assert.NotNull(response.getDeliverability());
        }

        [Test]
        public void UsVerificationVerifySingleOneLineUSAddressTest() {
            UsVerificationsWritable usVerWritable = new UsVerificationsWritable();
            usVerWritable.setAddress("1515 CEMETERY LN WESTFIELD NJ 07000");

            UsVerification response = testValidApi.UsVerification(usVerWritable);
            Assert.NotNull(response.getDeliverability());
        }

        [Test]
        public void UsVerificationVerifySingleTestWithCase() {
            UsVerificationsWritable usVerWritable = new UsVerificationsWritable();
            usVerWritable.setAddress("1515 CEMETERY LN WESTFIELD NJ 07000");

            UsVerification response = testValidApi.UsVerification(usVerWritable, "proper");
            Assert.NotNull(response.getDeliverability());
        }

        [Test]
        public void UsVerificationVerifySingleTestBadParameter() {
            try {
                UsVerification response = testValidApi.UsVerification(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'usVerificationsWritable'"));
            }
        }

        [Test]
        public void UsVerificationVerifySingleTestBadUsername() {
            try {
                UsVerification response = invalidApi.UsVerification(usVerificationWritable);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void UsVerificationVerifyBulkTest() {
            UsVerifications response = liveValidApi.BulkUsVerifications(addressList);
            Assert.NotNull(response);

            int numErrors = 0;
            foreach(var elem in response.getAddresses()) {
                if (elem.getError() == null) numErrors++;
            }
            Assert.AreEqual(numErrors, 1);
            Assert.AreEqual(response.getAddresses().Count - numErrors, 1);
        }

        [Test]
        public void UsVerificationVerifyBulkTestWithCase() {
            UsVerifications response = liveValidApi.BulkUsVerifications(addressList, "upper");
            Assert.NotNull(response);

            int numErrors = 0;
            foreach(var elem in response.getAddresses()) {
                if (elem.getError() == null) numErrors++;
            }
            Assert.AreEqual(numErrors, 1);
            Assert.AreEqual(response.getAddresses().Count - numErrors, 1);
        }

        [Test]
        public void UsVerificationVerifyBulkTestBadParameter() {
            try {
                UsVerifications response = liveValidApi.BulkUsVerifications(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'multipleComponentsList'"));
            }
        }

        [Test]
        public void UsVerificationVerifyBulkTestBadUsername() {
            try {
                UsVerifications response = invalidApi.BulkUsVerifications(addressList);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}