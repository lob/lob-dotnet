/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class UsVerificationsApiTests : IDisposable
    {
        private UsVerificationsApi testValidApi;
        private UsVerificationsApi liveValidApi;
        private UsVerificationsApi invalidApi;
        private UsVerificationsWritable usVerificationWritable;
        private MultipleComponentsList addressList;

        public UsVerificationsApiTests()
        {
            Configuration testConfig = new Configuration();
            Configuration liveConfig = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            testConfig.Username = System.Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            liveConfig.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            testValidApi = new UsVerificationsApi(testConfig);
            liveValidApi = new UsVerificationsApi(liveConfig);
            invalidApi = new UsVerificationsApi(invalidConfig);

            usVerificationWritable = new UsVerificationsWritable(
                null, // address
                null, // recipient
                "deliverable", // primaryLine
                null, // secondaryLine
                null, // urbanization
                "WESTFIELD", // city
                "NJ", // state
                "11111" // zipCode
            );

            MultipleComponents address1 = new MultipleComponents(
              null, // recipient
              "1313 CEMETERY LANE", // primaryLine
              null, // secondaryLine
              null, // urbanization
              "WESTFIELD", // city
              "NJ", // state
              null // zipCode
            );

            MultipleComponents address2 = new MultipleComponents(
              null, // recipient
              "1212 CEMETERY LANE", // primaryLine
              null, // secondaryLine
              null, // urbanization
              "WESTFIELD", // city
              null, // state
              null // zipCode
            );

            List<MultipleComponents> addresses = new List<MultipleComponents>();
            addresses.Add(address1);
            addresses.Add(address2);

            addressList = new MultipleComponentsList(addresses);
        }

        public void Dispose() {}

        [Test]
        public void UsVerificationVerifySingleMultiLineUSAddressTest() {
            UsVerification response = testValidApi.verifySingle(usVerificationWritable);
            Assert.NotNull(response.Deliverability);
        }

        [Test]
        public void UsVerificationVerifySingleOneLineUSAddressTest() {
            UsVerification response = testValidApi.verifySingle(new UsVerificationsWritable("1515 CEMETERY LN WESTFIELD NJ 07000"));
            Assert.NotNull(response.Deliverability);
        }

        [Test]
        public void UsVerificationVerifySingleTestWithCase() {
            UsVerification response = testValidApi.verifySingle(new UsVerificationsWritable("1515 CEMETERY LN WESTFIELD NJ 07000"), "proper");
            Assert.NotNull(response.Deliverability);
        }

        [Test]
        public void UsVerificationVerifySingleTestBadParameter() {
            try {
                UsVerification response = testValidApi.verifySingle(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'usVerificationsWritable'"));
            }
        }

        [Test]
        public void UsVerificationVerifySingleTestBadUsername() {
            try {
                UsVerification response = invalidApi.verifySingle(usVerificationWritable);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void UsVerificationVerifyBulkTest() {
            UsVerifications response = liveValidApi.verifyBulk(addressList);
            Assert.NotNull(response);

            int numErrors = 0;
            foreach(var elem in response.Addresses) {
                if (elem.Error == null) numErrors++;
            }
            Assert.AreEqual(numErrors, 1);
            Assert.AreEqual(response.Addresses.Count - numErrors, 1);
        }

        [Test]
        public void UsVerificationVerifyBulkTestWithCase() {
            UsVerifications response = liveValidApi.verifyBulk(addressList, "upper");
            Assert.NotNull(response);

            int numErrors = 0;
            foreach(var elem in response.Addresses) {
                if (elem.Error == null) numErrors++;
            }
            Assert.AreEqual(numErrors, 1);
            Assert.AreEqual(response.Addresses.Count - numErrors, 1);
        }

        [Test]
        public void UsVerificationVerifyBulkTestBadParameter() {
            try {
                UsVerifications response = liveValidApi.verifyBulk(null);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'multipleComponentsList'"));
            }
        }

        [Test]
        public void UsVerificationVerifyBulkTestBadUsername() {
            try {
                UsVerifications response = invalidApi.verifyBulk(addressList);
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}