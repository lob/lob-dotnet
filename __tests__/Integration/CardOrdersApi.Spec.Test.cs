/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class CardOrdersApiTests : IDisposable
    {
        private CardOrdersApi validApi;
        private CardOrdersApi invalidApi;
        private CardsApi validCardApi;
        private CardOrderEditable cardOrderEditable;
        private Card card;

        public CardOrdersApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new CardOrdersApi(config);
            invalidApi = new CardOrdersApi(invalidConfig);

            validCardApi = new CardsApi(config);

            cardOrderEditable = new CardOrderEditable(10000);

            CardEditable cardEditable = new CardEditable(
                "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf", // front
                "https://s3-us-west-2.amazonaws.com/public.lob.com/assets/card_horizontal.pdf", // back
                CardEditable.SizeEnum._2125x3375, // size
                "C# integration test card in cardOrders" // description
            );
            card = validCardApi.CardCreate(cardEditable);
        }

        public void Dispose()
        {
            validCardApi.CardDelete(card.Id);
        }

        [Test]
        public void CardOrderCreateTest() {
            CardOrder response = validApi.CardOrderCreate(card.Id, cardOrderEditable);

            Assert.NotNull(response.Id);
            Assert.AreEqual(response.QuantityOrdered, cardOrderEditable.Quantity);
        }

        [Test]
        public void CardOrderCreateTestBadParameter() {
            try {
                CardOrder response = validApi.CardOrderCreate(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'cardId'"));
            }
        }

        [Test]
        public void CardOrderCreateTestBadUsername() {
            try {
                CardOrder response = invalidApi.CardOrderCreate(card.Id, cardOrderEditable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void CardOrdersRetrieveTest() {
            CardOrderList response = validApi.CardOrdersRetrieve(card.Id);

            Boolean retrievedCardOrder = false;
            foreach(var cardOrder in response.Data) {
                if (cardOrder.CardId == card.Id)
                    retrievedCardOrder = true;
            }
            Assert.True(retrievedCardOrder);
        }

        [Test]
        public void CardOrdersRetrieveTestBadParameter() {
            try {
                CardOrderList response = validApi.CardOrdersRetrieve(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'cardId'"));
            }
        }

        [Test]
        public void CardOrdersRetrieveTestBadUsername() {
            try {
                CardOrderList response = invalidApi.CardOrdersRetrieve(card.Id);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}