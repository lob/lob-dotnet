/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Children)]
    public class PostcardsApiTests : IDisposable
    {
        private PostcardsApi validApi;
        private PostcardsApi invalidApi;
        private PostcardEditable postcardEditable;
        private List<string> idsToDelete;

        private Address address;
        private AddressesApi validAddressesApi;

        public PostcardsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new PostcardsApi(config);
            invalidApi = new PostcardsApi(invalidConfig);

            AddressEditable addressEditable = new AddressEditable();
            addressEditable.setAddressLine1("1313 CEMETERY LN");
            addressEditable.setAddressCity("WESTFIELD");
            addressEditable.setAddressState("NJ");
            addressEditable.setAddressZip("07000");
            addressEditable.setAddressCountry(CountryExtended.US);
            addressEditable.setDescription("test description");
            addressEditable.setName("Thing T. Thing");

            validAddressesApi = new AddressesApi(config);
            address = validAddressesApi.AddressCreate(addressEditable);

            postcardEditable = new PostcardEditable();
            postcardEditable.setTo(address.getId());
            postcardEditable.setFrom(address.getId());
            postcardEditable.setSize(default(PostcardSize));
            postcardEditable.setDescription("C# integration test postcard");
            postcardEditable.setMetadata(default(Dictionary<string, string>));
            postcardEditable.setMailType(default(MailType));
            postcardEditable.setMergeVariables(default(Object));
            postcardEditable.setSendDate(default(DateTime));
            postcardEditable.setFront("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf");
            postcardEditable.setBack("https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/4x6_pc_template.pdf");
            postcardEditable.setBillingGroupId(default(string));

            Dictionary<string, string> metadata = new Dictionary<string, string>();
            metadata.Add("name", "Harry");
            postcardEditable.setMetadata(metadata);

            idsToDelete = new List<string>();
        }

        public void Dispose()
        {
            validAddressesApi.AddressDelete(address.getId());
            idsToDelete.ForEach(id => validApi.PostcardDelete(id));
        }

        [Test]
        public void PostcardCreateTest() {
            Postcard response = validApi.PostcardCreate(postcardEditable);

            Assert.NotNull(response.getId());
            Assert.AreEqual(response.getMetadata(), postcardEditable.getMetadata());
            idsToDelete.Add(response.getId());
        }

        [Test]
        public void PostcardCreateTestBadParameter() {
            try {
                Postcard response = validApi.PostcardCreate(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'postcardEditable'"));
            }
        }

        [Test]
        public void PostcardCreateTestBadUsername() {
            try {
                Postcard response = invalidApi.PostcardCreate(postcardEditable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void PostcardRetrieveTest() {
            Postcard createdPostcard = validApi.PostcardCreate(postcardEditable);
            idsToDelete.Add(createdPostcard.getId());

            Postcard retrievedPostcard = validApi.PostcardRetrieve(createdPostcard.getId());

            Assert.NotNull(retrievedPostcard.getId());
            Assert.AreEqual(retrievedPostcard.getId(), createdPostcard.getId());
        }

        [Test]
        public void PostcardRetrieveTestBadParameter() {
            try {
                Postcard response = validApi.PostcardRetrieve(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter"));
            }
        }

        [Test]
        public void PostcardRetrieveTestBadUsername() {
            Postcard createdPostcard = validApi.PostcardCreate(postcardEditable);
            idsToDelete.Add(createdPostcard.getId());

            try {
                Postcard response = invalidApi.PostcardRetrieve(createdPostcard.getId());
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void PostcardListTest() {
            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, null, null, null, null, null);

            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithLimitParameter() {
            int limit = 2;
            PostcardList response = validApi.PostcardsList(limit, null, null, null, null, null, null, null, null, null, null);

            Assert.AreEqual(response.getCount(), 2);
        }

        [Test]
        public void PostcardListTestWithIncludeParameter() {
            List<string> includeList = new List<string>();
            includeList.Add("total_count");

            PostcardList response = validApi.PostcardsList(null, null, null, includeList, null, null, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
            Assert.NotNull(response.getTotalCount());
        }

        [Test]
        public void PostcardListTestWithDateCreatedParameter() {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            PostcardList response = validApi.PostcardsList(null, null, null, null, dateCreated, null, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithMetadataParameter() {
            Postcard createdPostcard = validApi.PostcardCreate(postcardEditable);
            idsToDelete.Add(createdPostcard.getId());

            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, metadata, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithSizeParameter() {
            List<PostcardSize> sizeArray = new List<PostcardSize>();
            sizeArray.Add(PostcardSize._4x6);

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, sizeArray);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithScheduledParameter() {
            Boolean scheduled = true;

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, null, scheduled);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithSendDateParameter() {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            sendDate.Add("lt", lastMonth.ToString("yyyy-MM-ddTHH\\:mm\\:ss.fffffffzzz"));

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, null, null, sendDate);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithMailTypeParameter() {
            MailType mailType = MailType.FirstClass;

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, null, null, null, mailType);
            Assert.GreaterOrEqual(response.getCount(), 0);
        }

        [Test]
        public void PostcardListTestWithSortByParameter() {
            SortBy5 sortBy = new SortBy5();
            sortBy.setSendDate(SortBy5.SendDateEnum.Asc);

            PostcardList response = validApi.PostcardsList(null, null, null, null, null, null, null, null, null, null, sortBy);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void PostcardDeleteTest() {
            Postcard createdPostcard = validApi.PostcardCreate(postcardEditable);

            PostcardDeletion deletedPostcard = validApi.PostcardDelete(createdPostcard.getId());
            Assert.True(deletedPostcard.getDeleted());
        }

        [Test]
        public void PostcardDeleteTestBadParameter() {
            try {
                PostcardDeletion deletedPostcard = validApi.PostcardDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter"));
            }
        }

        [Test]
        public void PostcardDeleteTestBadUsername() {
            Postcard createdPostcard = validApi.PostcardCreate(postcardEditable);
            idsToDelete.Add(createdPostcard.getId());

            try {
                PostcardDeletion deletedPostcard = invalidApi.PostcardDelete(createdPostcard.getId());
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}