/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Category("Integration")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class UsAutocompletionsApiTests : IDisposable
    {
        private UsAutocompletionsApi validApi;
        private UsAutocompletionsApi invalidApi;
        private UsAutocompletionsWritable usAutocompletionWritable;

        public UsAutocompletionsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new UsAutocompletionsApi(config);
            invalidApi = new UsAutocompletionsApi(invalidConfig);

            usAutocompletionWritable = new UsAutocompletionsWritable(
                "1313", // addressPrefix
                "WESTFIELD", // city
                "NJ", // state
                "07090", // zipCode
                false // geoIpSort
            );
        }

        public void Dispose() {}

        [Test]
        public void UsAutocompletionTest() {
            UsAutocompletions response = validApi.autocomplete(usAutocompletionWritable);
            Assert.NotNull(response.Suggestions);
            Assert.GreaterOrEqual(response.Suggestions.Count, 0);
        }

        [Test]
        public void UsAutocompletionTestBadParameter() {
            try {
                UsAutocompletions response = validApi.autocomplete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'usAutocompletionsWritable'"));
            }
        }

        [Test]
        public void UsAutocompletionTestBadUsername() {
            try {
                UsAutocompletions response = invalidApi.autocomplete(usAutocompletionWritable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}