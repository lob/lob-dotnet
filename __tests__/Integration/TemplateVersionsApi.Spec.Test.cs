/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class TemplateVersionsApiTests : IDisposable
    {
        private TemplateVersionsApi validApi;
        private TemplateVersionsApi invalidApi;
        private TemplatesApi templatesApi;
        private TemplateVersionWritable templateVersionWritable;
        private Template template;

        public TemplateVersionsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new TemplateVersionsApi(config);
            invalidApi = new TemplateVersionsApi(invalidConfig);

            templateVersionWritable = new TemplateVersionWritable();
            templateVersionWritable.setDescription("C# templateVersions integration test description");
            templateVersionWritable.setHtml("<html>Template Versions HTML</html>");
            templateVersionWritable.setEngine(EngineHtml.Legacy);

            Dictionary<string, string> metadata = new Dictionary<string, string>();
            metadata.Add("name", "Harry");

            TemplateWritable templateWritable = new TemplateWritable();
            templateWritable.setDescription("C# templateVersions integration test description");
            templateWritable.setHtml("<html>{{name}}'s Template</html>");
            templateWritable.setMetadata(metadata);
            templateWritable.setEngine(EngineHtml.Legacy);

            templatesApi = new TemplatesApi(config);
            template = templatesApi.CreateTemplate(templateWritable);
        }

        public void Dispose()
        {
            templatesApi.TemplateDelete(template.getId());
        }

        [Test]
        public void CreateTemplateVersionTest() {
            TemplateVersion response = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            Assert.NotNull(response.getId());
            Assert.AreEqual(response.getDescription(), templateVersionWritable.getDescription());
        }

        [Test]
        public void CreateTemplateVersionTestBadParameter() {
            try {
                TemplateVersion response = validApi.CreateTemplateVersion(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'tmplId'"));
            }
        }

        [Test]
        public void CreateTemplateVersionTestBadUsername() {
            try {
                TemplateVersion response = invalidApi.CreateTemplateVersion(template.getId(), templateVersionWritable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void TemplateVersionUpdateTest() {
            TemplateVersion ogTemplateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);
            TemplateVersionUpdatable updatedTmplVrsn = new TemplateVersionUpdatable();
            updatedTmplVrsn.setDescription("C# integration test Updated templateVersion description");
            updatedTmplVrsn.setEngine(EngineHtml.Handlebars);

            TemplateVersion response = validApi.TemplateVersionUpdate(template.getId(), ogTemplateVersion.getId(), updatedTmplVrsn);

            Assert.NotNull(response);
            Assert.AreEqual(updatedTmplVrsn.getDescription(), response.getDescription());
        }

        [Test]
        public void TemplateVersionUpdateTestBadParameter() {
            try {
                TemplateVersion response = validApi.TemplateVersionUpdate(null, null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'tmplId'"));
            }
        }

        [Test]
        public void TemplateVersionUpdateTestBadUsername() {
            TemplateVersion ogTemplateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            TemplateVersionUpdatable updatedTmplVrsn = new TemplateVersionUpdatable();
            updatedTmplVrsn.setDescription("C# integration test Updated templateVersion description");
            updatedTmplVrsn.setEngine(EngineHtml.Handlebars);
            try {
                TemplateVersion response = invalidApi.TemplateVersionUpdate(template.getId(), ogTemplateVersion.getId(), updatedTmplVrsn);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void TemplateVersionRetrieveTest() {
            TemplateVersion templateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            TemplateVersion response = validApi.TemplateVersionRetrieve(template.getId(), templateVersion.getId());

            Assert.NotNull(response.getId());
            Assert.AreEqual(response.getId(), templateVersion.getId());
        }

        [Test]
        public void TemplateVersionRetrieveTestBadParameter() {
            try {
                TemplateVersion response = validApi.TemplateVersionRetrieve(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'tmplId'"));
            }
        }

        [Test]
        public void TemplateVersionRetrieveTestBadUsername() {
            TemplateVersion templateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            try {
                TemplateVersion response = invalidApi.TemplateVersionRetrieve(template.getId(), templateVersion.getId());
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void TemplateVersionListTest() {
            TemplateVersionList response = validApi.TemplateVersionsList(template.getId(), null, null, null, null, null);

            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void TemplateVersionListTestWithLimitParameter() {
            int limit = 2;
            TemplateVersionList response = validApi.TemplateVersionsList(template.getId(), limit, null, null, null, null);

            Assert.AreEqual(response.getCount(), 2);
        }

        [Test]
        public void TemplateVersionListTestWithIncludeParameter() {
            List<string> includeList = new List<string>();
            includeList.Add("total_count");

            TemplateVersionList response = validApi.TemplateVersionsList(template.getId(), null, null, null, includeList, null);
            Assert.Greater(response.getCount(), 0);
            Assert.NotNull(response.getTotalCount());
        }

        [Test]
        public void TemplateVersionListTestWithDateCreatedParameter() {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("gt", lastMonth);
            TemplateVersionList response = validApi.TemplateVersionsList(template.getId(), null, null, null, null, dateCreated);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void TemplateVersionListTestBadParameter() {
            try {
                TemplateVersionList response = validApi.TemplateVersionsList(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'tmplId'"));
            }
        }

        [Test]
        public void TemplateVersionListTestBadUsername() {
            TemplateVersion templateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            try {
                TemplateVersionList response = invalidApi.TemplateVersionsList(template.getId());
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void TemplateVersionDeleteTest() {
            TemplateVersion templateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);
            TemplateVersionDeletion response = validApi.TemplateVersionDelete(template.getId(), templateVersion.getId());

            Assert.NotNull(response);
            Assert.True(response.getDeleted());
        }

        [Test]
        public void TemplateVersionDeleteTestBadParameter() {
            try {
                TemplateVersionDeletion response = validApi.TemplateVersionDelete(null, null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'tmplId'"));
            }
        }

        [Test]
        public void TemplateVersionDeleteTestBadUsername() {
            TemplateVersion templateVersion = validApi.CreateTemplateVersion(template.getId(), templateVersionWritable);

            try {
                TemplateVersionDeletion response = invalidApi.TemplateVersionDelete(template.getId(), templateVersion.getId());
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}