/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Self)]
    public class IntlAutocompletionsApiTests : IDisposable
    {
        private IntlAutocompletionsApi validApi;
        private IntlAutocompletionsApi invalidApi;
        private IntlAutocompletionsWritable intlAutocompletionWritable;

        public IntlAutocompletionsApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_LIVE_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new IntlAutocompletionsApi(config);
            invalidApi = new IntlAutocompletionsApi(invalidConfig);

            intlAutocompletionWritable = new IntlAutocompletionsWritable(
                "340 Wat", // addressPrefix
                "Summerside", // city
                "Prince Edward Island", // state
                "C1N 1C4", // zipCode
                CountryExtended.CA // country
            );
        }

        public void Dispose() {}

        [Test]
        public void IntlAutocompletionTest() {
            IntlAutocompletions response = validApi.autocomplete(intlAutocompletionWritable);
            Assert.NotNull(response.Suggestions);
            Assert.GreaterOrEqual(response.Suggestions.Count, 0);
        }

        [Test]
        public void IntlAutocompletionTestWithXLangOutput() {
            IntlAutocompletions response = validApi.autocomplete(intlAutocompletionWritable, "native");
            Assert.NotNull(response.Suggestions);
            Assert.GreaterOrEqual(response.Suggestions.Count, 0);
        }

        [Test]
        public void IntlAutocompletionTestBadParameter() {
            try {
                IntlAutocompletions response = validApi.autocomplete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'intlAutocompletionsWritable'"));
            }
        }

        [Test]
        public void IntlAutocompletionTestBadUsername() {
            try {
                IntlAutocompletions response = invalidApi.autocomplete(intlAutocompletionWritable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}