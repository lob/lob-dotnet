// /*
//  * Lob
//  *
//  * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
//  *
//  * The version of the OpenAPI document: 1.3.0
//  * Contact: lob-openapi@lob.com
//  * Generated by: https://github.com/openapitools/openapi-generator.git
//  */

// using lob.dotnet.Client;
// using lob.dotnet.Api;
// using lob.dotnet.Model;
// using NUnit.Framework;
// using System;
// using System.Collections.Generic;
// using System.Linq;

// namespace __tests__.Integration {
//     [TestFixture]
//     [Parallelizable(scope: ParallelScope.Children)]
//     public class SelfMailersApiTests : IDisposable
//     {
//         private SelfMailersApi validApi;
//         private SelfMailersApi invalidApi;
//         private SelfMailerEditable selfMailerEditable;
//         private List<string> idsToDelete;

//         private Address address;
//         private AddressesApi validAddressesApi;

//         public SelfMailersApiTests()
//         {
//             Configuration config = new Configuration();
//             Configuration invalidConfig = new Configuration();

//             config.Username = Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
//             invalidConfig.Username = "fake api key";

//             validApi = new SelfMailersApi(config);
//             invalidApi = new SelfMailersApi(invalidConfig);

//             AddressEditable addressEditable = new AddressEditable(
//                 "1313 CEMETERY LN", // addressLine1
//                 null, // addressLine2
//                 "WESTFIELD", // addressCity
//                 "NJ", // addressState
//                 "07000", // addressZip
//                 CountryExtended.US, // addressCountry
//                 "test description", // description
//                 "Thing T. Thing", // name
//                 null, // company
//                 null, // phone
//                 null, // email
//                 null // metadata
//             );

//             validAddressesApi = new AddressesApi(config);
//             address = validAddressesApi.AddressCreate(addressEditable);

//             selfMailerEditable = new SelfMailerEditable(
//                 address.Id, // to
//                 address.Id, // from
//                 default(SelfMailerSize), // size
//                 "C# integration test selfMailer", // description
//                 default(Dictionary<string, string>), // metadata
//                 default(MailType), // mailType
//                 default(Object), // mergeVariables
//                 default(DateTime), // sendDate
//                 "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf", // front
//                 "https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf", // back
//                 default(string) // billingGroupId
//             );
//             selfMailerEditable.Metadata = new Dictionary<string, string>();
//             selfMailerEditable.Metadata.Add("fake campaign", "fakeid");

//             idsToDelete = new List<string>();
//         }

//         public void Dispose()
//         {
//             validAddressesApi.AddressDelete(address.Id);
//             idsToDelete.ForEach(id => validApi.SelfMailerDelete(id));
//         }

//         [Test]
//         public void SelfMailerCreateTest() {
//             SelfMailer response = validApi.SelfMailerCreate(selfMailerEditable);

//             Assert.NotNull(response.Id);
//             Assert.AreEqual(response.Metadata, selfMailerEditable.Metadata);
//             idsToDelete.Add(response.Id);
//         }

//         [Test]
//         public void SelfMailerCreateTestBadParameter() {
//             try {
//                 SelfMailer response = validApi.SelfMailerCreate(null);
//             }
//             catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Missing required parameter 'selfMailerEditable'"));
//             }
//         }

//         [Test]
//         public void SelfMailerCreateTestBadUsername() {
//             try {
//                 SelfMailer response = invalidApi.SelfMailerCreate(selfMailerEditable);
//             }
//             catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Your API key is not valid"));
//             }
//         }

//         [Test]
//         public void SelfMailerRetrieveTest() {
//             SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
//             idsToDelete.Add(createdSelfMailer.Id);

//             SelfMailer retrievedSelfMailer = validApi.SelfMailerRetrieve(createdSelfMailer.Id);

//             Assert.NotNull(retrievedSelfMailer.Id);
//             Assert.AreEqual(retrievedSelfMailer.Id, createdSelfMailer.Id);
//         }

//         [Test]
//         public void SelfMailerRetrieveTestBadParameter() {
//             try {
//                 SelfMailer response = validApi.SelfMailerRetrieve(null);
//             }
//             catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Missing required parameter"));
//             }
//         }

//         [Test]
//         public void SelfMailerRetrieveTestBadUsername() {
//             SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
//             idsToDelete.Add(createdSelfMailer.Id);

//             try {
//                 SelfMailer response = invalidApi.SelfMailerRetrieve(createdSelfMailer.Id);
//             }
//             catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Your API key is not valid"));
//             }
//         }

//         [Test]
//         public void SelfMailerListTest() {
//             SelfMailerList response = validApi.SelfMailersList(2, null, null, null, null, null, null, null, null, null, null);
//             Assert.Greater(response.Count, 0);
//         }

//         [Test]
//         public void SelfMailerListTestWithLimitParameter() {
//             int limit = 2;
//             SelfMailerList response = validApi.SelfMailersList(limit, null, null, null, null, null, null, null, null, null, null);

//             Assert.AreEqual(response.Count, 2);
//         }

//         [Test]
//         public void SelfMailerListTestWithIncludeParameter() {
//             List<string> includeList = new List<string>();
//             includeList.Add("total_count");

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, includeList, null, null, null, null, null, null, null);
//             Assert.Greater(response.Count, 0);
//             Assert.NotNull(response.TotalCount);
//         }

//         /* TODO [DXP-1128]: fix unpacking dictionaries into query params
//         [Test]
//         public void SelfMailerListTestWithDateCreatedParameter() {
//             Dictionary<String, String> dateCreated = new Dictionary<String, String>();
//             dateCreated.Add("gt", "2020-01-01");
//             dateCreated.Add("lt", "2020-01-31T12");

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, dateCreated, null, null, null, null, null, null);
//             Console.WriteLine(response);
//             Assert.Greater(response.Count, 0);
//         }

//         [Test]
//         public void SelfMailerListTestWithMetadataParameter() {
//             Dictionary<String, String> metadata = new Dictionary<String, String>();
//             metadata.Add("name", "Harry");

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, metadata, null, null, null, null, null);
//             Console.WriteLine(response);
//             Assert.Greater(response.Count, 0);
//         }
//         */

//         /* TODO [DXP-1128]: fix how Lob API wants an array of SelfMailerSize but the SDK accepts just SelfMailerSize
//         [Test]
//         public void SelfMailerListTestWithSizeParameter() {
//             SelfMailerSize size = SelfMailerSize._4x6;
//             SelfMailerSize[] sizeArray = {size};
//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, sizeArray);
//             Assert.Greater(response.Count, 0);
//         }
//         */

//         [Test]
//         public void SelfMailerListTestWithScheduledParameter() {
//             Boolean scheduled = true;

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, scheduled);
//             Assert.Greater(response.Count, 0);
//         }

//         /* TODO: [DXP-1128]
//         [Test]
//         public void SelfMailerListTestWithSendDateParameter() {
//             Dictionary<String, String> sendDate = new Dictionary<String, String>();
//             sendDate.Add("gt", "2020-01-01");
//             sendDate.Add("lt", "2020-01-31T12");

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, sendDate);
//             Assert.Greater(response.Count, 0);
//         }
//         */

//         [Test]
//         public void SelfMailerListTestWithMailTypeParameter() {
//             MailType mailType = MailType.FirstClass;

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, null, mailType);
//             Assert.GreaterOrEqual(response.Count, 0);
//         }

//         /*
//         [Test]
//         public void SelfMailerListTestWithSortByParameter() {
//             SortBy5 sortBy = new SortBy5(null, SortBy5.SendDateEnum.Asc);

//             SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, null, null, sortBy);
//             Assert.Greater(response.Count, 0);
//         }
//         */

//         [Test]
//         public void SelfMailerDeleteTest() {
//             SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);

//             SelfMailerDeletion deletedSelfMailer = validApi.SelfMailerDelete(createdSelfMailer.Id);
//             Assert.True(deletedSelfMailer.Deleted);
//         }

//         [Test]
//         public void SelfMailerDeleteTestBadParameter() {
//             try {
//                 SelfMailerDeletion deletedSelfMailer = validApi.SelfMailerDelete(null);
//             }
//             catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Missing required parameter"));
//             }
//         }

//         [Test]
//         public void SelfMailerDeleteTestBadUsername() {
//             SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
//             idsToDelete.Add(createdSelfMailer.Id);

//             try {
//                 SelfMailerDeletion deletedSelfMailer = invalidApi.SelfMailerDelete(createdSelfMailer.Id);
//             } catch (Exception e) {
//                 Assert.IsInstanceOf<ApiException>(e);
//                 Assert.That(e.Message, Does.Contain("Your API key is not valid"));
//             }
//         }
//     }
// }