/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Parallelizable(scope: ParallelScope.Children)]
    public class SelfMailersApiTests : IDisposable
    {
        private SelfMailersApi validApi;
        private SelfMailersApi invalidApi;
        private SelfMailerEditable selfMailerEditable;
        private List<string> idsToDelete;

        private Address address;
        private AddressesApi validAddressesApi;

        public SelfMailersApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            config.Username = Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new SelfMailersApi(config);
            invalidApi = new SelfMailersApi(invalidConfig);

            AddressEditable addressEditable = new AddressEditable();
            addressEditable.setAddressLine1("1313 CEMETERY LN");
            addressEditable.setAddressCity("WESTFIELD");
            addressEditable.setAddressState("NJ");
            addressEditable.setAddressZip("07000");
            addressEditable.setAddressCountry(CountryExtended.US);
            addressEditable.setDescription("test description");
            addressEditable.setName("Thing T. Thing");

            validAddressesApi = new AddressesApi(config);
            address = validAddressesApi.AddressCreate(addressEditable);

            selfMailerEditable = new SelfMailerEditable();
            selfMailerEditable.setTo(address.getId());
            selfMailerEditable.setFrom(address.getId());
            selfMailerEditable.setSize(default(SelfMailerSize));
            selfMailerEditable.setDescription("C# integration test selfMailer");
            selfMailerEditable.setMetadata(default(Dictionary<string, string>));
            selfMailerEditable.setMailType(default(MailType));
            selfMailerEditable.setMergeVariables(default(Object));
            selfMailerEditable.setSendDate(default(DateTime));
            selfMailerEditable.setInside("https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf");
            selfMailerEditable.setOutside("https://s3.us-west-2.amazonaws.com/public.lob.com/assets/templates/self_mailers/6x18_sfm_inside.pdf");
            selfMailerEditable.setBillingGroupId(default(string));

            Dictionary<string, string> metadata = new Dictionary<string, string>();
            metadata.Add("fake campaign", "fakeid");
            selfMailerEditable.setMetadata(metadata);

            idsToDelete = new List<string>();
        }

        public void Dispose()
        {
            validAddressesApi.AddressDelete(address.getId());
            idsToDelete.ForEach(id => validApi.SelfMailerDelete(id));
        }

        [Test]
        public void SelfMailerCreateTest() {
            SelfMailer response = validApi.SelfMailerCreate(selfMailerEditable);

            Assert.NotNull(response.getId());
            Assert.AreEqual(response.getMetadata(), selfMailerEditable.getMetadata());
            idsToDelete.Add(response.getId());
        }

        [Test]
        public void SelfMailerCreateTestBadParameter() {
            try {
                SelfMailer response = validApi.SelfMailerCreate(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'selfMailerEditable'"));
            }
        }

        [Test]
        public void SelfMailerCreateTestBadUsername() {
            try {
                SelfMailer response = invalidApi.SelfMailerCreate(selfMailerEditable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void SelfMailerRetrieveTest() {
            SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
            idsToDelete.Add(createdSelfMailer.getId());

            SelfMailer retrievedSelfMailer = validApi.SelfMailerRetrieve(createdSelfMailer.getId());

            Assert.NotNull(retrievedSelfMailer.getId());
            Assert.AreEqual(retrievedSelfMailer.getId(), createdSelfMailer.getId());
        }

        [Test]
        public void SelfMailerRetrieveTestBadParameter() {
            try {
                SelfMailer response = validApi.SelfMailerRetrieve(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter"));
            }
        }

        [Test]
        public void SelfMailerRetrieveTestBadUsername() {
            SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
            idsToDelete.Add(createdSelfMailer.getId());

            try {
                SelfMailer response = invalidApi.SelfMailerRetrieve(createdSelfMailer.getId());
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void SelfMailerListTest() {
            SelfMailerList response = validApi.SelfMailersList(2, null, null, null, null, null, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithLimitParameter() {
            int limit = 2;
            SelfMailerList response = validApi.SelfMailersList(limit, null, null, null, null, null, null, null, null, null, null);

            Assert.AreEqual(response.getCount(), 2);
        }

        [Test]
        public void SelfMailerListTestWithIncludeParameter() {
            List<string> includeList = new List<string>();
            includeList.Add("total_count");

            SelfMailerList response = validApi.SelfMailersList(null, null, null, includeList, null, null, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
            Assert.NotNull(response.getTotalCount());
        }

        [Test]
        public void SelfMailerListTestWithDateCreatedParameter() {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, dateCreated, null, null, null, null, null, null);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithMetadataParameter() {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, metadata, null, null, null, null, null);
            Assert.GreaterOrEqual(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithSizeParameter() {
            List<SelfMailerSize> sizeArray = new List<SelfMailerSize>();
            sizeArray.Add(SelfMailerSize._6x18Bifold);

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, sizeArray);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithScheduledParameter() {
            Boolean scheduled = true;

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, scheduled);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithSendDateParameter() {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            sendDate.Add("lt", lastMonth.ToString("yyyy-MM-ddTHH\\:mm\\:ss.fffffffzzz"));

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, sendDate);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithMailTypeParameter() {
            MailType mailType = MailType.FirstClass;

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, null, mailType);
            Assert.GreaterOrEqual(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerListTestWithSortByParameter() {
            SortBy5 sortBy = new SortBy5();
            sortBy.setSendDate(SortBy5.SendDateEnum.Asc);

            SelfMailerList response = validApi.SelfMailersList(null, null, null, null, null, null, null, null, null, null, sortBy);
            Assert.Greater(response.getCount(), 0);
        }

        [Test]
        public void SelfMailerDeleteTest() {
            SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);

            SelfMailerDeletion deletedSelfMailer = validApi.SelfMailerDelete(createdSelfMailer.getId());
            Assert.True(deletedSelfMailer.getDeleted());
        }

        [Test]
        public void SelfMailerDeleteTestBadParameter() {
            try {
                SelfMailerDeletion deletedSelfMailer = validApi.SelfMailerDelete(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter"));
            }
        }

        [Test]
        public void SelfMailerDeleteTestBadUsername() {
            SelfMailer createdSelfMailer = validApi.SelfMailerCreate(selfMailerEditable);
            idsToDelete.Add(createdSelfMailer.getId());

            try {
                SelfMailerDeletion deletedSelfMailer = invalidApi.SelfMailerDelete(createdSelfMailer.getId());
            } catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }
    }
}