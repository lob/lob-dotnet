/*
 * Lob
 *
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)?
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using lob.dotnet.Client;
using lob.dotnet.Api;
using lob.dotnet.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace __tests__.Integration {
    [TestFixture]
    [Category("Integration")]
    [Parallelizable(scope: ParallelScope.Self)]
    public class ChecksApiTests : IDisposable
    {
        private ChecksApi validApi;
        private ChecksApi invalidApi;
        private CheckEditable checkEditable;
        private List<string> idsToDelete;

        private Address address1;
        private AddressesApi validAddressesApi;
        private BankAccount bankAccount;
        private BankAccountsApi validBankAccountsApi;

        public ChecksApiTests()
        {
            Configuration config = new Configuration();
            Configuration invalidConfig = new Configuration();

            DotNetEnv.Env.TraversePath().Load();
            config.Username = System.Environment.GetEnvironmentVariable("LOB_API_TEST_KEY");
            invalidConfig.Username = "fake api key";

            validApi = new ChecksApi(config);
            invalidApi = new ChecksApi(invalidConfig);

            BankAccountWritable bankAccountWritable = new BankAccountWritable(
                "Test Bank Account", // description
                "322271627", // routingNumber
                "123456789", // accountNumber
                BankTypeEnum.Individual, // accountType
                "Sinead Connor", // signatory
                null // metadata
            );

            validBankAccountsApi = new BankAccountsApi(config);
            bankAccount = validBankAccountsApi.create(bankAccountWritable);

            List<int> amounts = new List<int>();
            amounts.Add(11);
            amounts.Add(35);

            verify verification = new verify(amounts);
            validBankAccountsApi.verify(bankAccount.Id, verification);

            AddressEditable addressEditable1 = new AddressEditable(
                "1313 CEMETERY LN", // addressLine1
                null, // addressLine2
                "WESTFIELD", // addressCity
                "NJ", // addressState
                "07000", // addressZip
                CountryExtended.US, // addressCountry
                "test description", // description
                "Thing T. Thing", // name
                null, // company
                null, // phone
                null, // email
                null // metadata
            );

            AddressDomestic addressEditable2 = new AddressDomestic(
                "210 King St", // addressLine1
                "# 6100", // addressLine2
                "San Francisco", // addressCity
                "CA", // addressState
                "94107", // addressZip
                "Harry - Office", // description
                "Harry Zhang", // name
                "Lob", // company
                "5555555555", // phone
                "harry@lob.com", // email
                "US", // addressCountry
                null // metadata
            );

            validAddressesApi = new AddressesApi(config);
            address1 = validAddressesApi.create(addressEditable1);
            string address2 = addressEditable2.ToJson();

            checkEditable = new CheckEditable(
                address1.Id, // from
                address2, // to
                bankAccount.Id, // bankAccount
                100, // amount
                null, // logo
                null, // checkBottom
                null, // attachment
                "check 1" // description
            );

            idsToDelete = new List<string>();
        }

        public void Dispose()
        {
            validBankAccountsApi.delete(bankAccount.Id);
            validAddressesApi.delete(address1.Id);
            idsToDelete.ForEach(id => validApi.cancel(id));
        }

        [Test]
        public void createTest() {
            checkEditable.CheckNumber = 2;
            checkEditable.SendDate = DateTime.Now.AddDays(34);
            Check response = validApi.create(checkEditable);

            Assert.NotNull(response.Id);
            idsToDelete.Add(response.Id);
            Assert.AreEqual(response.Description, checkEditable.Description);
        }

        [Test]
        public void createTestBadParameter() {
            try {
                Check response = validApi.create(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'checkEditable'"));
            }
        }

        [Test]
        public void createTestBadUsername() {
            try {
                Check response = invalidApi.create(checkEditable);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void getTest() {
            Check check = validApi.create(checkEditable);
            idsToDelete.Add(check.Id);
            Check response = validApi.get(check.Id);

            Assert.NotNull(response.Id);
            Assert.AreEqual(response.Id, check.Id);
        }

        [Test]
        public void getTestBadParameter() {
            try {
                Check response = validApi.get(null);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Missing required parameter 'chkId'"));
            }
        }

        [Test]
        public void getTestBadUsername() {
            Check check = validApi.create(checkEditable);
            idsToDelete.Add(check.Id);
            try {
                Check response = invalidApi.get(check.Id);
            }
            catch (Exception e) {
                Assert.IsInstanceOf<ApiException>(e);
                Assert.That(e.Message, Does.Contain("Your API key is not valid"));
            }
        }

        [Test]
        public void CheckListTest() {
            CheckList response = validApi.list(null, null, null, null, null, null, null, null, null, null);

            Assert.Greater(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithLimitParameter() {
            int limit = 2;
            CheckList response = validApi.list(limit, null, null, null, null, null, null, null, null, null);

            Assert.AreEqual(response.Count, 2);
        }

        [Test]
        public void CheckListTestWithIncludeParameter() {
            List<string> includeList = new List<string>();
            includeList.Add("total_count");

            CheckList response = validApi.list(null, null, null, includeList);
            Assert.Greater(response.Count, 0);
            Assert.NotNull(response.TotalCount);
        }

        [Test]
        public void CheckListTestWithDateCreatedParameter() {
            Dictionary<String, DateTime> dateCreated = new Dictionary<String, DateTime>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            dateCreated.Add("lt", lastMonth);

            CheckList response = validApi.list(null, null, null, null, dateCreated);
            Assert.Greater(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithMetadataParameter() {
            Dictionary<String, String> metadata = new Dictionary<String, String>();
            metadata.Add("name", "Harry");

            CheckList response = validApi.list(null, null, null, null, null, metadata);
            Assert.Greater(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithScheduledParameter() {
            Boolean scheduled = true;

            CheckList response = validApi.list(null, null, null, null, null, null, scheduled);
            Assert.Greater(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithSendDateParameter() {
            Dictionary<String, String> sendDate = new Dictionary<String, String>();
            DateTime lastMonth = DateTime.Today.AddMonths(-1);
            sendDate.Add("lt", lastMonth.ToString("yyyy-MM-ddTHH\\:mm\\:ss.fffffffzzz"));

            CheckList response = validApi.list(null, null, null, null, null, null, null, sendDate);
            Assert.Greater(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithMailTypeParameter() {
            MailType mailType = MailType.FirstClass;

            CheckList response = validApi.list(null, null, null, null, null, null, null, null, mailType);
            Assert.GreaterOrEqual(response.Count, 0);
        }

        [Test]
        public void CheckListTestWithSortByParameter() {
            SortBy3 sortBy = new SortBy3(null, SortBy3.SendDateEnum.Asc);
            CheckList response = validApi.list(null, null, null, null, null, null, null, null, null, sortBy);
            Assert.Greater(response.Count, 0);
        }
    }
}